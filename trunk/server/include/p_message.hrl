%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.0.2

-ifndef(p_message).
-define(p_message, true).

-define(p_message_gpb_version, "4.0.2").

-ifndef('GIFTMAILINFO_PB_H').
-define('GIFTMAILINFO_PB_H', true).
-record(giftmailinfo,
        {mail_real_id           :: integer(),       % = 1, 32 bits
         mail_id                :: integer(),       % = 2, 32 bits
         title_content          :: iodata(),        % = 3
         param_list = []        :: [iodata()] | undefined, % = 4
         is_read                :: integer(),       % = 5, 32 bits
         attachment_state       :: integer(),       % = 6, 32 bits
         create_time            :: integer()        % = 7, 32 bits
        }).
-endif.

-ifndef('M_GIFT_INIT_MAIL_INFO_TOC_PB_H').
-define('M_GIFT_INIT_MAIL_INFO_TOC_PB_H', true).
-record(m_gift_init_mail_info_toc,
        {gift_mail_info_list = [] :: [#giftmailinfo{}] | undefined % = 1
        }).
-endif.

-ifndef('ACTIVESKILL_PB_H').
-define('ACTIVESKILL_PB_H', true).
-record(activeskill,
        {active_skill_id        :: integer(),       % = 1, 32 bits
         level                  :: integer(),       % = 2, 32 bits
         times                  :: integer(),       % = 3, 32 bits
         next_recover_time      :: integer(),       % = 4, 32 bits
         can_use_time           :: integer()        % = 5, 32 bits
        }).
-endif.

-ifndef('M_SKILL_USE_SKILL_TOC_PB_H').
-define('M_SKILL_USE_SKILL_TOC_PB_H', true).
-record(m_skill_use_skill_toc,
        {result                 :: 'success' | 'fail' | 'cd_time' | 'not_authority' | integer(), % = 1, enum m_skill_use_skill_toc.ENUM
         active_skill_id        :: integer(),       % = 2, 32 bits
         dir                    :: integer() | undefined, % = 3, 32 bits
         active_skill           :: #activeskill{}   % = 4
        }).
-endif.

-ifndef('M_SEVEN_LOGIN_UPDATE_CUMULATIVE_DAY_TOC_PB_H').
-define('M_SEVEN_LOGIN_UPDATE_CUMULATIVE_DAY_TOC_PB_H', true).
-record(m_seven_login_update_cumulative_day_toc,
        {cumulative_day         :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('BETMODIFICATION_PB_H').
-define('BETMODIFICATION_PB_H', true).
-record(betmodification,
        {pos                    :: integer(),       % = 1, 32 bits
         bet                    :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_WORLD_TREE_AWARD_TOS_PB_H').
-define('M_PLAYER_WORLD_TREE_AWARD_TOS_PB_H', true).
-record(m_player_world_tree_award_tos,
        {
        }).
-endif.

-ifndef('SCENEBOSSBET_PB_H').
-define('SCENEBOSSBET_PB_H', true).
-record(scenebossbet,
        {type                   :: integer(),       % = 1, 32 bits
         id                     :: integer(),       % = 2, 32 bits
         my_num                 :: integer(),       % = 3, 32 bits
         total_num              :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_SCENE_BOSS_BET_TOC_PB_H').
-define('M_MISSION_NOTICE_SCENE_BOSS_BET_TOC_PB_H', true).
-record(m_mission_notice_scene_boss_bet_toc,
        {scene_boss_bet_list = [] :: [#scenebossbet{}] | undefined % = 1
        }).
-endif.

-ifndef('M_ROOM_LEAVE_ROOM_LIST_TOS_PB_H').
-define('M_ROOM_LEAVE_ROOM_LIST_TOS_PB_H', true).
-record(m_room_leave_room_list_tos,
        {
        }).
-endif.

-ifndef('SMSCODEINFO_PB_H').
-define('SMSCODEINFO_PB_H', true).
-record(smscodeinfo,
        {mobile                 :: iodata(),        % = 1
         type                   :: non_neg_integer(), % = 2, 32 bits
         expire                 :: iodata(),        % = 3
         code                   :: iodata() | undefined % = 4
        }).
-endif.

-ifndef('MODELHEADFIGURE_PB_H').
-define('MODELHEADFIGURE_PB_H', true).
-record(modelheadfigure,
        {player_id              :: integer(),       % = 1, 32 bits
         sex                    :: integer(),       % = 2, 32 bits
         nickname               :: iodata(),        % = 3
         head_id                :: integer(),       % = 4, 32 bits
         vip_level              :: integer(),       % = 5, 32 bits
         level                  :: integer(),       % = 6, 32 bits
         head_frame_id          :: integer()        % = 7, 32 bits
        }).
-endif.

-ifndef('SHISHIROOMPLAYERDATA_PB_H').
-define('SHISHIROOMPLAYERDATA_PB_H', true).
-record(shishiroomplayerdata,
        {pos_id                 :: integer(),       % = 1, 32 bits
         model_head_figure      :: #modelheadfigure{}, % = 2
         is_ready               :: integer(),       % = 3, 32 bits
         is_room_owner          :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('SHISHIROOMDATA_PB_H').
-define('SHISHIROOMDATA_PB_H', true).
-record(shishiroomdata,
        {room_id                :: integer(),       % = 1, 32 bits
         mission_id             :: integer(),       % = 2, 32 bits
         people_count           :: integer(),       % = 3, 32 bits
         is_lock                :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('SHISHIROOMDETAILSDATA_PB_H').
-define('SHISHIROOMDETAILSDATA_PB_H', true).
-record(shishiroomdetailsdata,
        {room_data              :: #shishiroomdata{}, % = 1
         invitation_code        :: iodata(),        % = 2
         room_player_data_list = [] :: [#shishiroomplayerdata{}] | undefined, % = 3
         is_room_owner          :: integer(),       % = 4, 32 bits
         owner_name             :: iodata(),        % = 6
         owner_level            :: integer()        % = 7, 32 bits
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_CREATE_ROOM_TOC_PB_H').
-define('M_SHI_SHI_ROOM_CREATE_ROOM_TOC_PB_H', true).
-record(m_shi_shi_room_create_room_toc,
        {result                 :: 'success' | 'fail' | 'no_condition' | 'already_join_room' | 'none' | integer(), % = 1, enum m_shi_shi_room_create_room_toc.ENUM
         room_details_data      :: #shishiroomdetailsdata{} | undefined % = 2
        }).
-endif.

-ifndef('WAITSKILL_PB_H').
-define('WAITSKILL_PB_H', true).
-record(waitskill,
        {dir                    :: integer(),       % = 1, 32 bits
         x                      :: integer(),       % = 2, 32 bits
         y                      :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('BUFF_PB_H').
-define('BUFF_PB_H', true).
-record(buff,
        {id                     :: integer(),       % = 1, 32 bits
         level                  :: integer(),       % = 2, 32 bits
         left_time              :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('MOVEPATH_PB_H').
-define('MOVEPATH_PB_H', true).
-record(movepath,
        {x                      :: integer(),       % = 1, 32 bits
         y                      :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('SCENEMONSTER_PB_H').
-define('SCENEMONSTER_PB_H', true).
-record(scenemonster,
        {scene_monster_id       :: integer(),       % = 1, 32 bits
         monster_id             :: integer(),       % = 2, 32 bits
         x                      :: integer(),       % = 3, 32 bits
         y                      :: integer(),       % = 4, 32 bits
         move_path = []         :: [#movepath{}] | undefined, % = 5
         move_speed             :: integer(),       % = 6, 32 bits
         dir                    :: integer(),       % = 7, 32 bits
         hp                     :: non_neg_integer(), % = 8, 32 bits
         max_hp                 :: non_neg_integer(), % = 9, 32 bits
         buff_list = []         :: [#buff{}] | undefined, % = 10
         belong_player_id       :: integer(),       % = 11, 32 bits
         level                  :: integer(),       % = 12, 32 bits
         owner_player_id        :: integer(),       % = 13, 32 bits
         bind_don_end_time      :: integer(),       % = 14, 32 bits
         destroy_time           :: integer(),       % = 15, 32 bits
         is_call_monster        :: integer(),       % = 17, 32 bits
         wait_skill             :: #waitskill{} | undefined % = 18
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_LEAVE_ROOM_TOS_PB_H').
-define('M_MATCH_SCENE_ROOM_LEAVE_ROOM_TOS_PB_H', true).
-record(m_match_scene_room_leave_room_tos,
        {
        }).
-endif.

-ifndef('M_RED_PACKET_NOTICE_PLAYER_RED_PACKET_CLEAR_TOC_PB_H').
-define('M_RED_PACKET_NOTICE_PLAYER_RED_PACKET_CLEAR_TOC_PB_H', true).
-record(m_red_packet_notice_player_red_packet_clear_toc,
        {r_id_list = []         :: [integer()] | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_READY_TOS_PB_H').
-define('M_SHI_SHI_ROOM_READY_TOS_PB_H', true).
-record(m_shi_shi_room_ready_tos,
        {is_ready               :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_START_TOC_PB_H').
-define('M_SHI_SHI_ROOM_START_TOC_PB_H', true).
-record(m_shi_shi_room_start_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'not_enough_number' | 'already_start' | 'no_condition' | integer() % = 1, enum m_shi_shi_room_start_toc.ENUM
        }).
-endif.

-ifndef('M_DAILY_TASK_GET_POINTS_AWARD_TOS_PB_H').
-define('M_DAILY_TASK_GET_POINTS_AWARD_TOS_PB_H', true).
-record(m_daily_task_get_points_award_tos,
        {id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('HERO_PB_H').
-define('HERO_PB_H', true).
-record(hero,
        {id                     :: integer(),       % = 1, 32 bits
         star                   :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('PLAYERHERO_PB_H').
-define('PLAYERHERO_PB_H', true).
-record(playerhero,
        {id                     :: integer(),       % = 1, 32 bits
         arms                   :: integer(),       % = 2, 32 bits
         ornaments              :: integer(),       % = 3, 32 bits
         list = []              :: [integer()] | undefined, % = 4, 32 bits
         hero_list = []         :: [#hero{}] | undefined % = 5
        }).
-endif.

-ifndef('M_EVERYDAY_SIGN_EVERYDAY_SIGN_TOC_PB_H').
-define('M_EVERYDAY_SIGN_EVERYDAY_SIGN_TOC_PB_H', true).
-record(m_everyday_sign_everyday_sign_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'function_no_open' | 'already_have' | 'not_enough_grid' | 'no_enough_prop' | integer(), % = 1, enum m_everyday_sign_everyday_sign_toc.ENUM
         today                  :: integer(),       % = 2, 32 bits
         round                  :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_SHI_SHI_VALUE_TOC_PB_H').
-define('M_MISSION_NOTICE_SHI_SHI_VALUE_TOC_PB_H', true).
-record(m_mission_notice_shi_shi_value_toc,
        {value                  :: integer()        % = 7, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_GET_PLAYER_INFO_TOS_PB_H').
-define('M_PLAYER_GET_PLAYER_INFO_TOS_PB_H', true).
-record(m_player_get_player_info_tos,
        {player_id              :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_READY_TOC_PB_H').
-define('M_MANY_PEOPLE_BOSS_READY_TOC_PB_H', true).
-record(m_many_people_boss_ready_toc,
        {result                 :: 'success' | 'fail' | 'not_enough_mana' | integer(), % = 1, enum m_many_people_boss_ready_toc.ENUM
         is_ready               :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_LOGIN_HEART_BEAT_TOS_PB_H').
-define('M_LOGIN_HEART_BEAT_TOS_PB_H', true).
-record(m_login_heart_beat_tos,
        {heartbeat_code         :: iodata() | undefined % = 1
        }).
-endif.

-ifndef('M_GIFT_REMOVE_MAIL_TOC_PB_H').
-define('M_GIFT_REMOVE_MAIL_TOC_PB_H', true).
-record(m_gift_remove_mail_toc,
        {mail_real_id = []      :: [integer()] | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('M_PROMOTE_GET_AWARD_TOC_PB_H').
-define('M_PROMOTE_GET_AWARD_TOC_PB_H', true).
-record(m_promote_get_award_toc,
        {result                 :: 'success' | 'fail' | 'times_limit' | 'none' | integer(), % = 1, enum m_promote_get_award_toc.ENUM
         mana                   :: integer(),       % = 2, 32 bits
         vip_exp                :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_VERIFY_CODE_SMS_CODE_TOS_PB_H').
-define('M_VERIFY_CODE_SMS_CODE_TOS_PB_H', true).
-record(m_verify_code_sms_code_tos,
        {mobile                 :: iodata(),        % = 1
         operation              :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_JIANGJINCHI_GET_INFO_TOS_PB_H').
-define('M_JIANGJINCHI_GET_INFO_TOS_PB_H', true).
-record(m_jiangjinchi_get_info_tos,
        {
        }).
-endif.

-ifndef('M_SCENE_PLAYER_REBIRTH_TOC_PB_H').
-define('M_SCENE_PLAYER_REBIRTH_TOC_PB_H', true).
-record(m_scene_player_rebirth_toc,
        {result                 :: 'success' | 'fail' | integer() % = 2, enum m_scene_player_rebirth_toc.ENUM
        }).
-endif.

-ifndef('M_SCENE_EVENT_DO_TURNTABLE_TOS_PB_H').
-define('M_SCENE_EVENT_DO_TURNTABLE_TOS_PB_H', true).
-record(m_scene_event_do_turntable_tos,
        {
        }).
-endif.

-ifndef('M_FIGHT_NOTICE_FIGHT_FAIL_TOC_PB_H').
-define('M_FIGHT_NOTICE_FIGHT_FAIL_TOC_PB_H', true).
-record(m_fight_notice_fight_fail_toc,
        {reason                 :: 'cd_time' | 'fail' | integer() % = 1, enum m_fight_notice_fight_fail_toc.ENUM
        }).
-endif.

-ifndef('MATCHSCENEROOMDATA_PB_H').
-define('MATCHSCENEROOMDATA_PB_H', true).
-record(matchsceneroomdata,
        {type                   :: integer(),       % = 1, 32 bits
         room_id                :: integer(),       % = 2, 32 bits
         model_head_figure      :: #modelheadfigure{}, % = 3
         cost_num               :: integer(),       % = 4, 32 bits
         is_lock                :: integer(),       % = 5, 32 bits
         recruit_time           :: integer(),       % = 6, 32 bits
         people_num             :: integer()        % = 7, 32 bits
        }).
-endif.

-ifndef('M_WHEEL_GET_PLAYER_LIST_TOS_PB_H').
-define('M_WHEEL_GET_PLAYER_LIST_TOS_PB_H', true).
-record(m_wheel_get_player_list_tos,
        {
        }).
-endif.

-ifndef('M_PROP_MERGE_TOC_PB_H').
-define('M_PROP_MERGE_TOC_PB_H', true).
-record(m_prop_merge_toc,
        {result                 :: 'success' | 'fail' | 'no_enough_prop' | 'not_enough_grid' | 'not_authority' | integer(), % = 1, enum m_prop_merge_toc.ENUM
         id                     :: integer(),       % = 2, 32 bits
         num                    :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_TIME_EVENT_LIST_SLEEP_TOC_PB_H').
-define('M_SCENE_NOTICE_TIME_EVENT_LIST_SLEEP_TOC_PB_H', true).
-record(m_scene_notice_time_event_list_sleep_toc,
        {
        }).
-endif.

-ifndef('INVESTDATA_PB_H').
-define('INVESTDATA_PB_H', true).
-record(investdata,
        {id                     :: integer(),       % = 1, 32 bits
         state                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('INVESTTYPEDATA_PB_H').
-define('INVESTTYPEDATA_PB_H', true).
-record(investtypedata,
        {type                   :: integer(),       % = 1, 32 bits
         is_buy                 :: integer(),       % = 2, 32 bits
         invest_data = []       :: [#investdata{}] | undefined % = 3
        }).
-endif.

-ifndef('M_INVEST_NOTICE_INVEST_TYPE_DATA_UPDATE_TOC_PB_H').
-define('M_INVEST_NOTICE_INVEST_TYPE_DATA_UPDATE_TOC_PB_H', true).
-record(m_invest_notice_invest_type_data_update_toc,
        {invest_type_data       :: #investtypedata{} % = 1
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_SHARE_TOC_PB_H').
-define('M_PLATFORM_FUNCTION_SHARE_TOC_PB_H', true).
-record(m_platform_function_share_toc,
        {result                 :: 'success' | 'fail' | 'times_limit' | integer() % = 1, enum m_platform_function_share_toc.ENUM
        }).
-endif.

-ifndef('M_PROP_SELL_ITEM_TOS_PB_H').
-define('M_PROP_SELL_ITEM_TOS_PB_H', true).
-record(m_prop_sell_item_tos,
        {item_id                :: integer(),       % = 1, 32 bits
         num                    :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('PROP_PB_H').
-define('PROP_PB_H', true).
-record(prop,
        {prop_id                :: integer(),       % = 1, 32 bits
         num                    :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('M_CARD_SUMMON_DO_SUMMON_TOC_PB_H').
-define('M_CARD_SUMMON_DO_SUMMON_TOC_PB_H', true).
-record(m_card_summon_do_summon_toc,
        {result                 :: 'success' | 'not_authority' | 'no_enough_prop' | 'unknown' | integer(), % = 1, enum m_card_summon_do_summon_toc.ENUM
         prop_list = []         :: [#prop{}] | undefined % = 2
        }).
-endif.

-ifndef('ROOMPLAYERDATA_PB_H').
-define('ROOMPLAYERDATA_PB_H', true).
-record(roomplayerdata,
        {pos_id                 :: integer(),       % = 1, 32 bits
         model_head_figure      :: #modelheadfigure{}, % = 2
         is_ready               :: integer(),       % = 3, 32 bits
         is_room_owner          :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_DELETE_ROOM_TOC_PB_H').
-define('M_MATCH_SCENE_ROOM_DELETE_ROOM_TOC_PB_H', true).
-record(m_match_scene_room_delete_room_toc,
        {type                   :: integer(),       % = 1, 32 bits
         room_id                :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_NEW_GUESS_RESULT_TOC.BETAWARD_PB_H').
-define('M_MISSION_NOTICE_NEW_GUESS_RESULT_TOC.BETAWARD_PB_H', true).
-record('m_mission_notice_new_guess_result_toc.betaward',
        {bet                    :: integer(),       % = 1, 32 bits
         award_value            :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('GUESSSCENEFIGHT.GUESSSCENEFIGHTDEFENDER_PB_H').
-define('GUESSSCENEFIGHT.GUESSSCENEFIGHTDEFENDER_PB_H', true).
-record('guessscenefight.guessscenefightdefender',
        {monster_id             :: integer(),       % = 1, 32 bits
         hp                     :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('GUESSSCENEFIGHT_PB_H').
-define('GUESSSCENEFIGHT_PB_H', true).
-record(guessscenefight,
        {time                   :: integer(),       % = 1, 32 bits
         monster_id             :: integer(),       % = 2, 32 bits
         skill_id               :: integer(),       % = 3, 32 bits
         target_monster_id      :: integer(),       % = 4, 32 bits
         defender_list = []     :: [#'guessscenefight.guessscenefightdefender'{}] | undefined % = 5
        }).
-endif.

-ifndef('GUESSSCENESTEPMOVE_PB_H').
-define('GUESSSCENESTEPMOVE_PB_H', true).
-record(guessscenestepmove,
        {time                   :: integer(),       % = 1, 32 bits
         monster_id             :: integer(),       % = 2, 32 bits
         x                      :: integer(),       % = 3, 32 bits
         y                      :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('GUESSSCENEMOVE_PB_H').
-define('GUESSSCENEMOVE_PB_H', true).
-record(guessscenemove,
        {time                   :: integer(),       % = 1, 32 bits
         monster_id             :: integer(),       % = 2, 32 bits
         x                      :: integer(),       % = 3, 32 bits
         y                      :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_NEW_GUESS_RESULT_TOC_PB_H').
-define('M_MISSION_NOTICE_NEW_GUESS_RESULT_TOC_PB_H', true).
-record(m_mission_notice_new_guess_result_toc,
        {move_list = []         :: [#guessscenemove{}] | undefined, % = 1
         stop_move_list = []    :: [#guessscenestepmove{}] | undefined, % = 2
         fight_list = []        :: [#guessscenefight{}] | undefined, % = 3
         bet_award_list = []    :: [#'m_mission_notice_new_guess_result_toc.betaward'{}] | undefined % = 4
        }).
-endif.

-ifndef('PLAYEREFFECTINSCENE_PB_H').
-define('PLAYEREFFECTINSCENE_PB_H', true).
-record(playereffectinscene,
        {skill_id               :: non_neg_integer(), % = 1, 32 bits
         timestamp              :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('PLAYEROTHERDATA_PB_H').
-define('PLAYEROTHERDATA_PB_H', true).
-record(playerotherdata,
        {head_id                :: integer(),       % = 1, 32 bits
         head_frame_id          :: integer(),       % = 2, 32 bits
         chat_qi_pao_id         :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('SCENEPLAYER_PB_H').
-define('SCENEPLAYER_PB_H', true).
-record(sceneplayer,
        {player_id              :: integer(),       % = 1, 32 bits
         nickname               :: iodata(),        % = 2
         sex                    :: integer(),       % = 3, 32 bits
         level                  :: integer(),       % = 4, 32 bits
         vip_level              :: integer(),       % = 5, 32 bits
         hp                     :: non_neg_integer(), % = 6, 32 bits
         max_hp                 :: non_neg_integer(), % = 7, 32 bits
         move_speed             :: integer(),       % = 8, 32 bits
         x                      :: integer(),       % = 9, 32 bits
         y                      :: integer(),       % = 10, 32 bits
         go_x                   :: integer(),       % = 11, 32 bits
         go_y                   :: integer(),       % = 12, 32 bits
         move_type              :: integer(),       % = 13, 32 bits
         dir                    :: integer(),       % = 14, 32 bits
         move_path = []         :: [#movepath{}] | undefined, % = 15
         title_id               :: integer(),       % = 17, 32 bits
         magic_weapon_id        :: integer(),       % = 18, 32 bits
         buff_list = []         :: [#buff{}] | undefined, % = 21
         anger                  :: integer(),       % = 22, 32 bits
         anger_skill_effect     :: integer(),       % = 23, 32 bits
         hero_id                :: integer(),       % = 26, 32 bits
         hero_arms_id           :: integer(),       % = 27, 32 bits
         hero_ornaments_id      :: integer(),       % = 28, 32 bits
         dizzy_close_time       :: integer(),       % = 32, 32 bits
         player_other_data      :: #playerotherdata{}, % = 33
         kuangbao_time          :: integer(),       % = 34, 32 bits
         player_effect_in_scene = [] :: [#playereffectinscene{}] | undefined % = 45
        }).
-endif.

-ifndef('M_SCENE_NOTICE_SCENE_PLAYER_ENTER_TOC_PB_H').
-define('M_SCENE_NOTICE_SCENE_PLAYER_ENTER_TOC_PB_H', true).
-record(m_scene_notice_scene_player_enter_toc,
        {scene_player           :: #sceneplayer{}   % = 1
        }).
-endif.

-ifndef('SCENEITEM_PB_H').
-define('SCENEITEM_PB_H', true).
-record(sceneitem,
        {id                     :: integer(),       % = 1, 32 bits
         type                   :: integer(),       % = 2, 32 bits
         base_id                :: integer(),       % = 4, 32 bits
         num                    :: integer(),       % = 5, 32 bits
         x                      :: integer(),       % = 6, 32 bits
         y                      :: integer(),       % = 7, 32 bits
         scene_monsrer_id       :: integer(),       % = 8, 32 bits
         owner_player_id        :: integer()        % = 9, 32 bits
        }).
-endif.

-ifndef('SCENEITEMID_PB_H').
-define('SCENEITEMID_PB_H', true).
-record(sceneitemid,
        {type                   :: integer(),       % = 1, 32 bits
         id                     :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SCENE_SYNC_SCENE_TOC_PB_H').
-define('M_SCENE_SYNC_SCENE_TOC_PB_H', true).
-record(m_scene_sync_scene_toc,
        {remove_scene_player_id_list = [] :: [integer()] | undefined, % = 1, 32 bits
         remove_scene_monster_id_list = [] :: [integer()] | undefined, % = 2, 32 bits
         remove_scene_item_id_list = [] :: [#sceneitemid{}] | undefined, % = 3
         scene_player_list = [] :: [#sceneplayer{}] | undefined, % = 4
         scene_monster_list = [] :: [#scenemonster{}] | undefined, % = 5
         scene_item_list = []   :: [#sceneitem{}] | undefined % = 6
        }).
-endif.

-ifndef('M_SYS_COMMON_CHANGE_STATE_TOS_PB_H').
-define('M_SYS_COMMON_CHANGE_STATE_TOS_PB_H', true).
-record(m_sys_common_change_state_tos,
        {id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_VIP_GET_VIP_AWARD_TOS_PB_H').
-define('M_VIP_GET_VIP_AWARD_TOS_PB_H', true).
-record(m_vip_get_vip_award_tos,
        {vip_level              :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MISSION_LUCKY_BOSS_STATUS_TOC_PB_H').
-define('M_MISSION_LUCKY_BOSS_STATUS_TOC_PB_H', true).
-record(m_mission_lucky_boss_status_toc,
        {state                  :: integer(),       % = 1, 32 bits
         timestamp              :: integer(),       % = 2, 32 bits
         players                :: integer(),       % = 3, 32 bits
         operation              :: integer() | undefined, % = 4, 32 bits
         previous_timestamp     :: integer() | undefined % = 5, 32 bits
        }).
-endif.

-ifndef('M_MAIL_READ_MAIL_TOS_PB_H').
-define('M_MAIL_READ_MAIL_TOS_PB_H', true).
-record(m_mail_read_mail_tos,
        {mail_real_id           :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_READY_NOTICE_TOC_PB_H').
-define('M_MISSION_NOTICE_READY_NOTICE_TOC_PB_H', true).
-record(m_mission_notice_ready_notice_toc,
        {delay                  :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_GIFT_GIVE_GIFT_TOC_PB_H').
-define('M_GIFT_GIVE_GIFT_TOC_PB_H', true).
-record(m_gift_give_gift_toc,
        {result                 :: 'success' | 'fail' | 'no_enough_prop' | 'expire' | 'invalid_code' | 'function_no_open' | integer() % = 1, enum m_gift_give_gift_toc.ENUM
        }).
-endif.

-ifndef('M_PLAYER_CUSTOMER_URL_TOC.CUSTOMER_URL_DATA_PB_H').
-define('M_PLAYER_CUSTOMER_URL_TOC.CUSTOMER_URL_DATA_PB_H', true).
-record('m_player_customer_url_toc.customer_url_data',
        {url                    :: iodata()         % = 1
        }).
-endif.

-ifndef('M_PLAYER_CUSTOMER_URL_TOC_PB_H').
-define('M_PLAYER_CUSTOMER_URL_TOC_PB_H', true).
-record(m_player_customer_url_toc,
        {result                 :: 'success' | 'fail' | 'not_data' | integer(), % = 1, enum m_player_customer_url_toc.ENUM
         customer_url = []      :: [#'m_player_customer_url_toc.customer_url_data'{}] | undefined % = 2
        }).
-endif.

-ifndef('M_HERO_HERO_UP_STAR_TOS_PB_H').
-define('M_HERO_HERO_UP_STAR_TOS_PB_H', true).
-record(m_hero_hero_up_star_tos,
        {id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('AWARDSTATE_PB_H').
-define('AWARDSTATE_PB_H', true).
-record(awardstate,
        {id                     :: integer(),       % = 1, 32 bits
         state                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('SCENENPCDATA_PB_H').
-define('SCENENPCDATA_PB_H', true).
-record(scenenpcdata,
        {scene_id               :: integer(),       % = 1, 32 bits
         x                      :: integer(),       % = 2, 32 bits
         y                      :: integer(),       % = 3, 32 bits
         npc_id                 :: integer(),       % = 4, 32 bits
         npc_name               :: iodata()         % = 5
        }).
-endif.

-ifndef('M_SCENE_UPDATE_NPC_DATE_TOC_PB_H').
-define('M_SCENE_UPDATE_NPC_DATE_TOC_PB_H', true).
-record(m_scene_update_npc_date_toc,
        {npc_data = []          :: [#scenenpcdata{}] | undefined % = 1
        }).
-endif.

-ifndef('M_TONGXINGZHENG_PURCHASE_LEVEL_TOC_PB_H').
-define('M_TONGXINGZHENG_PURCHASE_LEVEL_TOC_PB_H', true).
-record(m_tongxingzheng_purchase_level_toc,
        {result                 :: 'success' | 'no_enough_prop' | 'not_authority' | 'unknown' | integer() % = 1, enum m_tongxingzheng_purchase_level_toc.ENUM
        }).
-endif.

-ifndef('FIRSTCHARGEDATA_PB_H').
-define('FIRSTCHARGEDATA_PB_H', true).
-record(firstchargedata,
        {day                    :: integer(),       % = 1, 32 bits
         state                  :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_GET_SHARE_TASK_AWARD_TOS_PB_H').
-define('M_PLATFORM_FUNCTION_GET_SHARE_TASK_AWARD_TOS_PB_H', true).
-record(m_platform_function_get_share_task_award_tos,
        {task_type              :: integer(),       % = 1, 32 bits
         task_id                :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_CHARGE_NOTICE_IS_OPEN_CHARGE_TOC_PB_H').
-define('M_CHARGE_NOTICE_IS_OPEN_CHARGE_TOC_PB_H', true).
-record(m_charge_notice_is_open_charge_toc,
        {is_open                :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('AREACODEREGION_PB_H').
-define('AREACODEREGION_PB_H', true).
-record(areacoderegion,
        {area_code              :: iodata(),        % = 1
         region                 :: iodata() | undefined % = 2
        }).
-endif.

-ifndef('M_TASK_BOUNTY_QUERY_INFO_TOS_PB_H').
-define('M_TASK_BOUNTY_QUERY_INFO_TOS_PB_H', true).
-record(m_task_bounty_query_info_tos,
        {
        }).
-endif.

-ifndef('M_MISSION_NOTICE_MISSION_CLOSE_TIME_TOC_PB_H').
-define('M_MISSION_NOTICE_MISSION_CLOSE_TIME_TOC_PB_H', true).
-record(m_mission_notice_mission_close_time_toc,
        {time                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_GET_ROOM_LIST_TOC_PB_H').
-define('M_MATCH_SCENE_ROOM_GET_ROOM_LIST_TOC_PB_H', true).
-record(m_match_scene_room_get_room_list_toc,
        {room_data_list = []    :: [#matchsceneroomdata{}] | undefined % = 1
        }).
-endif.

-ifndef('WINNERRATE_PB_H').
-define('WINNERRATE_PB_H', true).
-record(winnerrate,
        {boss_id                :: integer(),       % = 1, 32 bits
         rate                   :: float() | integer() | infinity | '-infinity' | nan, % = 2
         monster_id             :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_REFRESH_OPEN_KEY_TOC_PB_H').
-define('M_PLATFORM_FUNCTION_REFRESH_OPEN_KEY_TOC_PB_H', true).
-record(m_platform_function_refresh_open_key_toc,
        {
        }).
-endif.

-ifndef('M_SEIZE_TREASURE_CURRENCY_SEIZE_TREASURE_TYPE_TOC_PB_H').
-define('M_SEIZE_TREASURE_CURRENCY_SEIZE_TREASURE_TYPE_TOC_PB_H', true).
-record(m_seize_treasure_currency_seize_treasure_type_toc,
        {type_id                :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('PROMOTERECORD_PB_H').
-define('PROMOTERECORD_PB_H', true).
-record(promoterecord,
        {real_id                :: integer(),       % = 1, 32 bits
         id                     :: integer(),       % = 2, 32 bits
         param_list = []        :: [iodata()] | undefined, % = 3
         time                   :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('HURTSECTION_PB_H').
-define('HURTSECTION_PB_H', true).
-record(hurtsection,
        {hurt                   :: non_neg_integer(), % = 1, 32 bits
         delay                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('EFFECT_PB_H').
-define('EFFECT_PB_H', true).
-record(effect,
        {id                     :: integer(),       % = 1, 32 bits
         data                   :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('DEFENDERRESULT_PB_H').
-define('DEFENDERRESULT_PB_H', true).
-record(defenderresult,
        {defender_id            :: integer(),       % = 1, 32 bits
         defender_type          :: integer(),       % = 2, 32 bits
         hp                     :: non_neg_integer(), % = 3, 32 bits
         hurt                   :: non_neg_integer(), % = 4, 32 bits
         type                   :: 'normal' | 'dodge' | 'crit' | integer(), % = 5, enum DefenderResult.ENUM
         x                      :: integer(),       % = 6, 32 bits
         y                      :: integer(),       % = 7, 32 bits
         buff_list = []         :: [#buff{}] | undefined, % = 8
         effect_list = []       :: [#effect{}] | undefined, % = 9
         hurt_section_list = [] :: [#hurtsection{}] | undefined, % = 10
         total_mano             :: integer(),       % = 11, 32 bits
         all_total_mano         :: integer(),       % = 12, 32 bits
         beat_times             :: integer(),       % = 13, 32 bits
         mano_award             :: integer(),       % = 14, 32 bits
         exp                    :: integer(),       % = 17, 32 bits
         special_event          :: integer(),       % = 18, 32 bits
         dizzy_close_time       :: integer(),       % = 19, 32 bits
         award_player_id        :: integer()        % = 20, 32 bits
        }).
-endif.

-ifndef('DAILYTASKDATA_PB_H').
-define('DAILYTASKDATA_PB_H', true).
-record(dailytaskdata,
        {id                     :: integer(),       % = 1, 32 bits
         value                  :: non_neg_integer(), % = 2, 32 bits
         state                  :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_DAILY_TASK_GET_INFO_TOC_PB_H').
-define('M_DAILY_TASK_GET_INFO_TOC_PB_H', true).
-record(m_daily_task_get_info_toc,
        {points                 :: integer(),       % = 1, 32 bits
         points_rewards = []    :: [integer()] | undefined, % = 2, 32 bits
         daily_task_data_list = [] :: [#dailytaskdata{}] | undefined % = 3
        }).
-endif.

-ifndef('EVERYDAYSIGNDATA_PB_H').
-define('EVERYDAYSIGNDATA_PB_H', true).
-record(everydaysigndata,
        {day                    :: integer(),       % = 1, 32 bits
         today = []             :: [integer()] | undefined, % = 2, 32 bits
         round                  :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_FIGHT_USE_ITEM_TOS_PB_H').
-define('M_FIGHT_USE_ITEM_TOS_PB_H', true).
-record(m_fight_use_item_tos,
        {item_id                :: integer(),       % = 1, 32 bits
         mano_value             :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_CHANGE_SEX_TOS_PB_H').
-define('M_PLAYER_CHANGE_SEX_TOS_PB_H', true).
-record(m_player_change_sex_tos,
        {sex                    :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_GIFT_READ_MAIL_TOS_PB_H').
-define('M_GIFT_READ_MAIL_TOS_PB_H', true).
-record(m_gift_read_mail_tos,
        {mail_real_id           :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SEIZE_TREASURE_GET_TREASURE_TOC_PB_H').
-define('M_SEIZE_TREASURE_GET_TREASURE_TOC_PB_H', true).
-record(m_seize_treasure_get_treasure_toc,
        {result                 :: 'success' | 'no_enough_prop' | 'invalid_platform' | 'invalid_seize_treasure_data' | 'unknown' | integer(), % = 1, enum m_seize_treasure_get_treasure_toc.ENUM
         prop_list = []         :: [#prop{}] | undefined, % = 2
         times                  :: integer() | undefined, % = 3, 32 bits
         value                  :: integer() | undefined, % = 4, 32 bits
         idx                    :: iodata() | undefined % = 5
        }).
-endif.

-ifndef('M_CARD_GET_AWARD_TOC_PB_H').
-define('M_CARD_GET_AWARD_TOC_PB_H', true).
-record(m_card_get_award_toc,
        {result                 :: 'success' | 'fail' | 'no_condition' | integer(), % = 100, enum m_card_get_award_toc.ENUM
         type                   :: integer(),       % = 1, 32 bits
         id                     :: integer(),       % = 2, 32 bits
         prop_list = []         :: [#prop{}] | undefined % = 3
        }).
-endif.

-ifndef('CHARGETYPEDATA_PB_H').
-define('CHARGETYPEDATA_PB_H', true).
-record(chargetypedata,
        {idx                    :: integer(),       % = 1, 32 bits
         name                   :: iodata()         % = 2
        }).
-endif.

-ifndef('M_CHARGE_GET_CHARGE_TYPE_TOC_PB_H').
-define('M_CHARGE_GET_CHARGE_TYPE_TOC_PB_H', true).
-record(m_charge_get_charge_type_toc,
        {status                 :: integer(),       % = 1, 32 bits
         charge_type_data = []  :: [#chargetypedata{}] | undefined % = 2
        }).
-endif.

-ifndef('M_LEICHONG_GET_REWARD_TOC_PB_H').
-define('M_LEICHONG_GET_REWARD_TOC_PB_H', true).
-record(m_leichong_get_reward_toc,
        {activity_id            :: integer(),       % = 1, 32 bits
         id                     :: integer(),       % = 2, 32 bits
         prop_list = []         :: [#prop{}] | undefined, % = 3
         result                 :: 'success' | 'already_get' | 'undone' | integer() % = 4, enum m_leichong_get_reward_toc.ENUM
        }).
-endif.

-ifndef('M_SCENE_NOTICE_MONSTER_SPEAK_TOC_PB_H').
-define('M_SCENE_NOTICE_MONSTER_SPEAK_TOC_PB_H', true).
-record(m_scene_notice_monster_speak_toc,
        {monster_id             :: integer(),       % = 1, 32 bits
         id                     :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_ROOM_FIGHT_RESULT_TOS_PB_H').
-define('M_ROOM_FIGHT_RESULT_TOS_PB_H', true).
-record(m_room_fight_result_tos,
        {winner                 :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_GIFT_READ_MAIL_TOC_PB_H').
-define('M_GIFT_READ_MAIL_TOC_PB_H', true).
-record(m_gift_read_mail_toc,
        {result                 :: 'success' | 'fail' | integer(), % = 1, enum m_gift_read_mail_toc.ENUM
         mail_real_id           :: integer(),       % = 2, 32 bits
         mail_id                :: integer(),       % = 3, 32 bits
         content                :: iodata(),        % = 4
         param_list = []        :: [iodata()] | undefined, % = 5
         prop_list = []         :: [#prop{}] | undefined % = 6
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_NOTICE_PLATFORM_VIP_LEVEL_TOC_PB_H').
-define('M_PLATFORM_FUNCTION_NOTICE_PLATFORM_VIP_LEVEL_TOC_PB_H', true).
-record(m_platform_function_notice_platform_vip_level_toc,
        {p_vip_level            :: integer(),       % = 1, 32 bits
         p_vip_award_state      :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_SPECIAL_SKILL_CHANGE_TOC_PB_H').
-define('M_SCENE_NOTICE_SPECIAL_SKILL_CHANGE_TOC_PB_H', true).
-record(m_scene_notice_special_skill_change_toc,
        {player_id              :: integer(),       % = 1, 32 bits
         special_skill_id       :: integer(),       % = 24, 32 bits
         special_skill_expire_time :: integer(),    % = 25, 32 bits
         scene_monster_id       :: integer()        % = 26, 32 bits
        }).
-endif.

-ifndef('M_WHEEL_EXIT_WHEEL_TOS_PB_H').
-define('M_WHEEL_EXIT_WHEEL_TOS_PB_H', true).
-record(m_wheel_exit_wheel_tos,
        {
        }).
-endif.

-ifndef('M_CARD_SUMMON_DO_SUMMON_TOS_PB_H').
-define('M_CARD_SUMMON_DO_SUMMON_TOS_PB_H', true).
-record(m_card_summon_do_summon_tos,
        {type                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_GUESS_BOSS_MISSION_TIME_TOC_PB_H').
-define('M_MISSION_NOTICE_GUESS_BOSS_MISSION_TIME_TOC_PB_H', true).
-record(m_mission_notice_guess_boss_mission_time_toc,
        {state                  :: integer(),       % = 1, 32 bits
         timestamp              :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SCENE_PLAYER_MOVE_TOS_PB_H').
-define('M_SCENE_PLAYER_MOVE_TOS_PB_H', true).
-record(m_scene_player_move_tos,
        {x                      :: integer(),       % = 1, 32 bits
         y                      :: integer(),       % = 2, 32 bits
         move_type              :: integer(),       % = 3, 32 bits
         high                   :: integer(),       % = 4, 32 bits
         time                   :: integer(),       % = 5, 32 bits
         action_id              :: iodata()         % = 6
        }).
-endif.

-ifndef('M_GIFT_GET_ITEM_MAIL_TOS_PB_H').
-define('M_GIFT_GET_ITEM_MAIL_TOS_PB_H', true).
-record(m_gift_get_item_mail_tos,
        {mail_real_id           :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_BRAVE_ONE_CLEAN_TOS_PB_H').
-define('M_BRAVE_ONE_CLEAN_TOS_PB_H', true).
-record(m_brave_one_clean_tos,
        {
        }).
-endif.

-ifndef('REDPACKETDATA_PB_H').
-define('REDPACKETDATA_PB_H', true).
-record(redpacketdata,
        {red_packet_id          :: integer(),       % = 1, 32 bits
         r_id                   :: integer(),       % = 2, 32 bits
         clear_time             :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_STEP_BY_STEP_SY_GET_AWARD_TOC_PB_H').
-define('M_STEP_BY_STEP_SY_GET_AWARD_TOC_PB_H', true).
-record(m_step_by_step_sy_get_award_toc,
        {result                 :: 'success' | 'fail' | 'none' | 'function_no_open' | 'not_enough_grid' | 'no_enough_prop' | integer(), % = 99, enum m_step_by_step_sy_get_award_toc.ENUM
         loop_num               :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_TASK_BOUNTY_REFRESH_TOC_PB_H').
-define('M_TASK_BOUNTY_REFRESH_TOC_PB_H', true).
-record(m_task_bounty_refresh_toc,
        {result                 :: 'success' | 'no_enough_prop' | 'not_authority' | 'interface_cd_time' | 'fail' | integer() % = 1, enum m_task_bounty_refresh_toc.Result
        }).
-endif.

-ifndef('M_PLAYER_NOTICE_PLAYER_XIU_ZHEN_VALUE_TOC.XIUZHENDATA_PB_H').
-define('M_PLAYER_NOTICE_PLAYER_XIU_ZHEN_VALUE_TOC.XIUZHENDATA_PB_H', true).
-record('m_player_notice_player_xiu_zhen_value_toc.xiuzhendata',
        {id                     :: integer(),       % = 1, 32 bits
         value                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('ACHIEVEMENTDATA_PB_H').
-define('ACHIEVEMENTDATA_PB_H', true).
-record(achievementdata,
        {type                   :: integer(),       % = 1, 32 bits
         id                     :: integer(),       % = 2, 32 bits
         value                  :: non_neg_integer(), % = 3, 32 bits
         state                  :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_ACHIEVEMENT_GET_AWARD_TOC_PB_H').
-define('M_ACHIEVEMENT_GET_AWARD_TOC_PB_H', true).
-record(m_achievement_get_award_toc,
        {result                 :: 'success' | 'fail' | 'not_enough_grid' | 'not_authority' | 'already_have' | integer(), % = 1, enum m_achievement_get_award_toc.ENUM
         achievement_data       :: #achievementdata{} % = 2
        }).
-endif.

-ifndef('ROOMDATA_PB_H').
-define('ROOMDATA_PB_H', true).
-record(roomdata,
        {room_id                :: integer(),       % = 1, 32 bits
         boss_id                :: integer(),       % = 2, 32 bits
         people_count           :: integer(),       % = 3, 32 bits
         is_lock                :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('ROOMDETAILSDATA_PB_H').
-define('ROOMDETAILSDATA_PB_H', true).
-record(roomdetailsdata,
        {room_data              :: #roomdata{},     % = 1
         invitation_code        :: iodata(),        % = 2
         room_player_data_list = [] :: [#roomplayerdata{}] | undefined, % = 3
         is_room_owner          :: integer(),       % = 4, 32 bits
         is_all_ready_auto_start :: integer(),      % = 5, 32 bits
         owner_name             :: iodata(),        % = 6
         owner_level            :: integer()        % = 7, 32 bits
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_NOTICE_OWNER_FIGHT_RESULT_TOC_PB_H').
-define('M_MANY_PEOPLE_BOSS_NOTICE_OWNER_FIGHT_RESULT_TOC_PB_H', true).
-record(m_many_people_boss_notice_owner_fight_result_toc,
        {mana                   :: integer(),       % = 1, 32 bits
         room_details_data      :: #roomdetailsdata{} | undefined % = 2
        }).
-endif.

-ifndef('M_SCENE_PLAYER_MOVE_STEP_TOS_PB_H').
-define('M_SCENE_PLAYER_MOVE_STEP_TOS_PB_H', true).
-record(m_scene_player_move_step_tos,
        {x                      :: integer(),       % = 1, 32 bits
         y                      :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_RED_PACKET_GET_RED_PACKET_TOC_PB_H').
-define('M_RED_PACKET_GET_RED_PACKET_TOC_PB_H', true).
-record(m_red_packet_get_red_packet_toc,
        {result                 :: 'success' | 'fail' | integer(), % = 1, enum m_red_packet_get_red_packet_toc.ENUM
         r_id                   :: integer(),       % = 2, 32 bits
         prop_list = []         :: [#prop{}] | undefined % = 3
        }).
-endif.

-ifndef('M_MISSION_NOTICE_SCENE_BOSS_STEP_TOC_PB_H').
-define('M_MISSION_NOTICE_SCENE_BOSS_STEP_TOC_PB_H', true).
-record(m_mission_notice_scene_boss_step_toc,
        {step                   :: integer(),       % = 1, 32 bits
         time                   :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_GIFT_SELECT_PLAYER_TOC_PB_H').
-define('M_GIFT_SELECT_PLAYER_TOC_PB_H', true).
-record(m_gift_select_player_toc,
        {result                 :: 'success' | 'fail' | 'none' | integer(), % = 1, enum m_gift_select_player_toc.ENUM
         player_name            :: iodata() | undefined % = 2
        }).
-endif.

-ifndef('M_HERO_NOTICE_UNLOCK_HERO_TOC_PB_H').
-define('M_HERO_NOTICE_UNLOCK_HERO_TOC_PB_H', true).
-record(m_hero_notice_unlock_hero_toc,
        {id                     :: integer(),       % = 1, 32 bits
         star                   :: integer(),       % = 2, 32 bits
         parts_id = []          :: [integer()] | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_SCENE_BOSS_DAO_NUM_CHANGE_TOC_PB_H').
-define('M_MISSION_NOTICE_SCENE_BOSS_DAO_NUM_CHANGE_TOC_PB_H', true).
-record(m_mission_notice_scene_boss_dao_num_change_toc,
        {value                  :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_SCENE_ITEM_OWNER_CHANGE_TOC_PB_H').
-define('M_SCENE_NOTICE_SCENE_ITEM_OWNER_CHANGE_TOC_PB_H', true).
-record(m_scene_notice_scene_item_owner_change_toc,
        {scene_item_id          :: integer(),       % = 1, 32 bits
         owner                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SCENE_EVENT_DO_MONEY_THREE_TOC_PB_H').
-define('M_SCENE_EVENT_DO_MONEY_THREE_TOC_PB_H', true).
-record(m_scene_event_do_money_three_toc,
        {id                     :: integer(),       % = 2, 32 bits
         prop_list = []         :: [#prop{}] | undefined, % = 3
         result                 :: 'success' | 'not_open' | 'failure' | 'no_enough_prop' | integer() % = 4, enum m_scene_event_do_money_three_toc.Result
        }).
-endif.

-ifndef('M_TONGXINGZHENG_PURCHASE_UNLOCK_TOC_PB_H').
-define('M_TONGXINGZHENG_PURCHASE_UNLOCK_TOC_PB_H', true).
-record(m_tongxingzheng_purchase_unlock_toc,
        {result                 :: 'success' | 'no_enough_prop' | 'already_buy' | 'unknown' | integer(), % = 1, enum m_tongxingzheng_purchase_unlock_toc.ENUM
         type                   :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_TASK_BOUNTY_ACCEPT_TOS_PB_H').
-define('M_TASK_BOUNTY_ACCEPT_TOS_PB_H', true).
-record(m_task_bounty_accept_tos,
        {task_id                :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_NOTICE_TIME_TOC_PB_H').
-define('M_MATCH_SCENE_NOTICE_TIME_TOC_PB_H', true).
-record(m_match_scene_notice_time_toc,
        {start_time             :: integer(),       % = 1, 32 bits
         end_time               :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('PASSED_MISSION_PB_H').
-define('PASSED_MISSION_PB_H', true).
-record(passed_mission,
        {mission_type           :: integer(),       % = 1, 32 bits
         mission_id             :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_LEAVE_ROOM_TOC_PB_H').
-define('M_MATCH_SCENE_ROOM_LEAVE_ROOM_TOC_PB_H', true).
-record(m_match_scene_room_leave_room_toc,
        {result                 :: 'success' | 'fail' | 'no_condition' | integer() % = 1, enum m_match_scene_room_leave_room_toc.ENUM
        }).
-endif.

-ifndef('M_ONE_VS_ONE_NOTICE_SCENE_SKILL_LIMIT_TOC.SKILL_LIMIT_PB_H').
-define('M_ONE_VS_ONE_NOTICE_SCENE_SKILL_LIMIT_TOC.SKILL_LIMIT_PB_H', true).
-record('m_one_vs_one_notice_scene_skill_limit_toc.skill_limit',
        {skill_id               :: integer(),       % = 1, 32 bits
         times_limit            :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('HEROVERSUSBOSSDEFENDERRESULT_PB_H').
-define('HEROVERSUSBOSSDEFENDERRESULT_PB_H', true).
-record(heroversusbossdefenderresult,
        {defender_id            :: integer(),       % = 1, 32 bits
         defender_type          :: integer(),       % = 2, 32 bits
         hp                     :: non_neg_integer(), % = 3, 32 bits
         hurt                   :: non_neg_integer(), % = 4, 32 bits
         type                   :: 'normal' | 'dodge' | 'crit' | integer(), % = 5, enum HeroVersusBossDefenderResult.ENUM
         x                      :: integer(),       % = 6, 32 bits
         y                      :: integer(),       % = 7, 32 bits
         buff_list = []         :: [#buff{}] | undefined, % = 8
         effect_list = []       :: [#effect{}] | undefined, % = 9
         hurt_section_list = [] :: [#hurtsection{}] | undefined, % = 10
         total_mano             :: integer(),       % = 11, 32 bits
         all_total_mano         :: integer(),       % = 12, 32 bits
         beat_times             :: integer(),       % = 13, 32 bits
         mano_award             :: integer(),       % = 14, 32 bits
         exp                    :: integer(),       % = 17, 32 bits
         special_event          :: integer(),       % = 18, 32 bits
         dizzy_close_time       :: integer(),       % = 19, 32 bits
         award_player_id        :: integer(),       % = 20, 32 bits
         timestamp              :: integer()        % = 21, 32 bits
        }).
-endif.

-ifndef('M_TONGXINGZHENG_COLLECT_LEVEL_REWARD_TOC_PB_H').
-define('M_TONGXINGZHENG_COLLECT_LEVEL_REWARD_TOC_PB_H', true).
-record(m_tongxingzheng_collect_level_reward_toc,
        {result                 :: 'success' | 'not_authority' | 'fail' | 'not_exists' | 'already_get' | 'unknown' | integer(), % = 1, enum m_tongxingzheng_collect_level_reward_toc.ENUM
         prop_list = []         :: [#prop{}] | undefined, % = 2
         type                   :: integer(),       % = 3, 32 bits
         lv                     :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_NOTICE_SERVER_TIME_TOC_PB_H').
-define('M_PLAYER_NOTICE_SERVER_TIME_TOC_PB_H', true).
-record(m_player_notice_server_time_toc,
        {server_time            :: iodata()         % = 1
        }).
-endif.

-ifndef('M_GIFT_ADD_MAIL_TOC_PB_H').
-define('M_GIFT_ADD_MAIL_TOC_PB_H', true).
-record(m_gift_add_mail_toc,
        {gift_mail_info_list = [] :: [#giftmailinfo{}] | undefined % = 1
        }).
-endif.

-ifndef('TASKSHOW_PB_H').
-define('TASKSHOW_PB_H', true).
-record(taskshow,
        {key                    :: integer(),       % = 1, 32 bits
         value                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_DAILY_TASK_NOTICE_UPDATE_TASK_SHOW_TOC_PB_H').
-define('M_DAILY_TASK_NOTICE_UPDATE_TASK_SHOW_TOC_PB_H', true).
-record(m_daily_task_notice_update_task_show_toc,
        {task_show              :: #taskshow{}      % = 1
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_CREATE_ROOM_TOC_PB_H').
-define('M_MANY_PEOPLE_BOSS_CREATE_ROOM_TOC_PB_H', true).
-record(m_many_people_boss_create_room_toc,
        {result                 :: 'success' | 'fail' | 'no_condition' | 'already_join_room' | 'none' | integer(), % = 1, enum m_many_people_boss_create_room_toc.ENUM
         room_details_data      :: #roomdetailsdata{} | undefined % = 2
        }).
-endif.

-ifndef('M_TURN_TABLE_DRAW_TOS_PB_H').
-define('M_TURN_TABLE_DRAW_TOS_PB_H', true).
-record(m_turn_table_draw_tos,
        {times                  :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_BRAVE_ONE_CLEAN_TOC_PB_H').
-define('M_BRAVE_ONE_CLEAN_TOC_PB_H', true).
-record(m_brave_one_clean_toc,
        {result                 :: 'success' | 'fail' | 'none' | 'already_have' | 'function_no_open' | 'not_enough_grid' | 'no_enough_prop' | integer() % = 99, enum m_brave_one_clean_toc.ENUM
        }).
-endif.

-ifndef('M_MISSION_NOTICE_PASSED_MISSION_TOC_PB_H').
-define('M_MISSION_NOTICE_PASSED_MISSION_TOC_PB_H', true).
-record(m_mission_notice_passed_mission_toc,
        {passed_mission         :: #passed_mission{} % = 1
        }).
-endif.

-ifndef('M_PLAYER_CUSTOMER_URL_TOS_PB_H').
-define('M_PLAYER_CUSTOMER_URL_TOS_PB_H', true).
-record(m_player_customer_url_tos,
        {
        }).
-endif.

-ifndef('SHARETASKAWARDDATA_PB_H').
-define('SHARETASKAWARDDATA_PB_H', true).
-record(sharetaskawarddata,
        {task_type              :: integer(),       % = 1, 32 bits
         task_id                :: integer(),       % = 2, 32 bits
         state                  :: integer(),       % = 3, 32 bits
         value                  :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_GET_SHARE_TASK_INFO_TOC_PB_H').
-define('M_PLATFORM_FUNCTION_GET_SHARE_TASK_INFO_TOC_PB_H', true).
-record(m_platform_function_get_share_task_info_toc,
        {share_task_award_data = [] :: [#sharetaskawarddata{}] | undefined, % = 1
         show_type              :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_FIGHT_USE_ITEM_TOC_PB_H').
-define('M_FIGHT_USE_ITEM_TOC_PB_H', true).
-record(m_fight_use_item_toc,
        {item_id                :: integer(),       % = 1, 32 bits
         reason                 :: 'success' | 'cd_time' | 'fail' | integer() % = 2, enum m_fight_use_item_toc.ENUM
        }).
-endif.

-ifndef('M_ONE_VS_ONE_EXIT_ROOM_LIST_TOS_PB_H').
-define('M_ONE_VS_ONE_EXIT_ROOM_LIST_TOS_PB_H', true).
-record(m_one_vs_one_exit_room_list_tos,
        {
        }).
-endif.

-ifndef('M_SCENE_NOTICE_BOSS_STATE_TOC_PB_H').
-define('M_SCENE_NOTICE_BOSS_STATE_TOC_PB_H', true).
-record(m_scene_notice_boss_state_toc,
        {state                  :: integer(),       % = 1, 32 bits
         time                   :: integer(),       % = 2, 32 bits
         mission_type           :: integer(),       % = 3, 32 bits
         mission_id             :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('SHOPDATA_PB_H').
-define('SHOPDATA_PB_H', true).
-record(shopdata,
        {id                     :: integer(),       % = 1, 32 bits
         buy_count              :: integer(),       % = 2, 32 bits
         state                  :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('GOLDRANKING.GOLDRANKINGEVENT_PB_H').
-define('GOLDRANKING.GOLDRANKINGEVENT_PB_H', true).
-record('goldranking.goldrankingevent',
        {event_id               :: integer(),       % = 1, 32 bits
         time                   :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_TONGXINGZHENG_COLLECT_LEVEL_REWARD_TOS_PB_H').
-define('M_TONGXINGZHENG_COLLECT_LEVEL_REWARD_TOS_PB_H', true).
-record(m_tongxingzheng_collect_level_reward_tos,
        {type                   :: integer(),       % = 1, 32 bits
         lv = 0                 :: integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_SHARE_TOS_PB_H').
-define('M_PLATFORM_FUNCTION_SHARE_TOS_PB_H', true).
-record(m_platform_function_share_tos,
        {
        }).
-endif.

-ifndef('M_TASK_BOUNTY_GET_AWARD_TOC_PB_H').
-define('M_TASK_BOUNTY_GET_AWARD_TOC_PB_H', true).
-record(m_task_bounty_get_award_toc,
        {task_id                :: integer(),       % = 1, 32 bits
         result                 :: 'success' | 'not_exists' | 'undone' | 'already_get' | 'fail' | integer() % = 2, enum m_task_bounty_get_award_toc.Result
        }).
-endif.

-ifndef('M_PROP_NOTICE_UPDATE_PROP_TOC_PB_H').
-define('M_PROP_NOTICE_UPDATE_PROP_TOC_PB_H', true).
-record(m_prop_notice_update_prop_toc,
        {prop_list = []         :: [#prop{}] | undefined, % = 1
         log_type               :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_GET_PLAYER_INFO_TOC_PB_H').
-define('M_PLAYER_GET_PLAYER_INFO_TOC_PB_H', true).
-record(m_player_get_player_info_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'none' | integer(), % = 100, enum m_player_get_player_info_toc.ENUM
         signature              :: iodata() | undefined, % = 1
         model_head_figure      :: #modelheadfigure{} | undefined % = 2
        }).
-endif.

-ifndef('M_PLAYER_NOTICE_FUN_ACTIVE_TOC_PB_H').
-define('M_PLAYER_NOTICE_FUN_ACTIVE_TOC_PB_H', true).
-record(m_player_notice_fun_active_toc,
        {fun_id_list = []       :: [integer()] | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('M_SPECIAL_PROP_SELL_SPECIAL_PROP_TOC_PB_H').
-define('M_SPECIAL_PROP_SELL_SPECIAL_PROP_TOC_PB_H', true).
-record(m_special_prop_sell_special_prop_toc,
        {prop_obj_id            :: integer(),       % = 1, 32 bits
         result                 :: 'success' | 'fail' | integer() % = 99, enum m_special_prop_sell_special_prop_toc.ENUM
        }).
-endif.

-ifndef('M_SCENE_NOTICE_PREPARE_SCENE_TOC_PB_H').
-define('M_SCENE_NOTICE_PREPARE_SCENE_TOC_PB_H', true).
-record(m_scene_notice_prepare_scene_toc,
        {scene_id               :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_ENTER_SCENE_TOC_PB_H').
-define('M_SCENE_ENTER_SCENE_TOC_PB_H', true).
-record(m_scene_enter_scene_toc,
        {scene_id               :: integer(),       % = 1, 32 bits
         result                 :: 'success' | 'fail' | 'need_power' | 'no_enough_prop' | 'not_authority' | integer() % = 2, enum m_scene_enter_scene_toc.ENUM
        }).
-endif.

-ifndef('M_LABA_SPIN2_TOC.GRIDS_PB_H').
-define('M_LABA_SPIN2_TOC.GRIDS_PB_H', true).
-record('m_laba_spin2_toc.grids',
        {list = []              :: [integer()] | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_CREATE_ROOM_TOC_PB_H').
-define('M_MATCH_SCENE_ROOM_CREATE_ROOM_TOC_PB_H', true).
-record(m_match_scene_room_create_room_toc,
        {result                 :: 'success' | 'fail' | 'no_condition' | 'already_join_room' | integer() % = 1, enum m_match_scene_room_create_room_toc.ENUM
        }).
-endif.

-ifndef('SHAREFRIENDDATA_PB_H').
-define('SHAREFRIENDDATA_PB_H', true).
-record(sharefrienddata,
        {id                     :: integer(),       % = 1, 32 bits
         state                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_GET_PLATFORM_AWARD_INFO_TOC_PB_H').
-define('M_PLATFORM_FUNCTION_GET_PLATFORM_AWARD_INFO_TOC_PB_H', true).
-record(m_platform_function_get_platform_award_info_toc,
        {inof_data = []         :: [#sharefrienddata{}] | undefined % = 1
        }).
-endif.

-ifndef('M_SCENE_EVENT_QUERY_BALLS_DATA_TOC_PB_H').
-define('M_SCENE_EVENT_QUERY_BALLS_DATA_TOC_PB_H', true).
-record(m_scene_event_query_balls_data_toc,
        {balls = []             :: [integer()] | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_GET_PLATFORM_AWARD_INFO_TOS_PB_H').
-define('M_PLATFORM_FUNCTION_GET_PLATFORM_AWARD_INFO_TOS_PB_H', true).
-record(m_platform_function_get_platform_award_info_tos,
        {id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_LOGIN_CREATE_ROLE_TOC_PB_H').
-define('M_LOGIN_CREATE_ROLE_TOC_PB_H', true).
-record(m_login_create_role_toc,
        {result                 :: 'success' | 'used' | 'invalid_string' | 'too_long' | 'unknow' | 'already_create_role' | integer(), % = 1, enum m_login_create_role_toc.ENUM
         player_id              :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_READY_TOS_PB_H').
-define('M_MANY_PEOPLE_BOSS_READY_TOS_PB_H', true).
-record(m_many_people_boss_ready_tos,
        {is_ready               :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('TIMES_PB_H').
-define('TIMES_PB_H', true).
-record(times,
        {times_id               :: integer(),       % = 1, 32 bits
         value                  :: integer(),       % = 2, 32 bits
         buy_times              :: integer(),       % = 3, 32 bits
         max_times              :: integer(),       % = 4, 32 bits
         recover_time           :: integer(),       % = 5, 32 bits
         use_times              :: integer(),       % = 6, 32 bits
         max_can_buy_times      :: integer()        % = 7, 32 bits
        }).
-endif.

-ifndef('M_MISSION_GET_AWARD_TOC_PB_H').
-define('M_MISSION_GET_AWARD_TOC_PB_H', true).
-record(m_mission_get_award_toc,
        {result                 :: 'success' | 'fail' | 'no_enough_prop' | integer() % = 1, enum m_mission_get_award_toc.ENUM
        }).
-endif.

-ifndef('M_MISSION_NOTICE_MISSION_RESULT_TOC_PB_H').
-define('M_MISSION_NOTICE_MISSION_RESULT_TOC_PB_H', true).
-record(m_mission_notice_mission_result_toc,
        {mission_type           :: integer(),       % = 1, 32 bits
         mission_id             :: integer(),       % = 2, 32 bits
         result                 :: 'success' | 'fail' | integer(), % = 3, enum m_mission_notice_mission_result_toc.ENUM
         add_prop_list = []     :: [#prop{}] | undefined % = 4
        }).
-endif.

-ifndef('PLAYERBASEINFO_PB_H').
-define('PLAYERBASEINFO_PB_H', true).
-record(playerbaseinfo,
        {player_id              :: integer(),       % = 1, 32 bits
         nickname               :: iodata(),        % = 2
         head_id                :: integer(),       % = 3, 32 bits
         head_frame_id          :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('VIPAWARDINFO_PB_H').
-define('VIPAWARDINFO_PB_H', true).
-record(vipawardinfo,
        {vip_level              :: integer(),       % = 1, 32 bits
         state                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('VIPDATA_PB_H').
-define('VIPDATA_PB_H', true).
-record(vipdata,
        {vip_level              :: integer(),       % = 1, 32 bits
         vip_exp                :: integer(),       % = 2, 32 bits
         vip_award_info = []    :: [#vipawardinfo{}] | undefined % = 3
        }).
-endif.

-ifndef('GUESSBOSSCOST_PB_H').
-define('GUESSBOSSCOST_PB_H', true).
-record(guessbosscost,
        {boss_id                :: integer(),       % = 1, 32 bits
         num                    :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_GUESS_BOSS_COST_TOTAL_MANA_TOC_PB_H').
-define('M_MISSION_NOTICE_GUESS_BOSS_COST_TOTAL_MANA_TOC_PB_H', true).
-record(m_mission_notice_guess_boss_cost_total_mana_toc,
        {guess_boss_cost = []   :: [#guessbosscost{}] | undefined % = 1
        }).
-endif.

-ifndef('M_RED_PACKET_GET_RED_PACKET_TOS_PB_H').
-define('M_RED_PACKET_GET_RED_PACKET_TOS_PB_H', true).
-record(m_red_packet_get_red_packet_tos,
        {r_id                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_GET_SHARE_TASK_AWARD_TOC_PB_H').
-define('M_PLATFORM_FUNCTION_GET_SHARE_TASK_AWARD_TOC_PB_H', true).
-record(m_platform_function_get_share_task_award_toc,
        {result                 :: 'success' | 'fail' | 'not_enough_grid' | 'not_authority' | 'already_have' | integer(), % = 1, enum m_platform_function_get_share_task_award_toc.ENUM
         share_task_award_data  :: #sharetaskawarddata{} % = 2
        }).
-endif.

-ifndef('M_MATCH_SCENE_GET_INFO_TOC.INFO_PB_H').
-define('M_MATCH_SCENE_GET_INFO_TOC.INFO_PB_H', true).
-record('m_match_scene_get_info_toc.info',
        {id                     :: integer(),       % = 1, 32 bits
         award                  :: integer(),       % = 2, 32 bits
         name                   :: iodata() | undefined, % = 3
         score                  :: integer() | undefined % = 4, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_GET_INFO_TOC_PB_H').
-define('M_MATCH_SCENE_GET_INFO_TOC_PB_H', true).
-record(m_match_scene_get_info_toc,
        {info_list = []         :: [#'m_match_scene_get_info_toc.info'{}] | undefined % = 1
        }).
-endif.

-ifndef('MAIL_INFO_PB_H').
-define('MAIL_INFO_PB_H', true).
-record(mail_info,
        {mail_real_id           :: integer(),       % = 1, 32 bits
         mail_id                :: integer(),       % = 2, 32 bits
         title_name             :: iodata(),        % = 3
         state                  :: integer(),       % = 4, 32 bits
         content                :: iodata(),        % = 5
         param_list = []        :: [iodata()] | undefined, % = 6
         prop_list = []         :: [#prop{}] | undefined, % = 7
         valid_time             :: integer(),       % = 9, 32 bits
         create_time            :: integer()        % = 10, 32 bits
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_REFRESH_OPEN_KEY_TOS_PB_H').
-define('M_PLATFORM_FUNCTION_REFRESH_OPEN_KEY_TOS_PB_H', true).
-record(m_platform_function_refresh_open_key_tos,
        {open_key               :: iodata()         % = 1
        }).
-endif.

-ifndef('M_CLIENT_LOG_CLIENT_LOG_TOS_PB_H').
-define('M_CLIENT_LOG_CLIENT_LOG_TOS_PB_H', true).
-record(m_client_log_client_log_tos,
        {id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_NOTICE_PLAYER_STRING_ATTR_CHANGE_TOC.STRING_ATTR_CHANGE_PB_H').
-define('M_PLAYER_NOTICE_PLAYER_STRING_ATTR_CHANGE_TOC.STRING_ATTR_CHANGE_PB_H', true).
-record('m_player_notice_player_string_attr_change_toc.string_attr_change',
        {attr                   :: 'hp' | 'max_hp' | 'vip_level' | 'level' | 'exp' | 'title_id' | 'magic_weapon_id' | 'move_type' | 'move_speed' | 'belong_player_id' | 'pk_mode' | 'name' | 'sex' | 'hero_id' | 'hero_arms_id' | 'hero_ornaments_id' | 'head_id' | 'head_frame_id' | 'chat_qi_pao_id' | integer(), % = 1, enum Attr
         value                  :: iodata()         % = 2
        }).
-endif.

-ifndef('M_ROOM_ENTER_ROOM_TOC_PB_H').
-define('M_ROOM_ENTER_ROOM_TOC_PB_H', true).
-record(m_room_enter_room_toc,
        {result                 :: 'success' | 'fail' | 'no_enough_prop' | 'member_full' | integer() % = 1, enum m_room_enter_room_toc.ENUM
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_JOIN_ROOM_TOC_PB_H').
-define('M_MATCH_SCENE_ROOM_JOIN_ROOM_TOC_PB_H', true).
-record(m_match_scene_room_join_room_toc,
        {result                 :: 'success' | 'fail' | 'not_enough_mana' | 'no_condition' | 'already_join_room' | 'error_password' | 'none' | integer(), % = 1, enum m_match_scene_room_join_room_toc.ENUM
         people_num             :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_RECRUIT_TOS_PB_H').
-define('M_MATCH_SCENE_ROOM_RECRUIT_TOS_PB_H', true).
-record(m_match_scene_room_recruit_tos,
        {player_name            :: iodata()         % = 1
        }).
-endif.

-ifndef('M_PROMOTE_NOTICE_PROMOTE_TIMES_TOC_PB_H').
-define('M_PROMOTE_NOTICE_PROMOTE_TIMES_TOC_PB_H', true).
-record(m_promote_notice_promote_times_toc,
        {
        }).
-endif.

-ifndef('M_PROMOTE_GET_PROMOTE_RECORD_TOS_PB_H').
-define('M_PROMOTE_GET_PROMOTE_RECORD_TOS_PB_H', true).
-record(m_promote_get_promote_record_tos,
        {
        }).
-endif.

-ifndef('TASKINFO_PB_H').
-define('TASKINFO_PB_H', true).
-record(taskinfo,
        {task_id                :: integer(),       % = 1, 32 bits
         num                    :: integer(),       % = 2, 32 bits
         status                 :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_TASK_BOUNTY_NOTICE_CHANGE_TOC_PB_H').
-define('M_TASK_BOUNTY_NOTICE_CHANGE_TOC_PB_H', true).
-record(m_task_bounty_notice_change_toc,
        {task_info              :: #taskinfo{}      % = 1
        }).
-endif.

-ifndef('M_SCENE_NOTICE_TIME_EVENT_LIST_START_TOC_PB_H').
-define('M_SCENE_NOTICE_TIME_EVENT_LIST_START_TOC_PB_H', true).
-record(m_scene_notice_time_event_list_start_toc,
        {sleep_time             :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_MONSTER_MOVE_TOC_PB_H').
-define('M_SCENE_NOTICE_MONSTER_MOVE_TOC_PB_H', true).
-record(m_scene_notice_monster_move_toc,
        {scene_monster_id       :: integer(),       % = 1, 32 bits
         move_path = []         :: [#movepath{}] | undefined % = 2
        }).
-endif.

-ifndef('M_CHARGE_NOTICE_CHARGE_DATA_TOC_PB_H').
-define('M_CHARGE_NOTICE_CHARGE_DATA_TOC_PB_H', true).
-record(m_charge_notice_charge_data_toc,
        {result                 :: 'success' | 'fail' | 'refuse' | integer(), % = 1, enum m_charge_notice_charge_data_toc.ENUM
         item_id                :: integer(),       % = 3, 32 bits
         count                  :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_MODIFY_NICKNAME_GENDER_TOC_PB_H').
-define('M_PLAYER_MODIFY_NICKNAME_GENDER_TOC_PB_H', true).
-record(m_player_modify_nickname_gender_toc,
        {result                 :: 'success' | 'used' | 'invalid_string' | 'too_long' | 'fail' | 'not_authority' | 'unknown' | integer(), % = 1, enum m_player_modify_nickname_gender_toc.ENUM
         gender                 :: integer() | undefined, % = 2, 32 bits
         nickname               :: iodata() | undefined % = 3
        }).
-endif.

-ifndef('FIRSTCHARGE_PB_H').
-define('FIRSTCHARGE_PB_H', true).
-record(firstcharge,
        {type                   :: integer(),       % = 1, 32 bits
         is_buy                 :: integer(),       % = 2, 32 bits
         list = []              :: [#firstchargedata{}] | undefined % = 3
        }).
-endif.

-ifndef('MODELFIGURE_PB_H').
-define('MODELFIGURE_PB_H', true).
-record(modelfigure,
        {player_id              :: integer(),       % = 1, 32 bits
         sex                    :: integer(),       % = 2, 32 bits
         head_id                :: integer(),       % = 3, 32 bits
         title_id               :: integer(),       % = 4, 32 bits
         magic_weapon_id        :: integer(),       % = 5, 32 bits
         hero_id                :: integer(),       % = 6, 32 bits
         hero_arms_id           :: integer(),       % = 7, 32 bits
         hero_ornaments_id      :: integer()        % = 8, 32 bits
        }).
-endif.

-ifndef('M_TASK_GET_AWARD_TOC_PB_H').
-define('M_TASK_GET_AWARD_TOC_PB_H', true).
-record(m_task_get_award_toc,
        {task_id                :: integer(),       % = 1, 32 bits
         result                 :: 'success' | 'unfinish' | 'fail' | integer() % = 2, enum m_task_get_award_toc.ENUM
        }).
-endif.

-ifndef('M_FIGHT_NOTICE_ADD_EFFECT_TOC_PB_H').
-define('M_FIGHT_NOTICE_ADD_EFFECT_TOC_PB_H', true).
-record(m_fight_notice_add_effect_toc,
        {obj_type               :: integer(),       % = 1, 32 bits
         obj_id                 :: integer(),       % = 2, 32 bits
         buff                   :: #buff{}          % = 3
        }).
-endif.

-ifndef('M_ROOM_FIGHT_RESULT_TOC_PB_H').
-define('M_ROOM_FIGHT_RESULT_TOC_PB_H', true).
-record(m_room_fight_result_toc,
        {winner                 :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_GET_ROOM_LIST_TOS_PB_H').
-define('M_MANY_PEOPLE_BOSS_GET_ROOM_LIST_TOS_PB_H', true).
-record(m_many_people_boss_get_room_list_tos,
        {boss_id                :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_NOTICE_PLAYER_JOIN_TOC_PB_H').
-define('M_MANY_PEOPLE_BOSS_NOTICE_PLAYER_JOIN_TOC_PB_H', true).
-record(m_many_people_boss_notice_player_join_toc,
        {room_player_data       :: #roomplayerdata{} % = 1
        }).
-endif.

-ifndef('M_SCENE_LOAD_SCENE_TOS_PB_H').
-define('M_SCENE_LOAD_SCENE_TOS_PB_H', true).
-record(m_scene_load_scene_tos,
        {screen_width           :: integer(),       % = 1, 32 bits
         screen_high            :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SPECIAL_PROP_SELL_SPECIAL_PROP_TOS_PB_H').
-define('M_SPECIAL_PROP_SELL_SPECIAL_PROP_TOS_PB_H', true).
-record(m_special_prop_sell_special_prop_tos,
        {prop_obj_id            :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MISSION_BOSS_REBIRTH_TOS_PB_H').
-define('M_MISSION_BOSS_REBIRTH_TOS_PB_H', true).
-record(m_mission_boss_rebirth_tos,
        {mission_type           :: integer(),       % = 1, 32 bits
         mission_id             :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SCENE_EVENT_DO_TURNTABLE_TOC_PB_H').
-define('M_SCENE_EVENT_DO_TURNTABLE_TOC_PB_H', true).
-record(m_scene_event_do_turntable_toc,
        {id                     :: integer(),       % = 2, 32 bits
         prop_list = []         :: [#prop{}] | undefined, % = 3
         result                 :: 'success' | 'not_open' | 'failure' | 'no_enough_prop' | integer() % = 4, enum m_scene_event_do_turntable_toc.Result
        }).
-endif.

-ifndef('M_SCENE_NOTICE_PLAYER_DEATH_TOC_PB_H').
-define('M_SCENE_NOTICE_PLAYER_DEATH_TOC_PB_H', true).
-record(m_scene_notice_player_death_toc,
        {attacker_id            :: integer(),       % = 1, 32 bits
         attacker_type          :: integer(),       % = 2, 32 bits
         name                   :: iodata(),        % = 3
         rebirth_time           :: integer(),       % = 4, 32 bits
         scene_id               :: integer()        % = 5, 32 bits
        }).
-endif.

-ifndef('M_SCENE_EVENT_NOTICE_TASK_TOC_PB_H').
-define('M_SCENE_EVENT_NOTICE_TASK_TOC_PB_H', true).
-record(m_scene_event_notice_task_toc,
        {num                    :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('SCENESIMPLIFYMONSTER_PB_H').
-define('SCENESIMPLIFYMONSTER_PB_H', true).
-record(scenesimplifymonster,
        {monster_id             :: integer(),       % = 2, 32 bits
         x                      :: integer(),       % = 3, 32 bits
         y                      :: integer(),       % = 4, 32 bits
         time                   :: integer()        % = 5, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_SIMPLIFY_MONSTER_POS_TOC_PB_H').
-define('M_SCENE_NOTICE_SIMPLIFY_MONSTER_POS_TOC_PB_H', true).
-record(m_scene_notice_simplify_monster_pos_toc,
        {monster = []           :: [#scenesimplifymonster{}] | undefined % = 1
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_NOTICE_PLAYER_FIGHT_RESULT_TOC_PB_H').
-define('M_MANY_PEOPLE_BOSS_NOTICE_PLAYER_FIGHT_RESULT_TOC_PB_H', true).
-record(m_many_people_boss_notice_player_fight_result_toc,
        {is_first_prize         :: integer(),       % = 1, 32 bits
         prop_list = []         :: [#prop{}] | undefined, % = 2
         room_details_data      :: #roomdetailsdata{} | undefined, % = 3
         rank                   :: integer(),       % = 4, 32 bits
         result                 :: integer(),       % = 5, 32 bits
         win_name               :: iodata()         % = 6
        }).
-endif.

-ifndef('M_ROOM_PUSH_FRAME_INFO_TOC.FRAMEINFO_PB_H').
-define('M_ROOM_PUSH_FRAME_INFO_TOC.FRAMEINFO_PB_H', true).
-record('m_room_push_frame_info_toc.frameinfo',
        {frame                  :: integer(),       % = 1, 32 bits
         actions = []           :: [integer()] | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('M_LABA_SPIN2_TOC_PB_H').
-define('M_LABA_SPIN2_TOC_PB_H', true).
-record(m_laba_spin2_toc,
        {result                 :: 'success' | 'fail' | 'no_enough_prop' | integer(), % = 1, enum m_laba_spin2_toc.ENUM
         grid_list              :: #'m_laba_spin2_toc.grids'{}, % = 2
         special_grid_list      :: #'m_laba_spin2_toc.grids'{}, % = 3
         award_num              :: integer(),       % = 4, 32 bits
         fg_grid_lists = []     :: [#'m_laba_spin2_toc.grids'{}] | undefined, % = 5
         fg_special_grid_lists = [] :: [#'m_laba_spin2_toc.grids'{}] | undefined, % = 6
         fg_award_num_list = [] :: [integer()] | undefined, % = 7, 32 bits
         id                     :: integer(),       % = 8, 32 bits
         num                    :: integer()        % = 9, 32 bits
        }).
-endif.

-ifndef('M_ONE_VS_ONE_JOIN_ROOM_TOC_PB_H').
-define('M_ONE_VS_ONE_JOIN_ROOM_TOC_PB_H', true).
-record(m_one_vs_one_join_room_toc,
        {result                 :: 'success' | 'fail' | 'not_enough_mana' | 'no_condition' | integer() % = 1, enum m_one_vs_one_join_room_toc.ENUM
        }).
-endif.

-ifndef('M_ROOM_NOTICE_FIGHTING_TOC_PB_H').
-define('M_ROOM_NOTICE_FIGHTING_TOC_PB_H', true).
-record(m_room_notice_fighting_toc,
        {endTime                :: non_neg_integer() % = 1, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_GET_ROOM_LIST_TOS_PB_H').
-define('M_MATCH_SCENE_ROOM_GET_ROOM_LIST_TOS_PB_H', true).
-record(m_match_scene_room_get_room_list_tos,
        {
        }).
-endif.

-ifndef('M_MISSION_NOTICE_HERO_VERSUS_BOSS_RESULT_TOC_PB_H').
-define('M_MISSION_NOTICE_HERO_VERSUS_BOSS_RESULT_TOC_PB_H', true).
-record(m_mission_notice_hero_versus_boss_result_toc,
        {boss_id                :: integer(),       % = 1, 32 bits
         award_list = []        :: [#prop{}] | undefined % = 2
        }).
-endif.

-ifndef('M_WHEEL_JOIN_WHEEL_TOS_PB_H').
-define('M_WHEEL_JOIN_WHEEL_TOS_PB_H', true).
-record(m_wheel_join_wheel_tos,
        {type                   :: non_neg_integer() % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_SCENE_JBXY_STATE_TOC_PB_H').
-define('M_SCENE_NOTICE_SCENE_JBXY_STATE_TOC_PB_H', true).
-record(m_scene_notice_scene_jbxy_state_toc,
        {state                  :: integer(),       % = 1, 32 bits
         monster_id             :: integer(),       % = 2, 32 bits
         close_time             :: integer() | undefined, % = 3, 32 bits
         player_id              :: integer() | undefined % = 4, 32 bits
        }).
-endif.

-ifndef('ROOMRANKINFO_PB_H').
-define('ROOMRANKINFO_PB_H', true).
-record(roomrankinfo,
        {rank                   :: integer(),       % = 1, 32 bits
         model_head_figure      :: #modelheadfigure{}, % = 2
         value                  :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_NOTICE_PEOPLE_NUM_CHANGE_TOC_PB_H').
-define('M_MATCH_SCENE_ROOM_NOTICE_PEOPLE_NUM_CHANGE_TOC_PB_H', true).
-record(m_match_scene_room_notice_people_num_change_toc,
        {people_num             :: non_neg_integer() % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_SEND_MSG_TOC_PB_H').
-define('M_SCENE_NOTICE_SEND_MSG_TOC_PB_H', true).
-record(m_scene_notice_send_msg_toc,
        {type                   :: integer(),       % = 1, 32 bits
         id                     :: integer(),       % = 2, 32 bits
         player_id              :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_NOTICE_LEAVE_ROOM_TOC_PB_H').
-define('M_SHI_SHI_ROOM_NOTICE_LEAVE_ROOM_TOC_PB_H', true).
-record(m_shi_shi_room_notice_leave_room_toc,
        {type                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('RANKINFO_PB_H').
-define('RANKINFO_PB_H', true).
-record(rankinfo,
        {player_id              :: integer(),       % = 1, 32 bits
         rank                   :: integer(),       % = 2, 32 bits
         name                   :: iodata(),        % = 3
         vip_level              :: integer(),       % = 4, 32 bits
         value                  :: integer(),       % = 5, 32 bits
         sex                    :: integer(),       % = 6, 32 bits
         head_id                :: integer(),       % = 7, 32 bits
         vip_prerogative_card = [] :: [integer()] | undefined, % = 8, 32 bits
         other_value            :: non_neg_integer() % = 9, 32 bits
        }).
-endif.

-ifndef('MSGINFO_PB_H').
-define('MSGINFO_PB_H', true).
-record(msginfo,
        {model_head_figure      :: #modelheadfigure{} | undefined, % = 1
         msg_data               :: iodata(),        % = 2
         template_id            :: integer(),       % = 3, 32 bits
         arg_list = []          :: [iodata()] | undefined, % = 4
         loop_num               :: integer() | undefined, % = 5, 32 bits
         time                   :: integer()        % = 6, 32 bits
        }).
-endif.

-ifndef('M_SCENE_ENTER_SINGLE_SCENE_TOS_PB_H').
-define('M_SCENE_ENTER_SINGLE_SCENE_TOS_PB_H', true).
-record(m_scene_enter_single_scene_tos,
        {scene_id               :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_DELETE_CLIENT_DATA_TOS_PB_H').
-define('M_PLAYER_DELETE_CLIENT_DATA_TOS_PB_H', true).
-record(m_player_delete_client_data_tos,
        {id_list = []           :: [iodata()] | undefined % = 1
        }).
-endif.

-ifndef('M_WHEEL_USE_LAST_BET_TOS_PB_H').
-define('M_WHEEL_USE_LAST_BET_TOS_PB_H', true).
-record(m_wheel_use_last_bet_tos,
        {
        }).
-endif.

-ifndef('M_MISSION_CHALLENGE_MISSION_TOS_PB_H').
-define('M_MISSION_CHALLENGE_MISSION_TOS_PB_H', true).
-record(m_mission_challenge_mission_tos,
        {mission_type           :: integer(),       % = 1, 32 bits
         mission_id             :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_SET_PLAYER_DATA_TOS_PB_H').
-define('M_PLAYER_SET_PLAYER_DATA_TOS_PB_H', true).
-record(m_player_set_player_data_tos,
        {type                   :: integer(),       % = 1, 32 bits
         id                     :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_WORLD_RECRUIT_TOC_PB_H').
-define('M_MATCH_SCENE_ROOM_WORLD_RECRUIT_TOC_PB_H', true).
-record(m_match_scene_room_world_recruit_toc,
        {result                 :: 'success' | 'fail' | 'time_limit' | integer(), % = 1, enum m_match_scene_room_world_recruit_toc.ENUM
         limit_time             :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MISSION_HERO_VERSUS_BOSS_BET_TOS_PB_H').
-define('M_MISSION_HERO_VERSUS_BOSS_BET_TOS_PB_H', true).
-record(m_mission_hero_versus_boss_bet_tos,
        {pos                    :: integer(),       % = 1, 32 bits
         bet                    :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_GIFT_DELETE_MAIL_TOS_PB_H').
-define('M_GIFT_DELETE_MAIL_TOS_PB_H', true).
-record(m_gift_delete_mail_tos,
        {mail_real_id           :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_STEP_BY_STEP_SY_ENTER_TOS_PB_H').
-define('M_STEP_BY_STEP_SY_ENTER_TOS_PB_H', true).
-record(m_step_by_step_sy_enter_tos,
        {id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_CORRECT_PLAYER_POS_TOC_PB_H').
-define('M_SCENE_NOTICE_CORRECT_PLAYER_POS_TOC_PB_H', true).
-record(m_scene_notice_correct_player_pos_toc,
        {x                      :: integer(),       % = 1, 32 bits
         y                      :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_WORLD_RECRUIT_TOS_PB_H').
-define('M_MATCH_SCENE_ROOM_WORLD_RECRUIT_TOS_PB_H', true).
-record(m_match_scene_room_world_recruit_tos,
        {
        }).
-endif.

-ifndef('M_MATCH_SCENE_NOTICE_MATCH_FAIL_TOC_PB_H').
-define('M_MATCH_SCENE_NOTICE_MATCH_FAIL_TOC_PB_H', true).
-record(m_match_scene_notice_match_fail_toc,
        {id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('GOLDRANKING_PB_H').
-define('GOLDRANKING_PB_H', true).
-record(goldranking,
        {ranking                :: integer(),       % = 1, 32 bits
         gold_value             :: non_neg_integer(), % = 2, 32 bits
         money_value            :: non_neg_integer(), % = 3, 32 bits
         model_head_figure      :: #modelheadfigure{}, % = 4
         event_list = []        :: [#'goldranking.goldrankingevent'{}] | undefined % = 5
        }).
-endif.

-ifndef('M_SCENE_GET_GOLD_RANKING_TOC_PB_H').
-define('M_SCENE_GET_GOLD_RANKING_TOC_PB_H', true).
-record(m_scene_get_gold_ranking_toc,
        {gold_ranking_list = [] :: [#goldranking{}] | undefined % = 1
        }).
-endif.

-ifndef('M_TONGXINGZHENG_TASK_MONTH_REWARD_COLLECT_TOC_PB_H').
-define('M_TONGXINGZHENG_TASK_MONTH_REWARD_COLLECT_TOC_PB_H', true).
-record(m_tongxingzheng_task_month_reward_collect_toc,
        {result                 :: 'success' | 'not_authority' | 'no_finish' | 'already_get' | 'unknown' | integer(), % = 1, enum m_tongxingzheng_task_month_reward_collect_toc.ENUM
         prop_list = []         :: [#prop{}] | undefined, % = 2
         id                     :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('RECEIVERINFO_PB_H').
-define('RECEIVERINFO_PB_H', true).
-record(receiverinfo,
        {receiver               :: integer(),       % = 2, 32 bits
         receiver_name          :: iodata(),        % = 3
         create_time            :: integer(),       % = 4, 32 bits
         prop_list = []         :: [#prop{}] | undefined % = 5
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_NOTICE_PLAYER_FIGHT_START_TOC_PB_H').
-define('M_MANY_PEOPLE_BOSS_NOTICE_PLAYER_FIGHT_START_TOC_PB_H', true).
-record(m_many_people_boss_notice_player_fight_start_toc,
        {mission_time           :: integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_NOTICE_PLAYER_XIU_ZHEN_VALUE_TOC_PB_H').
-define('M_PLAYER_NOTICE_PLAYER_XIU_ZHEN_VALUE_TOC_PB_H', true).
-record(m_player_notice_player_xiu_zhen_value_toc,
        {lists = []             :: [#'m_player_notice_player_xiu_zhen_value_toc.xiuzhendata'{}] | undefined % = 2
        }).
-endif.

-ifndef('M_MISSION_LUCKY_BOSS_BET_TOS_PB_H').
-define('M_MISSION_LUCKY_BOSS_BET_TOS_PB_H', true).
-record(m_mission_lucky_boss_bet_tos,
        {pos                    :: integer(),       % = 1, 32 bits
         bet                    :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_LOGIN_HEART_BEAT_TOC_PB_H').
-define('M_LOGIN_HEART_BEAT_TOC_PB_H', true).
-record(m_login_heart_beat_toc,
        {heartbeat_code         :: iodata() | undefined % = 1
        }).
-endif.

-ifndef('GUESSBOSSRESULTFIGHT_PB_H').
-define('GUESSBOSSRESULTFIGHT_PB_H', true).
-record(guessbossresultfight,
        {round_id               :: integer(),       % = 1, 32 bits
         attack_id              :: integer(),       % = 2, 32 bits
         die_id_list = []       :: [integer()] | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_GUESS_BOSS_MISSION_RESULT_TOC_PB_H').
-define('M_MISSION_NOTICE_GUESS_BOSS_MISSION_RESULT_TOC_PB_H', true).
-record(m_mission_notice_guess_boss_mission_result_toc,
        {boss_id                :: integer(),       % = 1, 32 bits
         award_list = []        :: [#prop{}] | undefined, % = 2
         guess_boss_result_fight_list = [] :: [#guessbossresultfight{}] | undefined, % = 3
         boss_id_list = []      :: [integer()] | undefined, % = 4, 32 bits
         total_cost_value       :: integer() | undefined % = 5, 32 bits
        }).
-endif.

-ifndef('ROOMINFO_PB_H').
-define('ROOMINFO_PB_H', true).
-record(roominfo,
        {room_id                :: integer(),       % = 1, 32 bits
         player_list = []       :: [#modelheadfigure{}] | undefined % = 2
        }).
-endif.

-ifndef('M_ROOM_NOTICE_ROOM_LIST_CHANGE_TOC_PB_H').
-define('M_ROOM_NOTICE_ROOM_LIST_CHANGE_TOC_PB_H', true).
-record(m_room_notice_room_list_change_toc,
        {type                   :: integer(),       % = 1, 32 bits
         room_list = []         :: [#roominfo{}] | undefined % = 2
        }).
-endif.

-ifndef('ONEVSONERANKDATA_PB_H').
-define('ONEVSONERANKDATA_PB_H', true).
-record(onevsonerankdata,
        {rank                   :: integer(),       % = 1, 32 bits
         model_head_figure      :: #modelheadfigure{}, % = 2
         value                  :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('ONEVSONEROOMDATA_PB_H').
-define('ONEVSONEROOMDATA_PB_H', true).
-record(onevsoneroomdata,
        {room_id                :: integer(),       % = 1, 32 bits
         model_head_figure_list = [] :: [#modelheadfigure{}] | undefined % = 2
        }).
-endif.

-ifndef('M_ONE_VS_ONE_GET_ROOM_LIST_TOC_PB_H').
-define('M_ONE_VS_ONE_GET_ROOM_LIST_TOC_PB_H', true).
-record(m_one_vs_one_get_room_list_toc,
        {type                   :: integer(),       % = 1, 32 bits
         room_list = []         :: [#onevsoneroomdata{}] | undefined, % = 2
         rank_list = []         :: [#onevsonerankdata{}] | undefined, % = 3
         my_win_value           :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_ADJUST_TOS.ATTR_CHANGE_PB_H').
-define('M_PLAYER_ADJUST_TOS.ATTR_CHANGE_PB_H', true).
-record('m_player_adjust_tos.attr_change',
        {attr                   :: iodata(),        % = 1
         value                  :: iodata()         % = 2
        }).
-endif.

-ifndef('WHEELPLAYERBETRECORD_PB_H').
-define('WHEELPLAYERBETRECORD_PB_H', true).
-record(wheelplayerbetrecord,
        {time                   :: non_neg_integer(), % = 1, 32 bits
         type                   :: non_neg_integer(), % = 2, 32 bits
         bet_num                :: non_neg_integer(), % = 3, 32 bits
         award_num              :: non_neg_integer() % = 4, 32 bits
        }).
-endif.

-ifndef('M_JIANGJINCHI_RESULT_TOC_PB_H').
-define('M_JIANGJINCHI_RESULT_TOC_PB_H', true).
-record(m_jiangjinchi_result_toc,
        {result                 :: 'success' | 'not_open' | 'error_state' | integer(), % = 1, enum m_jiangjinchi_result_toc.ENUM
         draw_num               :: integer(),       % = 2, 32 bits
         extra_num              :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_SEIZE_TREASURE_GET_EXTRA_AWARD_TOC_PB_H').
-define('M_SEIZE_TREASURE_GET_EXTRA_AWARD_TOC_PB_H', true).
-record(m_seize_treasure_get_extra_award_toc,
        {result                 :: 'success' | 'no_enough_seize_times' | 'no_achievement_list' | 'no_achievement_wait_4_get' | 'unknown' | integer(), % = 1, enum m_seize_treasure_get_extra_award_toc.ENUM
         prop_list = []         :: [#prop{}] | undefined, % = 2
         times                  :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_CHAT_CHANNEL_CHAT_TOS_PB_H').
-define('M_PLAYER_CHAT_CHANNEL_CHAT_TOS_PB_H', true).
-record(m_player_chat_channel_chat_tos,
        {channel                :: integer(),       % = 1, 32 bits
         id                     :: integer() | undefined, % = 2, 32 bits
         msg_data               :: iodata()         % = 3
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_SET_IS_ALL_READY_START_TOS_PB_H').
-define('M_MANY_PEOPLE_BOSS_SET_IS_ALL_READY_START_TOS_PB_H', true).
-record(m_many_people_boss_set_is_all_ready_start_tos,
        {is_all_ready_start     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MAIL_GET_ITEM_MAIL_TOC_PB_H').
-define('M_MAIL_GET_ITEM_MAIL_TOC_PB_H', true).
-record(m_mail_get_item_mail_toc,
        {result                 :: 'success' | 'fail' | 'not_enough_grid' | 'old_item_time' | 'not_authority' | 'none' | integer(), % = 1, enum m_mail_get_item_mail_toc.ENUM
         mail_real_id = []      :: [integer()] | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('CARD_PB_H').
-define('CARD_PB_H', true).
-record(card,
        {card_id                :: integer(),       % = 1, 32 bits
         state                  :: integer(),       % = 2, 32 bits
         num                    :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('CARDTITLE_PB_H').
-define('CARDTITLE_PB_H', true).
-record(cardtitle,
        {card_title_id          :: integer(),       % = 1, 32 bits
         state                  :: integer(),       % = 2, 32 bits
         card_list = []         :: [#card{}] | undefined % = 3
        }).
-endif.

-ifndef('M_PROMOTE_INVITATION_CODE_TOS_PB_H').
-define('M_PROMOTE_INVITATION_CODE_TOS_PB_H', true).
-record(m_promote_invitation_code_tos,
        {invitation_code        :: iodata()         % = 1
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_START_TOS_PB_H').
-define('M_MANY_PEOPLE_BOSS_START_TOS_PB_H', true).
-record(m_many_people_boss_start_tos,
        {
        }).
-endif.

-ifndef('M_SHOP_GET_SHOP_INFO_TOS_PB_H').
-define('M_SHOP_GET_SHOP_INFO_TOS_PB_H', true).
-record(m_shop_get_shop_info_tos,
        {shop_type              :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SYS_COMMON_CHANGE_STATE_TOC_PB_H').
-define('M_SYS_COMMON_CHANGE_STATE_TOC_PB_H', true).
-record(m_sys_common_change_state_toc,
        {result                 :: 'success' | 'fail' | 'function_no_open' | 'already_have' | 'none' | 'need_level' | integer(), % = 1, enum m_sys_common_change_state_toc.ENUM
         id                     :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_JIANGJINCHI_DO_DRAW_TOC_PB_H').
-define('M_JIANGJINCHI_DO_DRAW_TOC_PB_H', true).
-record(m_jiangjinchi_do_draw_toc,
        {result                 :: 'success' | 'not_open' | 'error_state' | 'already_draw' | 'system_error' | 'unknown' | integer(), % = 1, enum m_jiangjinchi_do_draw_toc.ENUM
         draw_num               :: integer(),       % = 2, 32 bits
         missed_nums = []       :: [integer()] | undefined, % = 3, 32 bits
         double_num             :: integer(),       % = 4, 32 bits
         is_can_double          :: boolean() | 0 | 1, % = 5
         doubled_times          :: integer()        % = 6, 32 bits
        }).
-endif.

-ifndef('M_FIGHT_NOTICE_FIGHT_RESULT_TOC_PB_H').
-define('M_FIGHT_NOTICE_FIGHT_RESULT_TOC_PB_H', true).
-record(m_fight_notice_fight_result_toc,
        {attacker_id            :: integer(),       % = 1, 32 bits
         attacker_type          :: integer(),       % = 2, 32 bits
         x                      :: integer(),       % = 3, 32 bits
         y                      :: integer(),       % = 4, 32 bits
         dir                    :: integer(),       % = 5, 32 bits
         target_id              :: integer(),       % = 6, 32 bits
         target_type            :: integer(),       % = 7, 32 bits
         skill_id               :: integer(),       % = 8, 32 bits
         skill_level            :: integer(),       % = 9, 32 bits
         skill_effect = 0       :: integer(),       % = 10, 32 bits
         defender_result_list = [] :: [#defenderresult{}] | undefined, % = 13
         anger                  :: integer(),       % = 18, 32 bits
         anger_skill_effect = 0 :: integer()        % = 19, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_SHI_SHI_SETTLE_TOC.LAST_DATA_PB_H').
-define('M_MISSION_NOTICE_SHI_SHI_SETTLE_TOC.LAST_DATA_PB_H', true).
-record('m_mission_notice_shi_shi_settle_toc.last_data',
        {lastWinName            :: iodata(),        % = 1
         lastValue              :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_OBJ_HP_CHANGE_TOC_PB_H').
-define('M_SCENE_NOTICE_OBJ_HP_CHANGE_TOC_PB_H', true).
-record(m_scene_notice_obj_hp_change_toc,
        {obj_type               :: integer(),       % = 1, 32 bits
         obj_id                 :: integer(),       % = 2, 32 bits
         effect_id              :: integer(),       % = 3, 32 bits
         change_value           :: integer(),       % = 4, 32 bits
         new_hp                 :: non_neg_integer(), % = 5, 32 bits
         release_obj_type       :: integer(),       % = 6, 32 bits
         release_obj_id         :: integer()        % = 7, 32 bits
        }).
-endif.

-ifndef('M_TURN_TABLE_NOTICE_RESET_TOC_PB_H').
-define('M_TURN_TABLE_NOTICE_RESET_TOC_PB_H', true).
-record(m_turn_table_notice_reset_toc,
        {
        }).
-endif.

-ifndef('REDPACKETCONDITIONDATA_PB_H').
-define('REDPACKETCONDITIONDATA_PB_H', true).
-record(redpacketconditiondata,
        {id                     :: integer(),       % = 1, 32 bits
         red_packet_data = []   :: [#redpacketdata{}] | undefined, % = 2
         param_list = []        :: [iodata()] | undefined % = 3
        }).
-endif.

-ifndef('M_RED_PACKET_NOTICE_PLAYER_RED_PACKET_TOC_PB_H').
-define('M_RED_PACKET_NOTICE_PLAYER_RED_PACKET_TOC_PB_H', true).
-record(m_red_packet_notice_player_red_packet_toc,
        {red_packet             :: #redpacketconditiondata{} % = 1
        }).
-endif.

-ifndef('M_JIANGJINCHI_REWARD_DOUBLE_TOS_PB_H').
-define('M_JIANGJINCHI_REWARD_DOUBLE_TOS_PB_H', true).
-record(m_jiangjinchi_reward_double_tos,
        {
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_PARTICIPATE_IN_TOS_PB_H').
-define('M_MANY_PEOPLE_BOSS_PARTICIPATE_IN_TOS_PB_H', true).
-record(m_many_people_boss_participate_in_tos,
        {is_participate_in      :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_DAILY_TASK_GET_POINTS_AWARD_TOC_PB_H').
-define('M_DAILY_TASK_GET_POINTS_AWARD_TOC_PB_H', true).
-record(m_daily_task_get_points_award_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'already_get' | integer(), % = 1, enum m_daily_task_get_points_award_toc.ENUM
         id                     :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_GET_LEVEL_AWARD_TOS_PB_H').
-define('M_PLAYER_GET_LEVEL_AWARD_TOS_PB_H', true).
-record(m_player_get_level_award_tos,
        {level                  :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_ONE_VS_ONE_NOTICE_SCENE_SKILL_LIMIT_TOC_PB_H').
-define('M_ONE_VS_ONE_NOTICE_SCENE_SKILL_LIMIT_TOC_PB_H', true).
-record(m_one_vs_one_notice_scene_skill_limit_toc,
        {skill_limit_list = []  :: [#'m_one_vs_one_notice_scene_skill_limit_toc.skill_limit'{}] | undefined % = 1
        }).
-endif.

-ifndef('M_TONGXINGZHENG_TASK_DAILY_REWARD_COLLECT_TOS_PB_H').
-define('M_TONGXINGZHENG_TASK_DAILY_REWARD_COLLECT_TOS_PB_H', true).
-record(m_tongxingzheng_task_daily_reward_collect_tos,
        {id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_NOTICE_SHI_SHI_VALUE_TOC_PB_H').
-define('M_SHI_SHI_ROOM_NOTICE_SHI_SHI_VALUE_TOC_PB_H', true).
-record(m_shi_shi_room_notice_shi_shi_value_toc,
        {value                  :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_RANK_GET_RANK_INFO_TOS_PB_H').
-define('M_RANK_GET_RANK_INFO_TOS_PB_H', true).
-record(m_rank_get_rank_info_tos,
        {fun_id                 :: integer(),       % = 1, 32 bits
         page_num               :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_NOTICE_LEAVE_ROOM_TOC_PB_H').
-define('M_MANY_PEOPLE_BOSS_NOTICE_LEAVE_ROOM_TOC_PB_H', true).
-record(m_many_people_boss_notice_leave_room_toc,
        {type                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_ACHIEVEMENT_GET_AWARD_TOS_PB_H').
-define('M_ACHIEVEMENT_GET_AWARD_TOS_PB_H', true).
-record(m_achievement_get_award_tos,
        {type                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_GET_LEVEL_AWARD_TOC_PB_H').
-define('M_PLAYER_GET_LEVEL_AWARD_TOC_PB_H', true).
-record(m_player_get_level_award_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'already_get' | integer(), % = 100, enum m_player_get_level_award_toc.ENUM
         level                  :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_JOIN_ROOM_TOS_PB_H').
-define('M_MANY_PEOPLE_BOSS_JOIN_ROOM_TOS_PB_H', true).
-record(m_many_people_boss_join_room_tos,
        {room_id                :: integer(),       % = 1, 32 bits
         password               :: iodata(),        % = 2
         invitation_code        :: iodata()         % = 3
        }).
-endif.

-ifndef('M_SCENE_NOTICE_MONSTER_STOP_MOVE_TOC_PB_H').
-define('M_SCENE_NOTICE_MONSTER_STOP_MOVE_TOC_PB_H', true).
-record(m_scene_notice_monster_stop_move_toc,
        {scene_monster_id       :: integer(),       % = 1, 32 bits
         x                      :: integer(),       % = 2, 32 bits
         y                      :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('ACTIVITY_DATA_PB_H').
-define('ACTIVITY_DATA_PB_H', true).
-record(activity_data,
        {activity_id            :: integer(),       % = 1, 32 bits
         start_time             :: integer(),       % = 2, 32 bits
         close_time             :: integer(),       % = 3, 32 bits
         activity_state         :: integer(),       % = 4, 32 bits
         player_join_state      :: integer()        % = 5, 32 bits
        }).
-endif.

-ifndef('M_ACTIVITY_UPDATE_ACTIVITY_TIME_TOC_PB_H').
-define('M_ACTIVITY_UPDATE_ACTIVITY_TIME_TOC_PB_H', true).
-record(m_activity_update_activity_time_toc,
        {activity_data = []     :: [#activity_data{}] | undefined % = 1
        }).
-endif.

-ifndef('M_PLAYER_CHANGE_PK_MODE_TOS_PB_H').
-define('M_PLAYER_CHANGE_PK_MODE_TOS_PB_H', true).
-record(m_player_change_pk_mode_tos,
        {pk_mode                :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SHEN_LONG_DRAW_TOC_PB_H').
-define('M_SHEN_LONG_DRAW_TOC_PB_H', true).
-record(m_shen_long_draw_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'no_enough_prop' | integer(), % = 1, enum m_shen_long_draw_toc.ENUM
         type                   :: integer(),       % = 2, 32 bits
         id                     :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_LOGIN_LOGIN_TOC_PB_H').
-define('M_LOGIN_LOGIN_TOC_PB_H', true).
-record(m_login_login_toc,
        {result                 :: 'success' | 'no_role' | 'disable_login' | 'verify_fail' | 'token_expire' | 'acc_no_exists' | 'login_frequent' | 'unknow' | integer(), % = 1, enum m_login_login_toc.ENUM
         random_man_name = []   :: [iodata()] | undefined, % = 2
         random_women_name = [] :: [iodata()] | undefined, % = 3
         player_id              :: non_neg_integer(), % = 4, 32 bits
         is_open_ios_charge     :: non_neg_integer(), % = 5, 32 bits
         pro_setting            :: iodata() | undefined % = 6
        }).
-endif.

-ifndef('M_FIGHT_DIZZY_TIME_REDUCE_TOC_PB_H').
-define('M_FIGHT_DIZZY_TIME_REDUCE_TOC_PB_H', true).
-record(m_fight_dizzy_time_reduce_toc,
        {timestamp              :: integer(),       % = 1, 32 bits
         player_id              :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('ROLEDATA_PB_H').
-define('ROLEDATA_PB_H', true).
-record(roledata,
        {nickname               :: iodata(),        % = 1
         sex                    :: integer(),       % = 2, 32 bits
         level                  :: integer(),       % = 3, 32 bits
         exp                    :: integer(),       % = 4, 32 bits
         vip_level              :: integer(),       % = 8, 32 bits
         server_id              :: iodata(),        % = 9
         player_id              :: integer(),       % = 10, 32 bits
         type                   :: integer() | undefined, % = 11, 32 bits
         player_other_data      :: #playerotherdata{} % = 12
        }).
-endif.

-ifndef('M_LOGIN_NOTICE_LOGOUT_TOC_PB_H').
-define('M_LOGIN_NOTICE_LOGOUT_TOC_PB_H', true).
-record(m_login_notice_logout_toc,
        {reason                 :: 'login_in_other' | 'system_maintenance' | 'cheat' | 'gm_kill' | 'disable_login' | 'fatigue' | 'black_ip_list' | integer() % = 1, enum m_login_notice_logout_toc.ENUM
        }).
-endif.

-ifndef('M_SKILL_USE_SKILL_TOS_PB_H').
-define('M_SKILL_USE_SKILL_TOS_PB_H', true).
-record(m_skill_use_skill_tos,
        {active_skill_id        :: integer(),       % = 1, 32 bits
         dir                    :: integer() | undefined, % = 2, 32 bits
         params = []            :: [integer()] | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('PLAYER_FUNCTIONLIST_PB_H').
-define('PLAYER_FUNCTIONLIST_PB_H', true).
-record(player_functionlist,
        {fun_id                 :: integer(),       % = 1, 32 bits
         award_state            :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_SHI_SHI_SETTLE_TOC_PB_H').
-define('M_MISSION_NOTICE_SHI_SHI_SETTLE_TOC_PB_H', true).
-record(m_mission_notice_shi_shi_settle_toc,
        {winPlayerId            :: integer(),       % = 1, 32 bits
         winName                :: iodata(),        % = 2
         value                  :: integer(),       % = 3, 32 bits
         next_type              :: integer(),       % = 4, 32 bits
         type                   :: integer(),       % = 5, 32 bits
         nextEndTime            :: integer(),       % = 6, 32 bits
         last_data_list = []    :: [#'m_mission_notice_shi_shi_settle_toc.last_data'{}] | undefined, % = 7
         total_cost_value       :: integer() | undefined % = 8, 32 bits
        }).
-endif.

-ifndef('CHATINFO_PB_H').
-define('CHATINFO_PB_H', true).
-record(chatinfo,
        {channel                :: integer(),       % = 1, 32 bits
         id                     :: integer() | undefined, % = 2, 32 bits
         msg_data_list = []     :: [#msginfo{}] | undefined % = 3
        }).
-endif.

-ifndef('M_HERO_CHARGE_HERO_PARTS_TOC_PB_H').
-define('M_HERO_CHARGE_HERO_PARTS_TOC_PB_H', true).
-record(m_hero_charge_hero_parts_toc,
        {result                 :: 'success' | 'fail' | 'no_condition' | integer(), % = 100, enum m_hero_charge_hero_parts_toc.ENUM
         id                     :: integer(),       % = 1, 32 bits
         arms                   :: integer(),       % = 2, 32 bits
         ornaments              :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_VIP_GET_VIP_AWARD_TOC_PB_H').
-define('M_VIP_GET_VIP_AWARD_TOC_PB_H', true).
-record(m_vip_get_vip_award_toc,
        {result                 :: 'success' | 'fail' | 'already_have' | 'not_authority' | integer(), % = 1, enum m_vip_get_vip_award_toc.ENUM
         vip_level              :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('WHEELPLAYERRANKINFO_PB_H').
-define('WHEELPLAYERRANKINFO_PB_H', true).
-record(wheelplayerrankinfo,
        {rank                   :: non_neg_integer(), % = 1, 32 bits
         model_head_figure      :: #modelheadfigure{}, % = 2
         num                    :: non_neg_integer(), % = 3, 32 bits
         win_num                :: non_neg_integer() % = 4, 32 bits
        }).
-endif.

-ifndef('M_WHEEL_GET_PLAYER_LIST_TOC_PB_H').
-define('M_WHEEL_GET_PLAYER_LIST_TOC_PB_H', true).
-record(m_wheel_get_player_list_toc,
        {player_list = []       :: [#wheelplayerrankinfo{}] | undefined % = 1
        }).
-endif.

-ifndef('BRAVEONEDATA_PB_H').
-define('BRAVEONEDATA_PB_H', true).
-record(braveonedata,
        {id                     :: integer(),       % = 1, 32 bits
         realId                 :: integer(),       % = 2, 32 bits
         pos_id                 :: integer(),       % = 3, 32 bits
         modelHeadFigure        :: #modelheadfigure{}, % = 4
         start_time             :: integer()        % = 5, 32 bits
        }).
-endif.

-ifndef('M_BRAVE_ONE_GET_INFO_LIST_TOC_PB_H').
-define('M_BRAVE_ONE_GET_INFO_LIST_TOC_PB_H', true).
-record(m_brave_one_get_info_list_toc,
        {page                   :: integer(),       % = 1, 32 bits
         braveOneDataList = []  :: [#braveonedata{}] | undefined % = 2
        }).
-endif.

-ifndef('M_PLAYER_CHANGE_SEX_TOC_PB_H').
-define('M_PLAYER_CHANGE_SEX_TOC_PB_H', true).
-record(m_player_change_sex_toc,
        {result                 :: 'success' | 'fail' | integer(), % = 1, enum m_player_change_sex_toc.ENUM
         sex                    :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_MONSTER_ENTER_TOC_PB_H').
-define('M_SCENE_NOTICE_MONSTER_ENTER_TOC_PB_H', true).
-record(m_scene_notice_monster_enter_toc,
        {scene_monster_list = [] :: [#scenemonster{}] | undefined % = 1
        }).
-endif.

-ifndef('M_PLAYER_BIND_MOBILE_TOC_PB_H').
-define('M_PLAYER_BIND_MOBILE_TOC_PB_H', true).
-record(m_player_bind_mobile_toc,
        {result                 :: 'success' | 'expire' | 'invalid_code' | 'fail' | integer() % = 1, enum m_player_bind_mobile_toc.ENUM
        }).
-endif.

-ifndef('M_MISSION_NOTICE_HERO_VERSUS_BOSS_RATE_TOC_PB_H').
-define('M_MISSION_NOTICE_HERO_VERSUS_BOSS_RATE_TOC_PB_H', true).
-record(m_mission_notice_hero_versus_boss_rate_toc,
        {winne_rate = []        :: [#winnerrate{}] | undefined % = 2
        }).
-endif.

-ifndef('M_PLAYER_NOTICE_PLAYER_ATTR_CHANGE_TOC.ATTR_CHANGE_PB_H').
-define('M_PLAYER_NOTICE_PLAYER_ATTR_CHANGE_TOC.ATTR_CHANGE_PB_H', true).
-record('m_player_notice_player_attr_change_toc.attr_change',
        {attr                   :: 'hp' | 'max_hp' | 'vip_level' | 'level' | 'exp' | 'title_id' | 'magic_weapon_id' | 'move_type' | 'move_speed' | 'belong_player_id' | 'pk_mode' | 'name' | 'sex' | 'hero_id' | 'hero_arms_id' | 'hero_ornaments_id' | 'head_id' | 'head_frame_id' | 'chat_qi_pao_id' | integer(), % = 1, enum Attr
         value                  :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('M_BRAVE_ONE_FIGHT_PLAYER_TOC_PB_H').
-define('M_BRAVE_ONE_FIGHT_PLAYER_TOC_PB_H', true).
-record(m_brave_one_fight_player_toc,
        {player_id              :: integer(),       % = 1, 32 bits
         end_fight_time         :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('SPECIALPROP_PB_H').
-define('SPECIALPROP_PB_H', true).
-record(specialprop,
        {prop_id                :: integer(),       % = 1, 32 bits
         prop_obj_id            :: non_neg_integer(), % = 2, 32 bits
         num                    :: non_neg_integer(), % = 3, 32 bits
         expire_time            :: non_neg_integer() | undefined % = 4, 32 bits
        }).
-endif.

-ifndef('MATCHSCENERANK_PB_H').
-define('MATCHSCENERANK_PB_H', true).
-record(matchscenerank,
        {rank                   :: integer(),       % = 1, 32 bits
         score                  :: integer(),       % = 2, 32 bits
         zi_dan                 :: integer(),       % = 3, 32 bits
         model_head_figure      :: #modelheadfigure{} % = 4
        }).
-endif.

-ifndef('M_SCENE_EVENT_DO_MONEY_THREE_TOS_PB_H').
-define('M_SCENE_EVENT_DO_MONEY_THREE_TOS_PB_H', true).
-record(m_scene_event_do_money_three_tos,
        {
        }).
-endif.

-ifndef('M_MISSION_LUCKY_BOSS_BET_MODIFICATION_TOC_PB_H').
-define('M_MISSION_LUCKY_BOSS_BET_MODIFICATION_TOC_PB_H', true).
-record(m_mission_lucky_boss_bet_modification_toc,
        {bet_modification = []  :: [#betmodification{}] | undefined % = 1
        }).
-endif.

-ifndef('M_ROOM_NOTICE_ROOM_START_TOC_PB_H').
-define('M_ROOM_NOTICE_ROOM_START_TOC_PB_H', true).
-record(m_room_notice_room_start_toc,
        {type                   :: integer(),       % = 1, 32 bits
         roomid                 :: integer(),       % = 2, 32 bits
         seed                   :: integer(),       % = 3, 32 bits
         player_list = []       :: [#modelheadfigure{}] | undefined, % = 4
         ready_list = []        :: [integer()] | undefined, % = 5, 32 bits
         endTime                :: non_neg_integer(), % = 6, 32 bits
         index                  :: integer()        % = 7, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_ITEM_ENTER_TOC_PB_H').
-define('M_SCENE_NOTICE_ITEM_ENTER_TOC_PB_H', true).
-record(m_scene_notice_item_enter_toc,
        {scene_item_list = []   :: [#sceneitem{}] | undefined % = 1
        }).
-endif.

-ifndef('M_ACHIEVEMENT_GET_INFO_TOC_PB_H').
-define('M_ACHIEVEMENT_GET_INFO_TOC_PB_H', true).
-record(m_achievement_get_info_toc,
        {achievement_data_list = [] :: [#achievementdata{}] | undefined % = 1
        }).
-endif.

-ifndef('M_SKILL_NOTICE_ACTIVE_SKILL_CHANGE_TOC_PB_H').
-define('M_SKILL_NOTICE_ACTIVE_SKILL_CHANGE_TOC_PB_H', true).
-record(m_skill_notice_active_skill_change_toc,
        {active_skill_list = [] :: [#activeskill{}] | undefined % = 1
        }).
-endif.

-ifndef('M_PLAYER_NOTICE_PLAYER_ATTR_CHANGE_TOC_PB_H').
-define('M_PLAYER_NOTICE_PLAYER_ATTR_CHANGE_TOC_PB_H', true).
-record(m_player_notice_player_attr_change_toc,
        {player_id              :: integer(),       % = 1, 32 bits
         list = []              :: [#'m_player_notice_player_attr_change_toc.attr_change'{}] | undefined % = 2
        }).
-endif.

-ifndef('HURTRANKING_PB_H').
-define('HURTRANKING_PB_H', true).
-record(hurtranking,
        {ranking                :: integer(),       % = 1, 32 bits
         player_id              :: integer(),       % = 2, 32 bits
         player_name            :: iodata(),        % = 3
         hurt                   :: non_neg_integer() % = 4, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_MISSION_RANKING_TOC_PB_H').
-define('M_MISSION_NOTICE_MISSION_RANKING_TOC_PB_H', true).
-record(m_mission_notice_mission_ranking_toc,
        {hurt_ranking_list = [] :: [#hurtranking{}] | undefined, % = 1
         self_hurt              :: integer(),       % = 2, 32 bits
         mission_type           :: integer(),       % = 3, 32 bits
         self_rank              :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_JIANGJINCHI_INFO_NOTICE_TOC_PB_H').
-define('M_JIANGJINCHI_INFO_NOTICE_TOC_PB_H', true).
-record(m_jiangjinchi_info_notice_toc,
        {state                  :: integer(),       % = 1, 32 bits
         atk_times              :: integer(),       % = 2, 32 bits
         scene_id               :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_GET_SERVER_TIME_TOC_PB_H').
-define('M_PLAYER_GET_SERVER_TIME_TOC_PB_H', true).
-record(m_player_get_server_time_toc,
        {server_time            :: iodata()         % = 2
        }).
-endif.

-ifndef('M_GIFT_GIFT_MAIL_RECORD_TOC_PB_H').
-define('M_GIFT_GIFT_MAIL_RECORD_TOC_PB_H', true).
-record(m_gift_gift_mail_record_toc,
        {result                 :: 'success' | 'fail' | integer(), % = 1, enum m_gift_gift_mail_record_toc.ENUM
         receiver_info_list = [] :: [#receiverinfo{}] | undefined % = 2
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_CREATE_ROOM_TOS_PB_H').
-define('M_SHI_SHI_ROOM_CREATE_ROOM_TOS_PB_H', true).
-record(m_shi_shi_room_create_room_tos,
        {mission_id             :: integer(),       % = 1, 32 bits
         is_lock                :: integer(),       % = 2, 32 bits
         password               :: iodata()         % = 3
        }).
-endif.

-ifndef('WHEELRANKINFO_PB_H').
-define('WHEELRANKINFO_PB_H', true).
-record(wheelrankinfo,
        {rank                   :: non_neg_integer(), % = 1, 32 bits
         model_head_figure      :: #modelheadfigure{} % = 2
        }).
-endif.

-ifndef('M_MAIL_GET_MAIL_INFO_TOS_PB_H').
-define('M_MAIL_GET_MAIL_INFO_TOS_PB_H', true).
-record(m_mail_get_mail_info_tos,
        {
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_GET_ROOM_LIST_TOC_PB_H').
-define('M_SHI_SHI_ROOM_GET_ROOM_LIST_TOC_PB_H', true).
-record(m_shi_shi_room_get_room_list_toc,
        {room_data_list = []    :: [#shishiroomdata{}] | undefined, % = 1
         mission_id             :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_MONSTER_ATTR_CHANGE_TOC.MONSTER_ATTR_CHANGE_PB_H').
-define('M_SCENE_NOTICE_MONSTER_ATTR_CHANGE_TOC.MONSTER_ATTR_CHANGE_PB_H', true).
-record('m_scene_notice_monster_attr_change_toc.monster_attr_change',
        {monsterattr            :: 'hp' | 'max_hp' | 'vip_level' | 'level' | 'exp' | 'title_id' | 'magic_weapon_id' | 'move_type' | 'move_speed' | 'belong_player_id' | 'pk_mode' | 'name' | 'sex' | 'hero_id' | 'hero_arms_id' | 'hero_ornaments_id' | 'head_id' | 'head_frame_id' | 'chat_qi_pao_id' | integer(), % = 1, enum Attr
         value                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_MONSTER_ATTR_CHANGE_TOC_PB_H').
-define('M_SCENE_NOTICE_MONSTER_ATTR_CHANGE_TOC_PB_H', true).
-record(m_scene_notice_monster_attr_change_toc,
        {scene_monster_id       :: integer(),       % = 1, 32 bits
         list = []              :: [#'m_scene_notice_monster_attr_change_toc.monster_attr_change'{}] | undefined % = 2
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_LEAVE_ROOM_TOS_PB_H').
-define('M_MANY_PEOPLE_BOSS_LEAVE_ROOM_TOS_PB_H', true).
-record(m_many_people_boss_leave_room_tos,
        {
        }).
-endif.

-ifndef('CHARGEREQUESTDATA_PB_H').
-define('CHARGEREQUESTDATA_PB_H', true).
-record(chargerequestdata,
        {key                    :: iodata(),        % = 1
         value                  :: iodata()         % = 2
        }).
-endif.

-ifndef('M_CHARGE_CHARGE_TOC_PB_H').
-define('M_CHARGE_CHARGE_TOC_PB_H', true).
-record(m_charge_charge_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'no_enough_prop' | 'already_have' | 'times_limit' | integer(), % = 1, enum m_charge_charge_toc.ENUM
         item_id                :: integer(),       % = 3, 32 bits
         count                  :: integer(),       % = 4, 32 bits
         charge_value           :: float() | integer() | infinity | '-infinity' | nan, % = 5
         charge_request_data = [] :: [#chargerequestdata{}] | undefined, % = 6
         charge_type_idx        :: integer() | undefined % = 7, 32 bits
        }).
-endif.

-ifndef('M_CARD_GET_AWARD_TOS_PB_H').
-define('M_CARD_GET_AWARD_TOS_PB_H', true).
-record(m_card_get_award_tos,
        {type                   :: integer(),       % = 1, 32 bits
         id                     :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('CHATPLAYERONLINE_PB_H').
-define('CHATPLAYERONLINE_PB_H', true).
-record(chatplayeronline,
        {player_id              :: integer(),       % = 1, 32 bits
         state                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_CHAT_GET_PLAYER_LIST_ONLINE_STATUS_TOC_PB_H').
-define('M_PLAYER_CHAT_GET_PLAYER_LIST_ONLINE_STATUS_TOC_PB_H', true).
-record(m_player_chat_get_player_list_online_status_toc,
        {player_online_state = [] :: [#chatplayeronline{}] | undefined % = 1
        }).
-endif.

-ifndef('M_LEICHONG_GET_REWARD_TOS_PB_H').
-define('M_LEICHONG_GET_REWARD_TOS_PB_H', true).
-record(m_leichong_get_reward_tos,
        {activity_id            :: integer(),       % = 1, 32 bits
         id                     :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_BRAVE_ONE_CREATE_TOS_PB_H').
-define('M_BRAVE_ONE_CREATE_TOS_PB_H', true).
-record(m_brave_one_create_tos,
        {id                     :: integer(),       % = 1, 32 bits
         pos_id                 :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MAIL_REMOVE_MAIL_TOC_PB_H').
-define('M_MAIL_REMOVE_MAIL_TOC_PB_H', true).
-record(m_mail_remove_mail_toc,
        {mail_real_id = []      :: [integer()] | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_SET_PLAYER_DATA_TOC_PB_H').
-define('M_PLAYER_SET_PLAYER_DATA_TOC_PB_H', true).
-record(m_player_set_player_data_toc,
        {result                 :: 'success' | 'fail' | 'no_enough_prop' | 'not_authority' | integer(), % = 1, enum m_player_set_player_data_toc.ENUM
         type                   :: integer(),       % = 2, 32 bits
         id                     :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_FIGHT_NOTICE_ADD_BUFF_TOC_PB_H').
-define('M_FIGHT_NOTICE_ADD_BUFF_TOC_PB_H', true).
-record(m_fight_notice_add_buff_toc,
        {obj_type               :: integer(),       % = 1, 32 bits
         obj_id                 :: integer(),       % = 2, 32 bits
         buff                   :: #buff{}          % = 3
        }).
-endif.

-ifndef('M_FIRST_CHARGE_GET_AWARD_TOS_PB_H').
-define('M_FIRST_CHARGE_GET_AWARD_TOS_PB_H', true).
-record(m_first_charge_get_award_tos,
        {type                   :: integer(),       % = 1, 32 bits
         day                    :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_SCENE_BOSS_BOSS_UPDATE_POS_TOC_PB_H').
-define('M_MISSION_NOTICE_SCENE_BOSS_BOSS_UPDATE_POS_TOC_PB_H', true).
-record(m_mission_notice_scene_boss_boss_update_pos_toc,
        {pos_id                 :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_BOSS_DIE_TOC_PB_H').
-define('M_SCENE_NOTICE_BOSS_DIE_TOC_PB_H', true).
-record(m_scene_notice_boss_die_toc,
        {boss_id                :: integer(),       % = 1, 32 bits
         kill_player_id         :: integer(),       % = 2, 32 bits
         award                  :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_MISSION_SCENE_BOSS_BET_TOS_PB_H').
-define('M_MISSION_SCENE_BOSS_BET_TOS_PB_H', true).
-record(m_mission_scene_boss_bet_tos,
        {type                   :: integer(),       % = 1, 32 bits
         id                     :: integer(),       % = 2, 32 bits
         num                    :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_DAILY_TASK_GET_AWARD_TOC_PB_H').
-define('M_DAILY_TASK_GET_AWARD_TOC_PB_H', true).
-record(m_daily_task_get_award_toc,
        {result                 :: 'success' | 'fail' | 'not_enough_grid' | 'not_authority' | 'already_get' | integer(), % = 1, enum m_daily_task_get_award_toc.ENUM
         id                     :: integer(),       % = 2, 32 bits
         points                 :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_ONE_VS_ONE_NOTICE_UPDATE_ROOM_DATA_TOC_PB_H').
-define('M_ONE_VS_ONE_NOTICE_UPDATE_ROOM_DATA_TOC_PB_H', true).
-record(m_one_vs_one_notice_update_room_data_toc,
        {type                   :: integer(),       % = 1, 32 bits
         room_list = []         :: [#onevsoneroomdata{}] | undefined % = 2
        }).
-endif.

-ifndef('M_SCENE_ENTER_SINGLE_SCENE_TOC_PB_H').
-define('M_SCENE_ENTER_SINGLE_SCENE_TOC_PB_H', true).
-record(m_scene_enter_single_scene_toc,
        {scene_id               :: integer(),       % = 1, 32 bits
         result                 :: 'success' | 'fail' | 'need_power' | 'no_enough_prop' | 'not_authority' | integer() % = 2, enum m_scene_enter_single_scene_toc.ENUM
        }).
-endif.

-ifndef('M_SEIZE_TREASURE_GET_TREASURE_TOS_PB_H').
-define('M_SEIZE_TREASURE_GET_TREASURE_TOS_PB_H', true).
-record(m_seize_treasure_get_treasure_tos,
        {type                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MAIL_DELETE_MAIL_TOC_PB_H').
-define('M_MAIL_DELETE_MAIL_TOC_PB_H', true).
-record(m_mail_delete_mail_toc,
        {result                 :: 'success' | 'fail' | 'none' | integer(), % = 1, enum m_mail_delete_mail_toc.ENUM
         mail_real_id = []      :: [integer()] | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('M_MISSION_EITHER_EITHER_TOS_PB_H').
-define('M_MISSION_EITHER_EITHER_TOS_PB_H', true).
-record(m_mission_either_either_tos,
        {either_value           :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_GUESS_BOSS_COST_MY_MANA_TOC_PB_H').
-define('M_MISSION_NOTICE_GUESS_BOSS_COST_MY_MANA_TOC_PB_H', true).
-record(m_mission_notice_guess_boss_cost_my_mana_toc,
        {guess_boss_cost = []   :: [#guessbosscost{}] | undefined % = 1
        }).
-endif.

-ifndef('SEVENLOGINDATA_PB_H').
-define('SEVENLOGINDATA_PB_H', true).
-record(sevenlogindata,
        {already_give_list = [] :: [integer()] | undefined, % = 1, 32 bits
         cumulative_day         :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_LABA_SPIN_TOC.FREEGAMECOMBO_PB_H').
-define('M_LABA_SPIN_TOC.FREEGAMECOMBO_PB_H', true).
-record('m_laba_spin_toc.freegamecombo',
        {combos = []            :: [integer()] | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('M_RANK_GET_RANK_INFO_TOC_PB_H').
-define('M_RANK_GET_RANK_INFO_TOC_PB_H', true).
-record(m_rank_get_rank_info_toc,
        {fun_id                 :: integer(),       % = 1, 32 bits
         page_num               :: integer(),       % = 2, 32 bits
         first_show_value       :: integer(),       % = 3, 32 bits
         model_figure           :: #modelfigure{} | undefined, % = 4
         my_rank                :: integer(),       % = 5, 32 bits
         rank_info = []         :: [#rankinfo{}] | undefined, % = 6
         total_num              :: integer()        % = 7, 32 bits
        }).
-endif.

-ifndef('M_LOGIN_ENTER_GAME_TOS_PB_H').
-define('M_LOGIN_ENTER_GAME_TOS_PB_H', true).
-record(m_login_enter_game_tos,
        {
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_NOTICE_UNREAD_NUM_TOC_PB_H').
-define('M_MATCH_SCENE_ROOM_NOTICE_UNREAD_NUM_TOC_PB_H', true).
-record(m_match_scene_room_notice_unread_num_toc,
        {num                    :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_PLAYER_COLLECT_TOS_PB_H').
-define('M_SCENE_PLAYER_COLLECT_TOS_PB_H', true).
-record(m_scene_player_collect_tos,
        {scene_item_id = []     :: [integer()] | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_CHAT_CHANNEL_CHAT_TOC_PB_H').
-define('M_PLAYER_CHAT_CHANNEL_CHAT_TOC_PB_H', true).
-record(m_player_chat_channel_chat_toc,
        {reason                 :: 'success' | 'fail' | 'level_limit' | 'too_quick' | 'too_long' | 'not_enough_vip_level' | 'no_condition' | integer(), % = 100, enum m_player_chat_channel_chat_toc.ENUM
         channel                :: integer(),       % = 1, 32 bits
         id                     :: integer() | undefined, % = 2, 32 bits
         msg_data               :: iodata()         % = 3
        }).
-endif.

-ifndef('SCENEBOSSBETAWARD_PB_H').
-define('SCENEBOSSBETAWARD_PB_H', true).
-record(scenebossbetaward,
        {type                   :: integer(),       % = 1, 32 bits
         id                     :: integer(),       % = 2, 32 bits
         num                    :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_SCENE_BOSS_RESULT_TOC_PB_H').
-define('M_MISSION_NOTICE_SCENE_BOSS_RESULT_TOC_PB_H', true).
-record(m_mission_notice_scene_boss_result_toc,
        {result                 :: integer(),       % = 1, 32 bits
         win_name               :: iodata(),        % = 2
         win_award_value        :: integer(),       % = 3, 32 bits
         scene_boss_bet_award = [] :: [#scenebossbetaward{}] | undefined, % = 4
         player_id              :: integer(),       % = 5, 32 bits
         prop_list = []         :: [#prop{}] | undefined % = 6
        }).
-endif.

-ifndef('M_SCENE_EVENT_NOTICE_BALLS_RESULT_TOC.RESULTINFO_PB_H').
-define('M_SCENE_EVENT_NOTICE_BALLS_RESULT_TOC.RESULTINFO_PB_H', true).
-record('m_scene_event_notice_balls_result_toc.resultinfo',
        {player_info            :: #playerbaseinfo{}, % = 1
         prop_list = []         :: [#prop{}] | undefined % = 2
        }).
-endif.

-ifndef('M_SCENE_EVENT_NOTICE_BALLS_RESULT_TOC_PB_H').
-define('M_SCENE_EVENT_NOTICE_BALLS_RESULT_TOC_PB_H', true).
-record(m_scene_event_notice_balls_result_toc,
        {results = []           :: [#'m_scene_event_notice_balls_result_toc.resultinfo'{}] | undefined, % = 1
         luck                   :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('TIMEEVENT_PB_H').
-define('TIMEEVENT_PB_H', true).
-record(timeevent,
        {time                   :: integer(),       % = 1, 32 bits
         type                   :: integer(),       % = 2, 32 bits
         params = []            :: [integer()] | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_ADD_TIME_EVENT_LIST_TOC_PB_H').
-define('M_SCENE_NOTICE_ADD_TIME_EVENT_LIST_TOC_PB_H', true).
-record(m_scene_notice_add_time_event_list_toc,
        {time_event_list = []   :: [#timeevent{}] | undefined % = 1
        }).
-endif.

-ifndef('M_TASK_BOUNTY_ACCEPT_TOC_PB_H').
-define('M_TASK_BOUNTY_ACCEPT_TOC_PB_H', true).
-record(m_task_bounty_accept_toc,
        {task_id                :: integer(),       % = 1, 32 bits
         result                 :: 'success' | 'not_enough_times' | 'already_exists' | 'fail' | integer() % = 2, enum m_task_bounty_accept_toc.Result
        }).
-endif.

-ifndef('M_FIGHT_NOTICE_GET_FUNCTION_MONSTER_AWARD_TOC.FUNCTIONMONSTERAWARD_PB_H').
-define('M_FIGHT_NOTICE_GET_FUNCTION_MONSTER_AWARD_TOC.FUNCTIONMONSTERAWARD_PB_H', true).
-record('m_fight_notice_get_function_monster_award_toc.functionmonsteraward',
        {id                     :: integer(),       % = 3, 32 bits
         prop_list = []         :: [#prop{}] | undefined % = 4
        }).
-endif.

-ifndef('M_FIGHT_NOTICE_GET_FUNCTION_MONSTER_AWARD_TOC_PB_H').
-define('M_FIGHT_NOTICE_GET_FUNCTION_MONSTER_AWARD_TOC_PB_H', true).
-record(m_fight_notice_get_function_monster_award_toc,
        {special_event          :: integer(),       % = 1, 32 bits
         special_event_type     :: integer(),       % = 2, 32 bits
         award_list = []        :: [#'m_fight_notice_get_function_monster_award_toc.functionmonsteraward'{}] | undefined % = 3
        }).
-endif.

-ifndef('WHEELCOMMON_PB_H').
-define('WHEELCOMMON_PB_H', true).
-record(wheelcommon,
        {id                     :: non_neg_integer(), % = 1, 32 bits
         value                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_WHEEL_JOIN_WHEEL_TOC_PB_H').
-define('M_WHEEL_JOIN_WHEEL_TOC_PB_H', true).
-record(m_wheel_join_wheel_toc,
        {result                 :: 'success' | 'fail' | 'function_no_open' | integer(), % = 1, enum m_wheel_join_wheel_toc.ENUM
         type                   :: non_neg_integer(), % = 2, 32 bits
         bet_list = []          :: [#wheelcommon{}] | undefined, % = 3
         time_ms                :: non_neg_integer(), % = 4, 32 bits
         left_rank_info = []    :: [#wheelrankinfo{}] | undefined, % = 5
         right_rank_info = []   :: [#wheelrankinfo{}] | undefined, % = 6
         my_bet_list = []       :: [#wheelcommon{}] | undefined, % = 7
         record_list = []       :: [#wheelcommon{}] | undefined % = 8
        }).
-endif.

-ifndef('M_SCENE_LOAD_SCENE_TOC_PB_H').
-define('M_SCENE_LOAD_SCENE_TOC_PB_H', true).
-record(m_scene_load_scene_toc,
        {scene_id               :: integer(),       % = 1, 32 bits
         scene_player_list = [] :: [#sceneplayer{}] | undefined, % = 2
         scene_monster_list = [] :: [#scenemonster{}] | undefined, % = 3
         scene_item_list = []   :: [#sceneitem{}] | undefined % = 4
        }).
-endif.

-ifndef('M_SHEN_LONG_DRAW_TOS_PB_H').
-define('M_SHEN_LONG_DRAW_TOS_PB_H', true).
-record(m_shen_long_draw_tos,
        {
        }).
-endif.

-ifndef('M_BRAVE_ONE_WIN_PLAYER_TOC_PB_H').
-define('M_BRAVE_ONE_WIN_PLAYER_TOC_PB_H', true).
-record(m_brave_one_win_player_toc,
        {id                     :: integer(),       % = 1, 32 bits
         modelHeadFigure        :: #modelheadfigure{} % = 4
        }).
-endif.

-ifndef('MSGDATA_PB_H').
-define('MSGDATA_PB_H', true).
-record(msgdata,
        {player_id              :: integer(),       % = 1, 32 bits
         nickname               :: iodata(),        % = 2
         sex                    :: integer(),       % = 3, 32 bits
         vip_level              :: integer(),       % = 4, 32 bits
         head_id                :: integer(),       % = 5, 32 bits
         serverId               :: iodata(),        % = 6
         channel                :: integer(),       % = 7, 32 bits
         msg                    :: iodata(),        % = 8
         template_id            :: integer(),       % = 9, 32 bits
         arsg_list = []         :: [iodata()] | undefined, % = 10
         loop_num               :: integer(),       % = 11, 32 bits
         is_forbid              :: integer() | undefined % = 12, 32 bits
        }).
-endif.

-ifndef('M_CHAT_BROADCAST_CHANNEL_MSG_LIST_TOC_PB_H').
-define('M_CHAT_BROADCAST_CHANNEL_MSG_LIST_TOC_PB_H', true).
-record(m_chat_broadcast_channel_msg_list_toc,
        {msg_data_list = []     :: [#msgdata{}] | undefined % = 1
        }).
-endif.

-ifndef('M_LABA_SPIN_TOC.GRIDS_PB_H').
-define('M_LABA_SPIN_TOC.GRIDS_PB_H', true).
-record('m_laba_spin_toc.grids',
        {list = []              :: [integer()] | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('M_LABA_SPIN_TOC.FREEGAMERESULT_PB_H').
-define('M_LABA_SPIN_TOC.FREEGAMERESULT_PB_H', true).
-record('m_laba_spin_toc.freegameresult',
        {grids_list = []        :: [#'m_laba_spin_toc.grids'{}] | undefined % = 2
        }).
-endif.

-ifndef('M_LABA_SPIN_TOC_PB_H').
-define('M_LABA_SPIN_TOC_PB_H', true).
-record(m_laba_spin_toc,
        {result                 :: 'success' | 'fail' | 'no_enough_prop' | integer(), % = 1, enum m_laba_spin_toc.ENUM
         grids_list = []        :: [#'m_laba_spin_toc.grids'{}] | undefined, % = 2
         combos = []            :: [integer()] | undefined, % = 3, 32 bits
         freegame_results = []  :: [#'m_laba_spin_toc.freegameresult'{}] | undefined, % = 4
         freegame_combos = []   :: [#'m_laba_spin_toc.freegamecombo'{}] | undefined, % = 5
         id                     :: integer(),       % = 6, 32 bits
         num                    :: integer()        % = 7, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_PLAYER_MOVE_TOC_PB_H').
-define('M_SCENE_NOTICE_PLAYER_MOVE_TOC_PB_H', true).
-record(m_scene_notice_player_move_toc,
        {player_id              :: integer(),       % = 1, 32 bits
         go_x                   :: integer(),       % = 2, 32 bits
         go_y                   :: integer(),       % = 3, 32 bits
         move_type              :: integer(),       % = 4, 32 bits
         move_path = []         :: [#movepath{}] | undefined, % = 5
         high                   :: integer(),       % = 6, 32 bits
         time                   :: integer(),       % = 7, 32 bits
         action_id              :: iodata()         % = 8
        }).
-endif.

-ifndef('M_ROOM_READY_TOS_PB_H').
-define('M_ROOM_READY_TOS_PB_H', true).
-record(m_room_ready_tos,
        {
        }).
-endif.

-ifndef('M_TIMES_ADD_TIMES_TOS_PB_H').
-define('M_TIMES_ADD_TIMES_TOS_PB_H', true).
-record(m_times_add_times_tos,
        {times_id               :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_SHOW_ACTION_TOS_PB_H').
-define('M_SCENE_SHOW_ACTION_TOS_PB_H', true).
-record(m_scene_show_action_tos,
        {action_id = 0          :: integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_ADD_ROOM_TOC_PB_H').
-define('M_MATCH_SCENE_ROOM_ADD_ROOM_TOC_PB_H', true).
-record(m_match_scene_room_add_room_toc,
        {room_data              :: #matchsceneroomdata{} % = 1
        }).
-endif.

-ifndef('M_ACHIEVEMENT_NOTICE_UPDATE_ACHIEVEMENT_DATA_TOC_PB_H').
-define('M_ACHIEVEMENT_NOTICE_UPDATE_ACHIEVEMENT_DATA_TOC_PB_H', true).
-record(m_achievement_notice_update_achievement_data_toc,
        {achievement_data       :: #achievementdata{} % = 1
        }).
-endif.

-ifndef('M_TASK_BOUNTY_NOTICE_RESET_TOC_PB_H').
-define('M_TASK_BOUNTY_NOTICE_RESET_TOC_PB_H', true).
-record(m_task_bounty_notice_reset_toc,
        {
        }).
-endif.

-ifndef('M_FIRST_CHARGE_INIT_DATA_FIRST_RECHARGE_TOC_PB_H').
-define('M_FIRST_CHARGE_INIT_DATA_FIRST_RECHARGE_TOC_PB_H', true).
-record(m_first_charge_init_data_first_recharge_toc,
        {first_charge_list = [] :: [#firstcharge{}] | undefined % = 1
        }).
-endif.

-ifndef('M_TONGXINGZHENG_TASK_DAILY_REWARD_COLLECT_TOC_PB_H').
-define('M_TONGXINGZHENG_TASK_DAILY_REWARD_COLLECT_TOC_PB_H', true).
-record(m_tongxingzheng_task_daily_reward_collect_toc,
        {result                 :: 'success' | 'not_authority' | 'no_finish' | 'already_get' | 'unknown' | integer(), % = 1, enum m_tongxingzheng_task_daily_reward_collect_toc.ENUM
         prop_list = []         :: [#prop{}] | undefined, % = 2
         id                     :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_BRAVE_ONE_CREATE_TOC_PB_H').
-define('M_BRAVE_ONE_CREATE_TOC_PB_H', true).
-record(m_brave_one_create_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'already_have' | 'function_no_open' | 'not_enough_grid' | 'no_enough_prop' | integer(), % = 99, enum m_brave_one_create_toc.ENUM
         id                     :: integer(),       % = 1, 32 bits
         braveOneData           :: #braveonedata{} | undefined % = 3
        }).
-endif.

-ifndef('M_CHAT_BROADCAST_CHANNEL_MSG_TOC_PB_H').
-define('M_CHAT_BROADCAST_CHANNEL_MSG_TOC_PB_H', true).
-record(m_chat_broadcast_channel_msg_toc,
        {player_id              :: integer(),       % = 1, 32 bits
         nickname               :: iodata(),        % = 2
         sex                    :: integer(),       % = 3, 32 bits
         vip_level              :: integer(),       % = 4, 32 bits
         head_id                :: integer(),       % = 5, 32 bits
         serverId               :: iodata(),        % = 6
         channel                :: integer(),       % = 7, 32 bits
         msg                    :: iodata(),        % = 8
         template_id            :: integer(),       % = 9, 32 bits
         arsg_list = []         :: [iodata()] | undefined, % = 10
         loop_num               :: integer(),       % = 11, 32 bits
         is_forbid              :: integer() | undefined % = 12, 32 bits
        }).
-endif.

-ifndef('M_MISSION_HERO_VERSUS_BOSS_BET_INFO_TOC_PB_H').
-define('M_MISSION_HERO_VERSUS_BOSS_BET_INFO_TOC_PB_H', true).
-record(m_mission_hero_versus_boss_bet_info_toc,
        {bet_modification = []  :: [#betmodification{}] | undefined % = 1
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_JOIN_ROOM_TOC_PB_H').
-define('M_SHI_SHI_ROOM_JOIN_ROOM_TOC_PB_H', true).
-record(m_shi_shi_room_join_room_toc,
        {result                 :: 'success' | 'fail' | 'not_enough_mana' | 'not_authority' | 'no_condition' | 'already_join_room' | 'error_password' | 'none' | 'time_limit' | integer(), % = 1, enum m_shi_shi_room_join_room_toc.ENUM
         room_details_data      :: #shishiroomdetailsdata{} | undefined % = 2
        }).
-endif.

-ifndef('M_SCENE_NOTICE_SHOW_FANPAI_TOC_PB_H').
-define('M_SCENE_NOTICE_SHOW_FANPAI_TOC_PB_H', true).
-record(m_scene_notice_show_fanpai_toc,
        {id_list = []           :: [integer()] | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_NOTICE_ROOM_PEOPLE_NUM_CHANGE_TOC_PB_H').
-define('M_MATCH_SCENE_ROOM_NOTICE_ROOM_PEOPLE_NUM_CHANGE_TOC_PB_H', true).
-record(m_match_scene_room_notice_room_people_num_change_toc,
        {room_id                :: integer(),       % = 1, 32 bits
         people_num             :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('M_STEP_BY_STEP_SY_FIGHT_TOC_PB_H').
-define('M_STEP_BY_STEP_SY_FIGHT_TOC_PB_H', true).
-record(m_step_by_step_sy_fight_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'none' | 'already_have' | 'function_no_open' | 'not_enough_grid' | 'no_enough_prop' | integer(), % = 99, enum m_step_by_step_sy_fight_toc.ENUM
         loop_num               :: integer(),       % = 2, 32 bits
         end_fight_time         :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_TOTAL_AWARD_TOC_PB_H').
-define('M_MISSION_NOTICE_TOTAL_AWARD_TOC_PB_H', true).
-record(m_mission_notice_total_award_toc,
        {total_prop_list = []   :: [#prop{}] | undefined % = 1
        }).
-endif.

-ifndef('M_FIGHT_FIGHT_TOS_PB_H').
-define('M_FIGHT_FIGHT_TOS_PB_H', true).
-record(m_fight_fight_tos,
        {skill_id               :: integer(),       % = 1, 32 bits
         dir                    :: integer(),       % = 2, 32 bits
         target_id              :: integer(),       % = 3, 32 bits
         target_type            :: integer(),       % = 4, 32 bits
         attack_type            :: integer(),       % = 5, 32 bits
         mano_value             :: integer()        % = 6, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_ADJUST_TOC_PB_H').
-define('M_PLAYER_ADJUST_TOC_PB_H', true).
-record(m_player_adjust_toc,
        {result                 :: 'success' | 'fail' | 'already_exists' | integer() % = 1, enum m_player_adjust_toc.ENUM
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_CREATE_ROOM_TOS_PB_H').
-define('M_MANY_PEOPLE_BOSS_CREATE_ROOM_TOS_PB_H', true).
-record(m_many_people_boss_create_room_tos,
        {boss_id                :: integer(),       % = 1, 32 bits
         is_lock                :: integer(),       % = 2, 32 bits
         password               :: iodata()         % = 3
        }).
-endif.

-ifndef('BAG_PB_H').
-define('BAG_PB_H', true).
-record(bag,
        {bag_type               :: integer(),       % = 1, 32 bits
         num                    :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_NOTICE_RESULT_TOC.RESULT_PB_H').
-define('M_MATCH_SCENE_NOTICE_RESULT_TOC.RESULT_PB_H', true).
-record('m_match_scene_notice_result_toc.result',
        {rank                   :: integer(),       % = 1, 32 bits
         prop_list = []         :: [#prop{}] | undefined, % = 2
         model_head_figure      :: #modelheadfigure{} % = 3
        }).
-endif.

-ifndef('M_MATCH_SCENE_CANCEL_MATCH_TOC_PB_H').
-define('M_MATCH_SCENE_CANCEL_MATCH_TOC_PB_H', true).
-record(m_match_scene_cancel_match_toc,
        {result                 :: 'success' | 'fail' | integer() % = 1, enum m_match_scene_cancel_match_toc.Result
        }).
-endif.

-ifndef('M_TURN_TABLE_GET_AWARD_TOC_PB_H').
-define('M_TURN_TABLE_GET_AWARD_TOC_PB_H', true).
-record(m_turn_table_get_award_toc,
        {result                 :: 'success' | 'fail' | 'function_no_open' | 'not_enough_grid' | 'not_authority' | integer(), % = 99, enum m_turn_table_get_award_toc.ENUM
         prop_list = []         :: [#prop{}] | undefined % = 1
        }).
-endif.

-ifndef('M_BRAVE_ONE_WAIT_SCENE_TOC_PB_H').
-define('M_BRAVE_ONE_WAIT_SCENE_TOC_PB_H', true).
-record(m_brave_one_wait_scene_toc,
        {wait_end_time          :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_EVERYDAY_SIGN_NOTICE_DAY_TOC_PB_H').
-define('M_EVERYDAY_SIGN_NOTICE_DAY_TOC_PB_H', true).
-record(m_everyday_sign_notice_day_toc,
        {day                    :: integer(),       % = 1, 32 bits
         round                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_NOTICE_RESULT_TOC_PB_H').
-define('M_MATCH_SCENE_NOTICE_RESULT_TOC_PB_H', true).
-record(m_match_scene_notice_result_toc,
        {result_list = []       :: [#'m_match_scene_notice_result_toc.result'{}] | undefined % = 1
        }).
-endif.

-ifndef('M_DAILY_TASK_NOTICE_RESET_DAILY_TASK_DATA_TOC_PB_H').
-define('M_DAILY_TASK_NOTICE_RESET_DAILY_TASK_DATA_TOC_PB_H', true).
-record(m_daily_task_notice_reset_daily_task_data_toc,
        {
        }).
-endif.

-ifndef('M_SCENE_PLAYER_STOP_MOVE_TOS_PB_H').
-define('M_SCENE_PLAYER_STOP_MOVE_TOS_PB_H', true).
-record(m_scene_player_stop_move_tos,
        {x                      :: integer(),       % = 1, 32 bits
         y                      :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SHOP_GET_SHOP_INFO_TOC_PB_H').
-define('M_SHOP_GET_SHOP_INFO_TOC_PB_H', true).
-record(m_shop_get_shop_info_toc,
        {shop_data = []         :: [#shopdata{}] | undefined, % = 1
         shop_type              :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SPECIAL_PROP_NOTICE_UPDATE_SPECIAL_PROP_TOC_PB_H').
-define('M_SPECIAL_PROP_NOTICE_UPDATE_SPECIAL_PROP_TOC_PB_H', true).
-record(m_special_prop_notice_update_special_prop_toc,
        {prop_list = []         :: [#specialprop{}] | undefined, % = 1
         log_type               :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_UPDATE_PLAYER_SIGNATURE_TOC_PB_H').
-define('M_PLAYER_UPDATE_PLAYER_SIGNATURE_TOC_PB_H', true).
-record(m_player_update_player_signature_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'invalid_string' | 'too_long' | 'not_enough_times' | integer(), % = 100, enum m_player_update_player_signature_toc.ENUM
         signature              :: iodata()         % = 1
        }).
-endif.

-ifndef('M_ROOM_GET_ROOM_LIST_TOC_PB_H').
-define('M_ROOM_GET_ROOM_LIST_TOC_PB_H', true).
-record(m_room_get_room_list_toc,
        {type                   :: integer(),       % = 1, 32 bits
         room_list = []         :: [#roominfo{}] | undefined, % = 2
         rank_list = []         :: [#roomrankinfo{}] | undefined, % = 3
         my_score               :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_WHEEL_GET_BET_RECORD_TOC_PB_H').
-define('M_WHEEL_GET_BET_RECORD_TOC_PB_H', true).
-record(m_wheel_get_bet_record_toc,
        {record_list = []       :: [#wheelplayerbetrecord{}] | undefined % = 1
        }).
-endif.

-ifndef('M_ONE_VS_ONE_JOIN_ROOM_TOS_PB_H').
-define('M_ONE_VS_ONE_JOIN_ROOM_TOS_PB_H', true).
-record(m_one_vs_one_join_room_tos,
        {type                   :: integer(),       % = 1, 32 bits
         room_id                :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_HERO_UNLOCK_HERO_TOS_PB_H').
-define('M_HERO_UNLOCK_HERO_TOS_PB_H', true).
-record(m_hero_unlock_hero_tos,
        {id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_LUCKY_BOSS_RESULT_TOC_PB_H').
-define('M_MISSION_NOTICE_LUCKY_BOSS_RESULT_TOC_PB_H', true).
-record(m_mission_notice_lucky_boss_result_toc,
        {boss_id                :: integer(),       % = 1, 32 bits
         award_list = []        :: [#prop{}] | undefined % = 2
        }).
-endif.

-ifndef('M_CHAT_CHANNEL_CHAT_TOS_PB_H').
-define('M_CHAT_CHANNEL_CHAT_TOS_PB_H', true).
-record(m_chat_channel_chat_tos,
        {channel                :: integer(),       % = 1, 32 bits
         msg                    :: iodata()         % = 2
        }).
-endif.

-ifndef('M_MAIL_GET_ITEM_MAIL_TOS_PB_H').
-define('M_MAIL_GET_ITEM_MAIL_TOS_PB_H', true).
-record(m_mail_get_item_mail_tos,
        {mail_real_id           :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_NOTICE_SHARE_TASK_TOC_PB_H').
-define('M_PLATFORM_FUNCTION_NOTICE_SHARE_TASK_TOC_PB_H', true).
-record(m_platform_function_notice_share_task_toc,
        {share_task_award_data = [] :: [#sharetaskawarddata{}] | undefined % = 1
        }).
-endif.

-ifndef('M_FIGHT_DIZZY_TIME_REDUCE_TOS_PB_H').
-define('M_FIGHT_DIZZY_TIME_REDUCE_TOS_PB_H', true).
-record(m_fight_dizzy_time_reduce_tos,
        {times                  :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_BRAVE_ONE_GET_INFO_LIST_TOS_PB_H').
-define('M_BRAVE_ONE_GET_INFO_LIST_TOS_PB_H', true).
-record(m_brave_one_get_info_list_tos,
        {page                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_TASK_BOUNTY_QUERY_INFO_TOC_PB_H').
-define('M_TASK_BOUNTY_QUERY_INFO_TOC_PB_H', true).
-record(m_task_bounty_query_info_toc,
        {accept_state           :: boolean() | 0 | 1, % = 1
         tasks = []             :: [#taskinfo{}] | undefined, % = 2
         reset_times            :: integer(),       % = 3, 32 bits
         accept_times           :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_HERO_HERO_UP_STAR_TOC_PB_H').
-define('M_HERO_HERO_UP_STAR_TOC_PB_H', true).
-record(m_hero_hero_up_star_toc,
        {result                 :: 'success' | 'fail' | 'no_enough_prop' | 'not_authority' | 'none' | integer(), % = 100, enum m_hero_hero_up_star_toc.ENUM
         id                     :: integer(),       % = 1, 32 bits
         star                   :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_INVEST_INIT_NOTICE_TOC_PB_H').
-define('M_INVEST_INIT_NOTICE_TOC_PB_H', true).
-record(m_invest_init_notice_toc,
        {invest_type_data_list = [] :: [#investtypedata{}] | undefined % = 1
        }).
-endif.

-ifndef('M_MATCH_SCENE_CANCEL_MATCH_TOS_PB_H').
-define('M_MATCH_SCENE_CANCEL_MATCH_TOS_PB_H', true).
-record(m_match_scene_cancel_match_tos,
        {
        }).
-endif.

-ifndef('M_STEP_BY_STEP_SY_FIGHT_RESULT_TOC_PB_H').
-define('M_STEP_BY_STEP_SY_FIGHT_RESULT_TOC_PB_H', true).
-record(m_step_by_step_sy_fight_result_toc,
        {loop_num               :: integer(),       % = 1, 32 bits
         is_win                 :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_FANPAI_TOC_PB_H').
-define('M_SCENE_NOTICE_FANPAI_TOC_PB_H', true).
-record(m_scene_notice_fanpai_toc,
        {id                     :: integer(),       % = 1, 32 bits
         award_list = []        :: [#prop{}] | undefined % = 2
        }).
-endif.

-ifndef('M_VERIFY_CODE_SMS_CODE_TOC_PB_H').
-define('M_VERIFY_CODE_SMS_CODE_TOC_PB_H', true).
-record(m_verify_code_sms_code_toc,
        {result                 :: 'success' | 'invalid_mobile' | 'fail' | integer(), % = 1, enum m_verify_code_sms_code_toc.ENUM
         code                   :: integer() | undefined, % = 2, 32 bits
         wait_time              :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_DAILY_TASK_GET_INFO_TOS_PB_H').
-define('M_DAILY_TASK_GET_INFO_TOS_PB_H', true).
-record(m_daily_task_get_info_tos,
        {
        }).
-endif.

-ifndef('M_TASK_BOUNTY_GET_AWARD_TOS_PB_H').
-define('M_TASK_BOUNTY_GET_AWARD_TOS_PB_H', true).
-record(m_task_bounty_get_award_tos,
        {
        }).
-endif.

-ifndef('M_MISSION_LUCKY_BOSS_BET_TOC_PB_H').
-define('M_MISSION_LUCKY_BOSS_BET_TOC_PB_H', true).
-record(m_mission_lucky_boss_bet_toc,
        {result                 :: 'success' | 'no_enough_prop' | 'already_start' | 'not_authority' | 'none' | 'unknown' | integer() % = 1, enum m_mission_lucky_boss_bet_toc.ENUM
        }).
-endif.

-ifndef('M_PLAYER_CHAT_BROADCAST_CHANNEL_MSG_LIST_TOC_PB_H').
-define('M_PLAYER_CHAT_BROADCAST_CHANNEL_MSG_LIST_TOC_PB_H', true).
-record(m_player_chat_broadcast_channel_msg_list_toc,
        {chat_data_list = []    :: [#chatinfo{}] | undefined % = 1
        }).
-endif.

-ifndef('M_PLAYER_MODIFY_NICKNAME_GENDER_TOS_PB_H').
-define('M_PLAYER_MODIFY_NICKNAME_GENDER_TOS_PB_H', true).
-record(m_player_modify_nickname_gender_tos,
        {gender                 :: integer(),       % = 1, 32 bits
         nickname               :: iodata()         % = 2
        }).
-endif.

-ifndef('M_SCENE_ENTER_SCENE_TOS_PB_H').
-define('M_SCENE_ENTER_SCENE_TOS_PB_H', true).
-record(m_scene_enter_scene_tos,
        {scene_id               :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_TONGXINGZHENG_TASK_MONTH_UPDATE_NOTICE_TOC_PB_H').
-define('M_TONGXINGZHENG_TASK_MONTH_UPDATE_NOTICE_TOC_PB_H', true).
-record(m_tongxingzheng_task_month_update_notice_toc,
        {tasks = []             :: [#taskinfo{}] | undefined % = 1
        }).
-endif.

-ifndef('M_BRAVE_ONE_ENTER_TOC_PB_H').
-define('M_BRAVE_ONE_ENTER_TOC_PB_H', true).
-record(m_brave_one_enter_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'none' | 'already_have' | 'function_no_open' | 'not_enough_grid' | 'no_enough_prop' | integer(), % = 99, enum m_brave_one_enter_toc.ENUM
         realId                 :: integer(),       % = 2, 32 bits
         braveOneData           :: #braveonedata{} | undefined % = 3
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_EXIT_ROOM_LIST_TOS_PB_H').
-define('M_MATCH_SCENE_ROOM_EXIT_ROOM_LIST_TOS_PB_H', true).
-record(m_match_scene_room_exit_room_list_tos,
        {
        }).
-endif.

-ifndef('M_SCENE_PLAYER_REBIRTH_TOS_PB_H').
-define('M_SCENE_PLAYER_REBIRTH_TOS_PB_H', true).
-record(m_scene_player_rebirth_tos,
        {
        }).
-endif.

-ifndef('M_LABA_GET_ADJUST_INFO_TOC_PB_H').
-define('M_LABA_GET_ADJUST_INFO_TOC_PB_H', true).
-record(m_laba_get_adjust_info_toc,
        {data_list = []         :: [integer()] | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('M_SPECIAL_PROP_SPECIAL_PROP_MERGE_TOC_PB_H').
-define('M_SPECIAL_PROP_SPECIAL_PROP_MERGE_TOC_PB_H', true).
-record(m_special_prop_special_prop_merge_toc,
        {prop_id                :: integer(),       % = 1, 32 bits
         result                 :: 'success' | 'fail' | 'no_enough_prop' | 'not_enough_grid' | 'not_authority' | integer() % = 99, enum m_special_prop_special_prop_merge_toc.ENUM
        }).
-endif.

-ifndef('M_ROOM_GET_ROOM_LIST_TOS_PB_H').
-define('M_ROOM_GET_ROOM_LIST_TOS_PB_H', true).
-record(m_room_get_room_list_tos,
        {type                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_RECRUIT_TOC_PB_H').
-define('M_MATCH_SCENE_ROOM_RECRUIT_TOC_PB_H', true).
-record(m_match_scene_room_recruit_toc,
        {result                 :: 'success' | 'fail' | 'time_limit' | 'none' | 'no_condition' | integer(), % = 1, enum m_match_scene_room_recruit_toc.ENUM
         limit_time             :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_NOTICE_PLAYER_LEAVE_TOC_PB_H').
-define('M_SHI_SHI_ROOM_NOTICE_PLAYER_LEAVE_TOC_PB_H', true).
-record(m_shi_shi_room_notice_player_leave_toc,
        {pos_id                 :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MAIL_DELETE_MAIL_TOS_PB_H').
-define('M_MAIL_DELETE_MAIL_TOS_PB_H', true).
-record(m_mail_delete_mail_tos,
        {mail_real_id           :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_CHANGE_NAME_TOS_PB_H').
-define('M_PLAYER_CHANGE_NAME_TOS_PB_H', true).
-record(m_player_change_name_tos,
        {name                   :: iodata()         % = 1
        }).
-endif.

-ifndef('M_WHEEL_BALANCE_TOC_PB_H').
-define('M_WHEEL_BALANCE_TOC_PB_H', true).
-record(m_wheel_balance_toc,
        {type                   :: non_neg_integer(), % = 1, 32 bits
         award_list = []        :: [#wheelcommon{}] | undefined, % = 2
         time_ms                :: non_neg_integer(), % = 3, 32 bits
         left_rank_info = []    :: [#wheelrankinfo{}] | undefined, % = 4
         right_rank_info = []   :: [#wheelrankinfo{}] | undefined % = 5
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_CREATE_ROOM_TOS_PB_H').
-define('M_MATCH_SCENE_ROOM_CREATE_ROOM_TOS_PB_H', true).
-record(m_match_scene_room_create_room_tos,
        {password               :: iodata() | undefined, % = 1
         cost_num               :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('GUESSBOSSRECORD_PB_H').
-define('GUESSBOSSRECORD_PB_H', true).
-record(guessbossrecord,
        {id                     :: integer(),       % = 1, 32 bits
         boss_id                :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MISSION_GUESS_GET_RECORD_TOC_PB_H').
-define('M_MISSION_GUESS_GET_RECORD_TOC_PB_H', true).
-record(m_mission_guess_get_record_toc,
        {guess_boss_record_list = [] :: [#guessbossrecord{}] | undefined % = 1
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_START_TOC_PB_H').
-define('M_MANY_PEOPLE_BOSS_START_TOC_PB_H', true).
-record(m_many_people_boss_start_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'not_enough_number' | 'already_start' | 'no_condition' | integer() % = 1, enum m_many_people_boss_start_toc.ENUM
        }).
-endif.

-ifndef('M_PROMOTE_INVITATION_CODE_TOC_PB_H').
-define('M_PROMOTE_INVITATION_CODE_TOC_PB_H', true).
-record(m_promote_invitation_code_toc,
        {result                 :: 'success' | 'fail' | 'already_get' | 'none' | 'not_authority' | integer() % = 1, enum m_promote_invitation_code_toc.ENUM
        }).
-endif.

-ifndef('M_FIGHT_NOTICE_BIN_DONG_SKILL_TOC.ATTR_CHANGE_PB_H').
-define('M_FIGHT_NOTICE_BIN_DONG_SKILL_TOC.ATTR_CHANGE_PB_H', true).
-record('m_fight_notice_bin_dong_skill_toc.attr_change',
        {scene_monster_id       :: integer(),       % = 1, 32 bits
         destroy_time           :: integer(),       % = 2, 32 bits
         end_time               :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_GET_SHARE_TASK_INFO_TOS_PB_H').
-define('M_PLATFORM_FUNCTION_GET_SHARE_TASK_INFO_TOS_PB_H', true).
-record(m_platform_function_get_share_task_info_tos,
        {show_type              :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SHOP_SHOP_ITEM_TOS_PB_H').
-define('M_SHOP_SHOP_ITEM_TOS_PB_H', true).
-record(m_shop_shop_item_tos,
        {id                     :: integer(),       % = 1, 32 bits
         buy_count              :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_MISSION_SCHEDULE_TOC_PB_H').
-define('M_MISSION_NOTICE_MISSION_SCHEDULE_TOC_PB_H', true).
-record(m_mission_notice_mission_schedule_toc,
        {total_value            :: integer(),       % = 1, 32 bits
         now_value              :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_HERO_UNLOCK_HERO_TOC_PB_H').
-define('M_HERO_UNLOCK_HERO_TOC_PB_H', true).
-record(m_hero_unlock_hero_toc,
        {result                 :: 'success' | 'fail' | 'no_enough_prop' | 'already_have' | integer(), % = 100, enum m_hero_unlock_hero_toc.ENUM
         id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_SHOW_ACTION_NOTICE_TOC_PB_H').
-define('M_SCENE_SHOW_ACTION_NOTICE_TOC_PB_H', true).
-record(m_scene_show_action_notice_toc,
        {player_id              :: integer(),       % = 1, 32 bits
         action_id              :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_TIMES_ADD_TIMES_TOC_PB_H').
-define('M_TIMES_ADD_TIMES_TOC_PB_H', true).
-record(m_times_add_times_toc,
        {result                 :: 'success' | 'need_ingot' | 'need_coin' | 'fail' | 'times_limit' | integer(), % = 1, enum m_times_add_times_toc.ENUM
         times_id               :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SEIZE_TREASURE_GET_EXTRA_AWARD_STATUS_TOS_PB_H').
-define('M_SEIZE_TREASURE_GET_EXTRA_AWARD_STATUS_TOS_PB_H', true).
-record(m_seize_treasure_get_extra_award_status_tos,
        {
        }).
-endif.

-ifndef('M_ROOM_LEAVE_ROOM_TOS_PB_H').
-define('M_ROOM_LEAVE_ROOM_TOS_PB_H', true).
-record(m_room_leave_room_tos,
        {
        }).
-endif.

-ifndef('M_SEVEN_LOGIN_GIVE_AWARD_TOS_PB_H').
-define('M_SEVEN_LOGIN_GIVE_AWARD_TOS_PB_H', true).
-record(m_seven_login_give_award_tos,
        {today                  :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SHEN_LONG_NOTICE_SCENE_SHEN_LONG_STATE_TOC_PB_H').
-define('M_SHEN_LONG_NOTICE_SCENE_SHEN_LONG_STATE_TOC_PB_H', true).
-record(m_shen_long_notice_scene_shen_long_state_toc,
        {state                  :: integer(),       % = 1, 32 bits
         type                   :: integer() | undefined, % = 2, 32 bits
         close_time             :: integer() | undefined, % = 3, 32 bits
         player_name            :: iodata() | undefined, % = 4
         player_id              :: integer() | undefined % = 5, 32 bits
        }).
-endif.

-ifndef('PROMOTEINFO_PB_H').
-define('PROMOTEINFO_PB_H', true).
-record(promoteinfo,
        {tier_id                :: integer(),       % = 1, 32 bits
         number                 :: integer(),       % = 2, 32 bits
         mana                   :: integer(),       % = 3, 32 bits
         vip_exp                :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_ACTIVITY_RESTART_ALL_ACTIVITY_TOC_PB_H').
-define('M_ACTIVITY_RESTART_ALL_ACTIVITY_TOC_PB_H', true).
-record(m_activity_restart_all_activity_toc,
        {activity_data = []     :: [#activity_data{}] | undefined % = 1
        }).
-endif.

-ifndef('M_ONE_VS_ONE_GET_ROOM_LIST_TOS_PB_H').
-define('M_ONE_VS_ONE_GET_ROOM_LIST_TOS_PB_H', true).
-record(m_one_vs_one_get_room_list_tos,
        {type                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_GET_MONSTER_LIST_TOS_PB_H').
-define('M_SCENE_GET_MONSTER_LIST_TOS_PB_H', true).
-record(m_scene_get_monster_list_tos,
        {
        }).
-endif.

-ifndef('M_TASK_BOUNTY_REFRESH_TOS_PB_H').
-define('M_TASK_BOUNTY_REFRESH_TOS_PB_H', true).
-record(m_task_bounty_refresh_tos,
        {
        }).
-endif.

-ifndef('M_VIDEO_GET_AWARD_TOS_PB_H').
-define('M_VIDEO_GET_AWARD_TOS_PB_H', true).
-record(m_video_get_award_tos,
        {id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_VISITOR_BINDING_TOC_PB_H').
-define('M_PLAYER_VISITOR_BINDING_TOC_PB_H', true).
-record(m_player_visitor_binding_toc,
        {result                 :: 'success' | 'not_a_visitor' | 'binding_same_acc_id' | 'not_allowed_to_binding' | 'player_not_exists' | 'unknown' | integer(), % = 1, enum m_player_visitor_binding_toc.ENUM
         channel                :: iodata()         % = 2
        }).
-endif.

-ifndef('M_LOGIN_CREATE_ROLE_TOS_PB_H').
-define('M_LOGIN_CREATE_ROLE_TOS_PB_H', true).
-record(m_login_create_role_tos,
        {server_id              :: iodata(),        % = 1
         acc_id                 :: iodata(),        % = 2
         nickname               :: iodata(),        % = 3
         sex                    :: integer(),       % = 4, 32 bits
         from                   :: iodata(),        % = 5
         extra                  :: iodata(),        % = 6
         friend_code            :: iodata()         % = 7
        }).
-endif.

-ifndef('MAILSIMPLE_INFO_PB_H').
-define('MAILSIMPLE_INFO_PB_H', true).
-record(mailsimple_info,
        {mail_real_id           :: integer(),       % = 1, 32 bits
         mail_id                :: integer(),       % = 2, 32 bits
         title_name             :: iodata(),        % = 3
         state                  :: integer(),       % = 4, 32 bits
         is_attach              :: integer(),       % = 5, 32 bits
         valid_time             :: integer(),       % = 9, 32 bits
         create_time            :: integer()        % = 10, 32 bits
        }).
-endif.

-ifndef('M_MAIL_ADD_MAIL_TOC_PB_H').
-define('M_MAIL_ADD_MAIL_TOC_PB_H', true).
-record(m_mail_add_mail_toc,
        {mail_simple_info = []  :: [#mailsimple_info{}] | undefined % = 1
        }).
-endif.

-ifndef('M_BRAVE_ONE_READY_START_TOC_PB_H').
-define('M_BRAVE_ONE_READY_START_TOC_PB_H', true).
-record(m_brave_one_ready_start_toc,
        {start_time             :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_JOIN_ROOM_TOS_PB_H').
-define('M_SHI_SHI_ROOM_JOIN_ROOM_TOS_PB_H', true).
-record(m_shi_shi_room_join_room_tos,
        {room_id                :: integer(),       % = 1, 32 bits
         password               :: iodata(),        % = 2
         invitation_code        :: iodata()         % = 3
        }).
-endif.

-ifndef('M_FIGHT_BLIND_BOX_REWARD_TOC.BLINDBOXREWARD_PB_H').
-define('M_FIGHT_BLIND_BOX_REWARD_TOC.BLINDBOXREWARD_PB_H', true).
-record('m_fight_blind_box_reward_toc.blindboxreward',
        {player_id              :: integer(),       % = 1, 32 bits
         model_head             :: #modelheadfigure{}, % = 2
         grand_price            :: integer(),       % = 3, 32 bits
         award_list = []        :: [#prop{}] | undefined % = 4
        }).
-endif.

-ifndef('CLIENTDATA_PB_H').
-define('CLIENTDATA_PB_H', true).
-record(clientdata,
        {id                     :: iodata(),        % = 1
         value                  :: iodata()         % = 2
        }).
-endif.

-ifndef('M_SCENE_NOTICE_INIT_TIME_EVENT_LIST_TOC_PB_H').
-define('M_SCENE_NOTICE_INIT_TIME_EVENT_LIST_TOC_PB_H', true).
-record(m_scene_notice_init_time_event_list_toc,
        {is_sleep               :: integer(),       % = 1, 32 bits
         sleep_time             :: integer(),       % = 2, 32 bits
         time_event_list = []   :: [#timeevent{}] | undefined % = 3
        }).
-endif.

-ifndef('M_PLAYER_COLLECT_DELAY_REWARDS_TOS_PB_H').
-define('M_PLAYER_COLLECT_DELAY_REWARDS_TOS_PB_H', true).
-record(m_player_collect_delay_rewards_tos,
        {type                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('HEROVERSUSBOSSRECORD_PB_H').
-define('HEROVERSUSBOSSRECORD_PB_H', true).
-record(heroversusbossrecord,
        {hero_id                :: integer(),       % = 1, 32 bits
         monster_id             :: integer(),       % = 2, 32 bits
         winner                 :: integer(),       % = 3, 32 bits
         timestamp              :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_GIFT_GIFT_MAIL_RECORD_TOS_PB_H').
-define('M_GIFT_GIFT_MAIL_RECORD_TOS_PB_H', true).
-record(m_gift_gift_mail_record_tos,
        {
        }).
-endif.

-ifndef('M_TONGXINGZHENG_TASK_INFO_NOTICE_TOC_PB_H').
-define('M_TONGXINGZHENG_TASK_INFO_NOTICE_TOC_PB_H', true).
-record(m_tongxingzheng_task_info_notice_toc,
        {day                    :: integer() | undefined, % = 1, 32 bits
         daily_tasks = []       :: [#taskinfo{}] | undefined, % = 2
         month_tasks = []       :: [#taskinfo{}] | undefined, % = 3
         time                   :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_GIFT_CODE_GIFT_CODE_TOC_PB_H').
-define('M_GIFT_CODE_GIFT_CODE_TOC_PB_H', true).
-record(m_gift_code_gift_code_toc,
        {result                 :: 'success' | 'fail' | 'function_no_open' | 'not_enough_grid' | 'already_get' | 'too_quick' | 'expire' | 'vip_level_limit' | 'level_limit' | 'not_exists' | integer(), % = 1, enum m_gift_code_gift_code_toc.ENUM
         item_list = []         :: [#prop{}] | undefined % = 2
        }).
-endif.

-ifndef('M_ROOM_NOTICE_PLAYER_READY_TOC_PB_H').
-define('M_ROOM_NOTICE_PLAYER_READY_TOC_PB_H', true).
-record(m_room_notice_player_ready_toc,
        {playerid               :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_NOTICE_RANK_TOC_PB_H').
-define('M_MATCH_SCENE_NOTICE_RANK_TOC_PB_H', true).
-record(m_match_scene_notice_rank_toc,
        {rank_list = []         :: [#matchscenerank{}] | undefined % = 1
        }).
-endif.

-ifndef('WHEELRECORD.WHEELIDRECORD_PB_H').
-define('WHEELRECORD.WHEELIDRECORD_PB_H', true).
-record('wheelrecord.wheelidrecord',
        {id                     :: non_neg_integer(), % = 1, 32 bits
         value                  :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('WHEELRECORD_PB_H').
-define('WHEELRECORD_PB_H', true).
-record(wheelrecord,
        {u_id                   :: non_neg_integer(), % = 1, 32 bits
         result_id              :: non_neg_integer() | undefined, % = 2, 32 bits
         wheel_id_record_list = [] :: [#'wheelrecord.wheelidrecord'{}] | undefined % = 3
        }).
-endif.

-ifndef('M_PLAYER_CHAT_GET_PLAYER_LIST_ONLINE_STATUS_TOS_PB_H').
-define('M_PLAYER_CHAT_GET_PLAYER_LIST_ONLINE_STATUS_TOS_PB_H', true).
-record(m_player_chat_get_player_list_online_status_tos,
        {player_id_list = []    :: [integer()] | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_EVENT_DO_LABA_TOC_PB_H').
-define('M_SCENE_EVENT_DO_LABA_TOC_PB_H', true).
-record(m_scene_event_do_laba_toc,
        {id                     :: integer(),       % = 2, 32 bits
         prop_list = []         :: [#prop{}] | undefined, % = 3
         result                 :: 'success' | 'not_open' | 'failure' | 'no_enough_prop' | integer() % = 4, enum m_scene_event_do_laba_toc.Result
        }).
-endif.

-ifndef('M_MISSION_LUCKY_BOSS_BET_RESET_TOS_PB_H').
-define('M_MISSION_LUCKY_BOSS_BET_RESET_TOS_PB_H', true).
-record(m_mission_lucky_boss_bet_reset_tos,
        {
        }).
-endif.

-ifndef('M_PLAYER_UPDATE_CLIENT_DATA_TOS_PB_H').
-define('M_PLAYER_UPDATE_CLIENT_DATA_TOS_PB_H', true).
-record(m_player_update_client_data_tos,
        {client_data_list = []  :: [#clientdata{}] | undefined % = 1
        }).
-endif.

-ifndef('M_VERIFY_CODE_GET_MY_SMS_CODE_TOC_PB_H').
-define('M_VERIFY_CODE_GET_MY_SMS_CODE_TOC_PB_H', true).
-record(m_verify_code_get_my_sms_code_toc,
        {sms_code_info = []     :: [#smscodeinfo{}] | undefined % = 1
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_KICK_OUT_PLAYER_TOS_PB_H').
-define('M_MANY_PEOPLE_BOSS_KICK_OUT_PLAYER_TOS_PB_H', true).
-record(m_many_people_boss_kick_out_player_tos,
        {pos_id                 :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_VIDEO_GET_AWARD_TOC_PB_H').
-define('M_VIDEO_GET_AWARD_TOC_PB_H', true).
-record(m_video_get_award_toc,
        {result                 :: 'success' | 'fail' | 'times_limit' | integer(), % = 1, enum m_video_get_award_toc.ENUM
         id                     :: integer(),       % = 2, 32 bits
         award_list = []        :: [#prop{}] | undefined % = 3
        }).
-endif.

-ifndef('M_PLAYER_WORLD_TREE_AWARD_TOC_PB_H').
-define('M_PLAYER_WORLD_TREE_AWARD_TOC_PB_H', true).
-record(m_player_world_tree_award_toc,
        {result                 :: 'success' | 'fail' | 'times_limit' | integer(), % = 1, enum m_player_world_tree_award_toc.RESULT
         prop_list = []         :: [#prop{}] | undefined % = 2
        }).
-endif.

-ifndef('M_TONGXINGZHENG_PURCHASE_UNLOCK_TOS_PB_H').
-define('M_TONGXINGZHENG_PURCHASE_UNLOCK_TOS_PB_H', true).
-record(m_tongxingzheng_purchase_unlock_tos,
        {type                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('ONEONONEDEFENDERRESULT_PB_H').
-define('ONEONONEDEFENDERRESULT_PB_H', true).
-record(oneononedefenderresult,
        {defender_id            :: integer(),       % = 1, 32 bits
         defender_type          :: integer(),       % = 2, 32 bits
         hp                     :: non_neg_integer(), % = 3, 32 bits
         hurt                   :: non_neg_integer(), % = 4, 32 bits
         type                   :: 'normal' | 'dodge' | 'crit' | integer(), % = 5, enum OneOnOneDefenderResult.ENUM
         x                      :: integer(),       % = 6, 32 bits
         y                      :: integer(),       % = 7, 32 bits
         buff_list = []         :: [#buff{}] | undefined, % = 8
         effect_list = []       :: [#effect{}] | undefined, % = 9
         hurt_section_list = [] :: [#hurtsection{}] | undefined, % = 10
         total_mano             :: integer(),       % = 11, 32 bits
         all_total_mano         :: integer(),       % = 12, 32 bits
         beat_times             :: integer(),       % = 13, 32 bits
         mano_award             :: integer(),       % = 14, 32 bits
         exp                    :: integer(),       % = 17, 32 bits
         special_event          :: integer(),       % = 18, 32 bits
         dizzy_close_time       :: integer(),       % = 19, 32 bits
         award_player_id        :: integer(),       % = 20, 32 bits
         timestamp              :: integer()        % = 21, 32 bits
        }).
-endif.

-ifndef('M_ROOM_ENTER_ROOM_TOS_PB_H').
-define('M_ROOM_ENTER_ROOM_TOS_PB_H', true).
-record(m_room_enter_room_tos,
        {type                   :: integer(),       % = 1, 32 bits
         room_id                :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SCENE_CHALLENGE_BOSS_TOS_PB_H').
-define('M_SCENE_CHALLENGE_BOSS_TOS_PB_H', true).
-record(m_scene_challenge_boss_tos,
        {
        }).
-endif.

-ifndef('M_PLAYER_ADJUST_TOS_PB_H').
-define('M_PLAYER_ADJUST_TOS_PB_H', true).
-record(m_player_adjust_tos,
        {list = []              :: [#'m_player_adjust_tos.attr_change'{}] | undefined % = 1
        }).
-endif.

-ifndef('M_SCENE_NOTICE_TIME_STOP_TOC_PB_H').
-define('M_SCENE_NOTICE_TIME_STOP_TOC_PB_H', true).
-record(m_scene_notice_time_stop_toc,
        {type                   :: integer(),       % = 1, 32 bits
         params = []            :: [integer()] | undefined, % = 2, 32 bits
         time                   :: integer(),       % = 3, 32 bits
         start_time             :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_FANPAI_TOS_PB_H').
-define('M_SCENE_NOTICE_FANPAI_TOS_PB_H', true).
-record(m_scene_notice_fanpai_tos,
        {id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_QUERY_PLAYER_POS_TOC_PB_H').
-define('M_SCENE_QUERY_PLAYER_POS_TOC_PB_H', true).
-record(m_scene_query_player_pos_toc,
        {player_id              :: integer(),       % = 1, 32 bits
         x                      :: integer(),       % = 2, 32 bits
         y                      :: integer(),       % = 3, 32 bits
         type                   :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_SEIZE_TREASURE_GET_EXTRA_AWARD_STATUS_TOC_PB_H').
-define('M_SEIZE_TREASURE_GET_EXTRA_AWARD_STATUS_TOC_PB_H', true).
-record(m_seize_treasure_get_extra_award_status_toc,
        {result                 :: 'success' | 'failure' | 'unknown' | integer(), % = 1, enum m_seize_treasure_get_extra_award_status_toc.ENUM
         status                 :: iodata() | undefined % = 2
        }).
-endif.

-ifndef('M_SCENE_NOTICE_MONSTER_TELEPORT_TOC_PB_H').
-define('M_SCENE_NOTICE_MONSTER_TELEPORT_TOC_PB_H', true).
-record(m_scene_notice_monster_teleport_toc,
        {scene_monster_id       :: integer(),       % = 1, 32 bits
         x                      :: integer(),       % = 2, 32 bits
         y                      :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_NOTICE_MATCH_NUM_CHANGE_TOC_PB_H').
-define('M_MATCH_SCENE_NOTICE_MATCH_NUM_CHANGE_TOC_PB_H', true).
-record(m_match_scene_notice_match_num_change_toc,
        {id                     :: integer(),       % = 1, 32 bits
         num                    :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_NOTICE_SHARE_COUNT_TOC_PB_H').
-define('M_PLATFORM_FUNCTION_NOTICE_SHARE_COUNT_TOC_PB_H', true).
-record(m_platform_function_notice_share_count_toc,
        {share_count            :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_WHEEL_GET_RECORD_TOS_PB_H').
-define('M_WHEEL_GET_RECORD_TOS_PB_H', true).
-record(m_wheel_get_record_tos,
        {type                   :: non_neg_integer() % = 1, 32 bits
        }).
-endif.

-ifndef('M_STEP_BY_STEP_SY_GET_AWARD_TOS_PB_H').
-define('M_STEP_BY_STEP_SY_GET_AWARD_TOS_PB_H', true).
-record(m_step_by_step_sy_get_award_tos,
        {
        }).
-endif.

-ifndef('M_PLAYER_LEVEL_UPGRADE_TOC_PB_H').
-define('M_PLAYER_LEVEL_UPGRADE_TOC_PB_H', true).
-record(m_player_level_upgrade_toc,
        {result                 :: 'success' | 'fail' | 'no_enough_prop' | 'not_authority' | integer(), % = 100, enum m_player_level_upgrade_toc.ENUM
         old_level              :: integer(),       % = 1, 32 bits
         new_level              :: integer(),       % = 2, 32 bits
         prop_list = []         :: [#prop{}] | undefined % = 3
        }).
-endif.

-ifndef('M_LABA_GET_ADJUST_INFO_TOS_PB_H').
-define('M_LABA_GET_ADJUST_INFO_TOS_PB_H', true).
-record(m_laba_get_adjust_info_tos,
        {id                     :: integer(),       % = 1, 32 bits
         cost_rate              :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_WHEEL_NOTICE_BET_TOC_PB_H').
-define('M_WHEEL_NOTICE_BET_TOC_PB_H', true).
-record(m_wheel_notice_bet_toc,
        {player_id              :: non_neg_integer(), % = 1, 32 bits
         bet_id                 :: non_neg_integer(), % = 2, 32 bits
         num                    :: non_neg_integer(), % = 3, 32 bits
         total_num              :: non_neg_integer(), % = 4, 32 bits
         my_total_num           :: non_neg_integer() % = 5, 32 bits
        }).
-endif.

-ifndef('M_SCENE_EVENT_DO_LABA_TOS_PB_H').
-define('M_SCENE_EVENT_DO_LABA_TOS_PB_H', true).
-record(m_scene_event_do_laba_tos,
        {
        }).
-endif.

-ifndef('M_FIGHT_NOTICE_FIGHT_WAIT_SKILL_TOC_PB_H').
-define('M_FIGHT_NOTICE_FIGHT_WAIT_SKILL_TOC_PB_H', true).
-record(m_fight_notice_fight_wait_skill_toc,
        {obj_type               :: integer(),       % = 1, 32 bits
         obj_id                 :: integer(),       % = 2, 32 bits
         skill_id               :: integer(),       % = 3, 32 bits
         end_time               :: integer(),       % = 4, 32 bits
         wait_skill = []        :: [#waitskill{}] | undefined % = 5
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_NOTICE_PLAYER_LEAVE_TOC_PB_H').
-define('M_MANY_PEOPLE_BOSS_NOTICE_PLAYER_LEAVE_TOC_PB_H', true).
-record(m_many_people_boss_notice_player_leave_toc,
        {pos_id                 :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_VERIFY_CODE_GET_AREA_CODE_TOC_PB_H').
-define('M_VERIFY_CODE_GET_AREA_CODE_TOC_PB_H', true).
-record(m_verify_code_get_area_code_toc,
        {area_code_region = []  :: [#areacoderegion{}] | undefined % = 1
        }).
-endif.

-ifndef('M_MISSION_EXIT_MISSION_TOS_PB_H').
-define('M_MISSION_EXIT_MISSION_TOS_PB_H', true).
-record(m_mission_exit_mission_tos,
        {
        }).
-endif.

-ifndef('M_ROOM_PUSH_FRAME_INFO_TOC_PB_H').
-define('M_ROOM_PUSH_FRAME_INFO_TOC_PB_H', true).
-record(m_room_push_frame_info_toc,
        {frameDatas = []        :: [#'m_room_push_frame_info_toc.frameinfo'{}] | undefined % = 1
        }).
-endif.

-ifndef('M_MISSION_GET_HERO_VERSUS_BOSS_RECORD_TOC_PB_H').
-define('M_MISSION_GET_HERO_VERSUS_BOSS_RECORD_TOC_PB_H', true).
-record(m_mission_get_hero_versus_boss_record_toc,
        {hero_versus_boss_record = [] :: [#heroversusbossrecord{}] | undefined % = 1
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_NOTICE_PLAYER_READY_TOC_PB_H').
-define('M_SHI_SHI_ROOM_NOTICE_PLAYER_READY_TOC_PB_H', true).
-record(m_shi_shi_room_notice_player_ready_toc,
        {pos_id                 :: integer(),       % = 1, 32 bits
         is_ready               :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SHOP_NOTICE_SHOP_STATE_TOC_PB_H').
-define('M_SHOP_NOTICE_SHOP_STATE_TOC_PB_H', true).
-record(m_shop_notice_shop_state_toc,
        {id                     :: integer(),       % = 1, 32 bits
         state                  :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_DEBUG_DEBUG_TOS_PB_H').
-define('M_DEBUG_DEBUG_TOS_PB_H', true).
-record(m_debug_debug_tos,
        {type                   :: integer(),       % = 1, 32 bits
         param_list = []        :: [integer()] | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('M_LABA_SPIN2_TOS_PB_H').
-define('M_LABA_SPIN2_TOS_PB_H', true).
-record(m_laba_spin2_tos,
        {id                     :: integer(),       % = 1, 32 bits
         num                    :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_GIFT_GIVE_GIFT_TOS_PB_H').
-define('M_GIFT_GIVE_GIFT_TOS_PB_H', true).
-record(m_gift_give_gift_tos,
        {player_id              :: non_neg_integer(), % = 1, 32 bits
         prop_list = []         :: [#prop{}] | undefined, % = 2
         code                   :: iodata()         % = 3
        }).
-endif.

-ifndef('M_STEP_BY_STEP_SY_FIGHT_TOS_PB_H').
-define('M_STEP_BY_STEP_SY_FIGHT_TOS_PB_H', true).
-record(m_step_by_step_sy_fight_tos,
        {
        }).
-endif.

-ifndef('M_DAILY_TASK_GET_AWARD_TOS_PB_H').
-define('M_DAILY_TASK_GET_AWARD_TOS_PB_H', true).
-record(m_daily_task_get_award_tos,
        {id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_CHARGE_CHARGE_TOS_PB_H').
-define('M_CHARGE_CHARGE_TOS_PB_H', true).
-record(m_charge_charge_tos,
        {item_id                :: integer(),       % = 3, 32 bits
         count                  :: integer(),       % = 4, 32 bits
         charge_type_idx        :: integer() | undefined % = 5, 32 bits
        }).
-endif.

-ifndef('M_SCENE_PLAYER_KUANGBAO_INFO_NOTICE_TOC_PB_H').
-define('M_SCENE_PLAYER_KUANGBAO_INFO_NOTICE_TOC_PB_H', true).
-record(m_scene_player_kuangbao_info_notice_toc,
        {player_id              :: integer(),       % = 1, 32 bits
         time                   :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_CARD_NOTICE_CARD_UPDATE_TOC_PB_H').
-define('M_CARD_NOTICE_CARD_UPDATE_TOC_PB_H', true).
-record(m_card_notice_card_update_toc,
        {card_id                :: integer(),       % = 1, 32 bits
         num                    :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_PARTICIPATE_IN_TOC_PB_H').
-define('M_MANY_PEOPLE_BOSS_PARTICIPATE_IN_TOC_PB_H', true).
-record(m_many_people_boss_participate_in_toc,
        {result                 :: 'success' | 'fail' | 'not_enough_mana' | integer(), % = 1, enum m_many_people_boss_participate_in_toc.ENUM
         is_participate_in      :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_LEICHONG_INFO_QUERY_TOS_PB_H').
-define('M_LEICHONG_INFO_QUERY_TOS_PB_H', true).
-record(m_leichong_info_query_tos,
        {
        }).
-endif.

-ifndef('M_PROP_USE_ITEM_TOC_PB_H').
-define('M_PROP_USE_ITEM_TOC_PB_H', true).
-record(m_prop_use_item_toc,
        {item_id                :: integer(),       % = 1, 32 bits
         num                    :: integer(),       % = 2, 32 bits
         result                 :: 'success' | 'fail' | 'no_condition' | integer(), % = 3, enum m_prop_use_item_toc.ENUM
         prop_list = []         :: [#prop{}] | undefined % = 4
        }).
-endif.

-ifndef('M_HERO_NOTICE_HERO_UNLOCK_PARTS_TOC_PB_H').
-define('M_HERO_NOTICE_HERO_UNLOCK_PARTS_TOC_PB_H', true).
-record(m_hero_notice_hero_unlock_parts_toc,
        {parts_id               :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_EVERYDAY_SIGN_EVERYDAY_SIGN_TOS_PB_H').
-define('M_EVERYDAY_SIGN_EVERYDAY_SIGN_TOS_PB_H', true).
-record(m_everyday_sign_everyday_sign_tos,
        {today                  :: integer(),       % = 1, 32 bits
         round                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_PROP_USE_ITEM_TOS_PB_H').
-define('M_PROP_USE_ITEM_TOS_PB_H', true).
-record(m_prop_use_item_tos,
        {item_id                :: integer(),       % = 1, 32 bits
         num                    :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_LUCKY_BOSS_FIGHT_TOC_PB_H').
-define('M_MISSION_NOTICE_LUCKY_BOSS_FIGHT_TOC_PB_H', true).
-record(m_mission_notice_lucky_boss_fight_toc,
        {attacker_id            :: integer(),       % = 1, 32 bits
         attacker_type          :: integer(),       % = 2, 32 bits
         x                      :: integer(),       % = 3, 32 bits
         y                      :: integer(),       % = 4, 32 bits
         dir                    :: integer(),       % = 5, 32 bits
         target_id              :: integer(),       % = 6, 32 bits
         target_type            :: integer(),       % = 7, 32 bits
         skill_id               :: integer(),       % = 8, 32 bits
         skill_level            :: integer(),       % = 9, 32 bits
         defender_result_list = [] :: [#oneononedefenderresult{}] | undefined, % = 13
         anger                  :: integer(),       % = 18, 32 bits
         timestamp              :: integer()        % = 19, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_MONSTER_LEAVE_TOC_PB_H').
-define('M_SCENE_NOTICE_MONSTER_LEAVE_TOC_PB_H', true).
-record(m_scene_notice_monster_leave_toc,
        {scene_monster_id       :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_KICK_OUT_PLAYER_TOS_PB_H').
-define('M_SHI_SHI_ROOM_KICK_OUT_PLAYER_TOS_PB_H', true).
-record(m_shi_shi_room_kick_out_player_tos,
        {pos_id                 :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_TURN_TABLE_GET_AWARD_TOS_PB_H').
-define('M_TURN_TABLE_GET_AWARD_TOS_PB_H', true).
-record(m_turn_table_get_award_tos,
        {
        }).
-endif.

-ifndef('M_WHEEL_BET_TOC_PB_H').
-define('M_WHEEL_BET_TOC_PB_H', true).
-record(m_wheel_bet_toc,
        {result                 :: 'success' | 'fail' | 'function_no_open' | 'not_authority' | 'no_enough_prop' | integer(), % = 1, enum m_wheel_bet_toc.ENUM
         bet_id                 :: non_neg_integer(), % = 2, 32 bits
         num                    :: non_neg_integer() % = 3, 32 bits
        }).
-endif.

-ifndef('M_BRAVE_ONE_ENTER_TOS_PB_H').
-define('M_BRAVE_ONE_ENTER_TOS_PB_H', true).
-record(m_brave_one_enter_tos,
        {realId                 :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('ATTRDATA_PB_H').
-define('ATTRDATA_PB_H', true).
-record(attrdata,
        {id                     :: integer(),       % = 1, 32 bits
         value                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_GET_PLAYER_ATTR_TOC_PB_H').
-define('M_PLAYER_GET_PLAYER_ATTR_TOC_PB_H', true).
-record(m_player_get_player_attr_toc,
        {player_id              :: integer(),       % = 1, 32 bits
         attr_data = []         :: [#attrdata{}] | undefined % = 2
        }).
-endif.

-ifndef('M_SCENE_EVENT_QUERY_BALLS_DATA_TOS_PB_H').
-define('M_SCENE_EVENT_QUERY_BALLS_DATA_TOS_PB_H', true).
-record(m_scene_event_query_balls_data_tos,
        {
        }).
-endif.

-ifndef('M_HERO_CHARGE_HERO_PARTS_TOS_PB_H').
-define('M_HERO_CHARGE_HERO_PARTS_TOS_PB_H', true).
-record(m_hero_charge_hero_parts_tos,
        {id                     :: integer(),       % = 1, 32 bits
         arms                   :: integer(),       % = 2, 32 bits
         ornaments              :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_BRAVE_ONE_NOTICE_FIGHT_SCENE_TOC_PB_H').
-define('M_BRAVE_ONE_NOTICE_FIGHT_SCENE_TOC_PB_H', true).
-record(m_brave_one_notice_fight_scene_toc,
        {braveOneData           :: #braveonedata{}  % = 2
        }).
-endif.

-ifndef('M_SCENE_EVENT_NOTICE_MONEY_THREE_RESULT_TOC.RESULTINFO_PB_H').
-define('M_SCENE_EVENT_NOTICE_MONEY_THREE_RESULT_TOC.RESULTINFO_PB_H', true).
-record('m_scene_event_notice_money_three_result_toc.resultinfo',
        {player_info            :: #playerbaseinfo{}, % = 1
         prop_list = []         :: [#prop{}] | undefined % = 2
        }).
-endif.

-ifndef('M_SCENE_EVENT_NOTICE_MONEY_THREE_RESULT_TOC_PB_H').
-define('M_SCENE_EVENT_NOTICE_MONEY_THREE_RESULT_TOC_PB_H', true).
-record(m_scene_event_notice_money_three_result_toc,
        {results = []           :: [#'m_scene_event_notice_money_three_result_toc.resultinfo'{}] | undefined % = 1
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_LEAVE_ROOM_TOS_PB_H').
-define('M_SHI_SHI_ROOM_LEAVE_ROOM_TOS_PB_H', true).
-record(m_shi_shi_room_leave_room_tos,
        {
        }).
-endif.

-ifndef('M_TONGXINGZHENG_TASK_MONTH_REWARD_COLLECT_TOS_PB_H').
-define('M_TONGXINGZHENG_TASK_MONTH_REWARD_COLLECT_TOS_PB_H', true).
-record(m_tongxingzheng_task_month_reward_collect_tos,
        {id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MISSION_HERO_VERSUS_BOSS_BET_RESET_TOS_PB_H').
-define('M_MISSION_HERO_VERSUS_BOSS_BET_RESET_TOS_PB_H', true).
-record(m_mission_hero_versus_boss_bet_reset_tos,
        {
        }).
-endif.

-ifndef('M_SCENE_TRANSMIT_TOS_PB_H').
-define('M_SCENE_TRANSMIT_TOS_PB_H', true).
-record(m_scene_transmit_tos,
        {scene_id               :: integer(),       % = 1, 32 bits
         x                      :: integer(),       % = 2, 32 bits
         y                      :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_PROP_SELL_ITEM_TOC_PB_H').
-define('M_PROP_SELL_ITEM_TOC_PB_H', true).
-record(m_prop_sell_item_toc,
        {item_id                :: integer(),       % = 1, 32 bits
         num                    :: integer(),       % = 2, 32 bits
         result                 :: 'success' | 'fail' | integer(), % = 3, enum m_prop_sell_item_toc.ENUM
         prop_list = []         :: [#prop{}] | undefined % = 4
        }).
-endif.

-ifndef('M_SCENE_SEND_MSG_TOS_PB_H').
-define('M_SCENE_SEND_MSG_TOS_PB_H', true).
-record(m_scene_send_msg_tos,
        {type                   :: integer(),       % = 1, 32 bits
         id                     :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_PLAYER_TELEPORT_TOC_PB_H').
-define('M_SCENE_NOTICE_PLAYER_TELEPORT_TOC_PB_H', true).
-record(m_scene_notice_player_teleport_toc,
        {player_id              :: integer(),       % = 1, 32 bits
         x                      :: integer(),       % = 2, 32 bits
         y                      :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_FIGHT_WAIT_SKILL_TRIGGER_TOS_PB_H').
-define('M_FIGHT_WAIT_SKILL_TRIGGER_TOS_PB_H', true).
-record(m_fight_wait_skill_trigger_tos,
        {skill_id               :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('CARDBOOK_PB_H').
-define('CARDBOOK_PB_H', true).
-record(cardbook,
        {card_book_id           :: integer(),       % = 1, 32 bits
         state                  :: integer(),       % = 2, 32 bits
         card_title_list = []   :: [#cardtitle{}] | undefined % = 3
        }).
-endif.

-ifndef('PLAYERPROMOTEDATA_PB_H').
-define('PLAYERPROMOTEDATA_PB_H', true).
-record(playerpromotedata,
        {times                  :: integer(),       % = 1, 32 bits
         record_red             :: integer(),       % = 2, 32 bits
         promote_info_list = [] :: [#promoteinfo{}] | undefined % = 3
        }).
-endif.

-ifndef('SYSCOMMONDATA_PB_H').
-define('SYSCOMMONDATA_PB_H', true).
-record(syscommondata,
        {id                     :: integer(),       % = 1, 32 bits
         state                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_INIT_PLAYER_DATA_TOC_PB_H').
-define('M_PLAYER_INIT_PLAYER_DATA_TOC_PB_H', true).
-record(m_player_init_player_data_toc,
        {role_data              :: #roledata{},     % = 1
         server_time            :: iodata(),        % = 2
         fun_id_list = []       :: [integer()] | undefined, % = 3, 32 bits
         prop_list = []         :: [#prop{}] | undefined, % = 4
         times_list = []        :: [#times{}] | undefined, % = 5
         passed_mission_list = [] :: [#passed_mission{}] | undefined, % = 6
         client_data_list = []  :: [#clientdata{}] | undefined, % = 7
         mail_real_id = []      :: [integer()] | undefined, % = 8, 32 bits
         award_fun_id_list = [] :: [integer()] | undefined, % = 9, 32 bits
         red_fun_id_list = []   :: [integer()] | undefined, % = 10, 32 bits
         activity_data = []     :: [#activity_data{}] | undefined, % = 11
         achievement_data_list = [] :: [#achievementdata{}] | undefined, % = 12
         first_charge_state     :: integer(),       % = 13, 32 bits
         vip_data               :: #vipdata{},      % = 14
         seven_login_data       :: #sevenlogindata{}, % = 15
         everyday_sign_data     :: #everydaysigndata{}, % = 17
         open_server_time       :: integer(),       % = 18, 32 bits
         collect_state          :: integer(),       % = 19, 32 bits
         share_count            :: integer(),       % = 20, 32 bits
         share_friend_data = [] :: [#sharefrienddata{}] | undefined, % = 21
         charge_shop_data = []  :: [#shopdata{}] | undefined, % = 22
         pk_mode                :: integer(),       % = 23, 32 bits
         platform_concern_state :: integer(),       % = 24, 32 bits
         platform_certification_state :: integer(), % = 25, 32 bits
         sysCommonDataList = [] :: [#syscommondata{}] | undefined, % = 26
         task_info              :: #taskinfo{},     % = 28
         player_promote_data    :: #playerpromotedata{}, % = 29
         task_show              :: #taskshow{},     % = 30
         anger                  :: integer(),       % = 31, 32 bits
         invitation_code        :: iodata(),        % = 33
         share_task_award_data_list = [] :: [#sharetaskawarddata{}] | undefined, % = 34
         player_hero            :: #playerhero{},   % = 35
         card_book_list = []    :: [#cardbook{}] | undefined, % = 36
         seize_treasure_type_id :: integer() | undefined, % = 47, 32 bits
         seize_times            :: integer() | undefined, % = 48, 32 bits
         seize_lucky_value      :: integer() | undefined, % = 49, 32 bits
         zhi_gou_completed      :: boolean() | 0 | 1 | undefined, % = 50
         bind_mobile            :: iodata() | undefined, % = 51
         already_give_level     :: non_neg_integer() | undefined, % = 52, 32 bits
         signature              :: iodata() | undefined % = 53
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_SET_IS_ALL_READY_START_TOC_PB_H').
-define('M_MANY_PEOPLE_BOSS_SET_IS_ALL_READY_START_TOC_PB_H', true).
-record(m_many_people_boss_set_is_all_ready_start_toc,
        {is_all_ready_start     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_FIRST_CHARGE_GET_AWARD_TOC_PB_H').
-define('M_FIRST_CHARGE_GET_AWARD_TOC_PB_H', true).
-record(m_first_charge_get_award_toc,
        {result                 :: 'success' | 'fail' | 'not_enough_grid' | 'not_authority' | 'already_get' | integer(), % = 1, enum m_first_charge_get_award_toc.ENUM
         type                   :: integer(),       % = 2, 32 bits
         day                    :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_MISSION_GET_HERO_VERSUS_BOSS_RECORD_TOS_PB_H').
-define('M_MISSION_GET_HERO_VERSUS_BOSS_RECORD_TOS_PB_H', true).
-record(m_mission_get_hero_versus_boss_record_tos,
        {hero_id                :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_SCENE_PLAYER_LEAVE_TOC_PB_H').
-define('M_SCENE_NOTICE_SCENE_PLAYER_LEAVE_TOC_PB_H', true).
-record(m_scene_notice_scene_player_leave_toc,
        {player_id              :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_TONGXINGZHENG_TASK_DAILY_UPDATE_NOTICE_TOC_PB_H').
-define('M_TONGXINGZHENG_TASK_DAILY_UPDATE_NOTICE_TOC_PB_H', true).
-record(m_tongxingzheng_task_daily_update_notice_toc,
        {tasks = []             :: [#taskinfo{}] | undefined % = 1
        }).
-endif.

-ifndef('M_GIFT_CODE_GIFT_CODE_TOS_PB_H').
-define('M_GIFT_CODE_GIFT_CODE_TOS_PB_H', true).
-record(m_gift_code_gift_code_tos,
        {gift_code_id           :: iodata()         % = 1
        }).
-endif.

-ifndef('M_JIANGJINCHI_REWARD_DOUBLE_TOC_PB_H').
-define('M_JIANGJINCHI_REWARD_DOUBLE_TOC_PB_H', true).
-record(m_jiangjinchi_reward_double_toc,
        {result                 :: 'success' | 'fail' | 'not_open' | 'not_chance' | 'error_state' | 'unknown' | integer(), % = 1, enum m_jiangjinchi_reward_double_toc.ENUM
         draw_num               :: integer(),       % = 2, 32 bits
         extra_num              :: integer(),       % = 3, 32 bits
         double_num             :: integer(),       % = 4, 32 bits
         is_can_double          :: boolean() | 0 | 1, % = 5
         doubled_times          :: integer()        % = 6, 32 bits
        }).
-endif.

-ifndef('M_MISSION_BOSS_REBIRTH_TOC_PB_H').
-define('M_MISSION_BOSS_REBIRTH_TOC_PB_H', true).
-record(m_mission_boss_rebirth_toc,
        {result                 :: 'success' | 'fail' | 'already_rebirth' | 'no_enough_prop' | integer(), % = 1, enum m_mission_boss_rebirth_toc.ENUM
         mission_type           :: integer(),       % = 2, 32 bits
         mission_id             :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_CHAT_GET_PLAYER_CHAT_INFO_TOC_PB_H').
-define('M_PLAYER_CHAT_GET_PLAYER_CHAT_INFO_TOC_PB_H', true).
-record(m_player_chat_get_player_chat_info_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'none' | 'no_condition' | integer(), % = 100, enum m_player_chat_get_player_chat_info_toc.ENUM
         signature              :: iodata() | undefined, % = 1
         model_head_figure      :: #modelheadfigure{} | undefined % = 2
        }).
-endif.

-ifndef('M_MAIL_READ_MAIL_TOC_PB_H').
-define('M_MAIL_READ_MAIL_TOC_PB_H', true).
-record(m_mail_read_mail_toc,
        {result                 :: 'success' | 'fail' | integer(), % = 1, enum m_mail_read_mail_toc.ENUM
         mail_info              :: #mail_info{}     % = 2
        }).
-endif.

-ifndef('M_MISSION_CHALLENGE_MISSION_TOC_PB_H').
-define('M_MISSION_CHALLENGE_MISSION_TOC_PB_H', true).
-record(m_mission_challenge_mission_toc,
        {mission_type           :: integer(),       % = 1, 32 bits
         mission_id             :: integer(),       % = 2, 32 bits
         result                 :: 'success' | 'function_no_open' | 'fail' | 'activity_no_open' | 'not_online' | 'times_limit' | 'not_authority' | 'time_limit' | integer() % = 3, enum m_mission_challenge_mission_toc.ENUM
        }).
-endif.

-ifndef('M_WHEEL_GET_BET_RECORD_TOS_PB_H').
-define('M_WHEEL_GET_BET_RECORD_TOS_PB_H', true).
-record(m_wheel_get_bet_record_tos,
        {
        }).
-endif.

-ifndef('M_TASK_GET_AWARD_TOS_PB_H').
-define('M_TASK_GET_AWARD_TOS_PB_H', true).
-record(m_task_get_award_tos,
        {
        }).
-endif.

-ifndef('M_MISSION_GET_AWARD_TOS_PB_H').
-define('M_MISSION_GET_AWARD_TOS_PB_H', true).
-record(m_mission_get_award_tos,
        {type                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_PROP_MERGE_TOS_PB_H').
-define('M_PROP_MERGE_TOS_PB_H', true).
-record(m_prop_merge_tos,
        {id                     :: integer(),       % = 1, 32 bits
         num                    :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SPECIAL_PROP_NOTICE_INIT_DATA_TOC_PB_H').
-define('M_SPECIAL_PROP_NOTICE_INIT_DATA_TOC_PB_H', true).
-record(m_special_prop_notice_init_data_toc,
        {prop_list = []         :: [#specialprop{}] | undefined % = 1
        }).
-endif.

-ifndef('M_SCENE_NOTICE_RANK_EVENT_TOC_PB_H').
-define('M_SCENE_NOTICE_RANK_EVENT_TOC_PB_H', true).
-record(m_scene_notice_rank_event_toc,
        {type                   :: integer(),       % = 1, 32 bits
         value                  :: non_neg_integer(), % = 2, 32 bits
         player_id              :: integer(),       % = 3, 32 bits
         total_value            :: non_neg_integer() % = 4, 32 bits
        }).
-endif.

-ifndef('M_LOGIN_LOGIN_TOS_PB_H').
-define('M_LOGIN_LOGIN_TOS_PB_H', true).
-record(m_login_login_tos,
        {server_id              :: iodata(),        % = 1
         login_type             :: integer(),       % = 2, 32 bits
         ticket                 :: iodata(),        % = 3
         acc_id                 :: iodata(),        % = 4
         pf                     :: iodata(),        % = 5
         platform               :: integer(),       % = 6, 32 bits
         entry                  :: integer(),       % = 7, 32 bits
         qua                    :: iodata(),        % = 8
         time                   :: integer(),       % = 9, 32 bits
         platform_id            :: iodata(),        % = 10
         via                    :: iodata(),        % = 11
         is_gm_login            :: integer(),       % = 12, 32 bits
         gm_account             :: iodata()         % = 13
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_GET_SHARE_FRIEND_GIVE_TOC_PB_H').
-define('M_PLATFORM_FUNCTION_GET_SHARE_FRIEND_GIVE_TOC_PB_H', true).
-record(m_platform_function_get_share_friend_give_toc,
        {result                 :: 'success' | 'fail' | 'not_enough_grid' | 'not_authority' | 'already_have' | integer(), % = 1, enum m_platform_function_get_share_friend_give_toc.ENUM
         id                     :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_TIMES_NOTICE_TIMES_CHANGE_TOC_PB_H').
-define('M_TIMES_NOTICE_TIMES_CHANGE_TOC_PB_H', true).
-record(m_times_notice_times_change_toc,
        {times_list = []        :: [#times{}] | undefined % = 1
        }).
-endif.

-ifndef('M_LEICHONG_INFO_QUERY_TOC.LEICHONG_PB_H').
-define('M_LEICHONG_INFO_QUERY_TOC.LEICHONG_PB_H', true).
-record('m_leichong_info_query_toc.leichong',
        {id                     :: integer(),       % = 1, 32 bits
         done                   :: non_neg_integer(), % = 2, 32 bits
         target                 :: non_neg_integer(), % = 3, 32 bits
         state                  :: integer(),       % = 4, 32 bits
         award_list = []        :: [#prop{}] | undefined % = 5
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_NOTICE_SHARE_FRIEND_TOC_PB_H').
-define('M_PLATFORM_FUNCTION_NOTICE_SHARE_FRIEND_TOC_PB_H', true).
-record(m_platform_function_notice_share_friend_toc,
        {share_friend_data = [] :: [#sharefrienddata{}] | undefined % = 1
        }).
-endif.

-ifndef('SEVENLOGINDICE_PB_H').
-define('SEVENLOGINDICE_PB_H', true).
-record(sevenlogindice,
        {type                   :: integer(),       % = 1, 32 bits
         value                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SEVEN_LOGIN_GIVE_AWARD_TOC_PB_H').
-define('M_SEVEN_LOGIN_GIVE_AWARD_TOC_PB_H', true).
-record(m_seven_login_give_award_toc,
        {result                 :: 'success' | 'fail' | 'function_no_open' | 'not_authority' | 'already_have' | 'not_enough_grid' | integer(), % = 100, enum m_seven_login_give_award_toc.ENUM
         today                  :: integer(),       % = 1, 32 bits
         dice_id                :: integer(),       % = 2, 32 bits
         dice_list = []         :: [#sevenlogindice{}] | undefined % = 3
        }).
-endif.

-ifndef('M_MAIL_GET_MAIL_INFO_TOC_PB_H').
-define('M_MAIL_GET_MAIL_INFO_TOC_PB_H', true).
-record(m_mail_get_mail_info_toc,
        {mail_simple_info = []  :: [#mailsimple_info{}] | undefined % = 1
        }).
-endif.

-ifndef('M_MISSION_GUESS_GET_RECORD_TOS_PB_H').
-define('M_MISSION_GUESS_GET_RECORD_TOS_PB_H', true).
-record(m_mission_guess_get_record_tos,
        {
        }).
-endif.

-ifndef('M_SHOP_SHOP_ITEM_TOC_PB_H').
-define('M_SHOP_SHOP_ITEM_TOC_PB_H', true).
-record(m_shop_shop_item_toc,
        {result                 :: 'success' | 'fail' | 'function_no_open' | 'no_enough_prop' | 'not_enough_grid' | 'times_limit' | 'not_authority' | 'activity_no_open' | integer(), % = 1, enum m_shop_shop_item_toc.ENUM
         id                     :: integer(),       % = 2, 32 bits
         buy_count              :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_SEIZE_TREASURE_GET_EXTRA_AWARD_TOS_PB_H').
-define('M_SEIZE_TREASURE_GET_EXTRA_AWARD_TOS_PB_H', true).
-record(m_seize_treasure_get_extra_award_tos,
        {idx                    :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_NOTICE_PLAYER_FIGHT_START_TOC_PB_H').
-define('M_SHI_SHI_ROOM_NOTICE_PLAYER_FIGHT_START_TOC_PB_H', true).
-record(m_shi_shi_room_notice_player_fight_start_toc,
        {
        }).
-endif.

-ifndef('M_MISSION_LUCKY_BOSS_STATUS_TOS_PB_H').
-define('M_MISSION_LUCKY_BOSS_STATUS_TOS_PB_H', true).
-record(m_mission_lucky_boss_status_tos,
        {operation              :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MISSION_LUCKY_BOSS_BET_RESET_TOC_PB_H').
-define('M_MISSION_LUCKY_BOSS_BET_RESET_TOC_PB_H', true).
-record(m_mission_lucky_boss_bet_reset_toc,
        {result                 :: 'success' | 'failure' | 'unknown' | integer() % = 1, enum m_mission_lucky_boss_bet_reset_toc.ENUM
        }).
-endif.

-ifndef('M_MISSION_EITHER_NOTICE_STATE_TOC_PB_H').
-define('M_MISSION_EITHER_NOTICE_STATE_TOC_PB_H', true).
-record(m_mission_either_notice_state_toc,
        {round                  :: integer(),       % = 1, 32 bits
         type                   :: integer(),       % = 2, 32 bits
         award_value            :: integer(),       % = 3, 32 bits
         end_time               :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_FIGHT_NOTICE_REMOVE_BUFF_TOC_PB_H').
-define('M_FIGHT_NOTICE_REMOVE_BUFF_TOC_PB_H', true).
-record(m_fight_notice_remove_buff_toc,
        {obj_type               :: integer(),       % = 1, 32 bits
         obj_id                 :: integer(),       % = 2, 32 bits
         buff_id_list = []      :: [integer()] | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('M_GIFT_GET_ITEM_MAIL_TOC_PB_H').
-define('M_GIFT_GET_ITEM_MAIL_TOC_PB_H', true).
-record(m_gift_get_item_mail_toc,
        {result                 :: 'success' | 'fail' | 'not_enough_grid' | 'not_authority' | integer(), % = 1, enum m_gift_get_item_mail_toc.ENUM
         mail_real_id_list = [] :: [integer()] | undefined, % = 2, 32 bits
         prop_list = []         :: [#prop{}] | undefined % = 3
        }).
-endif.

-ifndef('M_SCENE_NOTICE_ANGER_CHANGE_TOC_PB_H').
-define('M_SCENE_NOTICE_ANGER_CHANGE_TOC_PB_H', true).
-record(m_scene_notice_anger_change_toc,
        {anger                  :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_GET_INFO_TOS_PB_H').
-define('M_MATCH_SCENE_GET_INFO_TOS_PB_H', true).
-record(m_match_scene_get_info_tos,
        {
        }).
-endif.

-ifndef('M_SCENE_QUERY_PLAYER_POS_TOS_PB_H').
-define('M_SCENE_QUERY_PLAYER_POS_TOS_PB_H', true).
-record(m_scene_query_player_pos_tos,
        {player_id              :: integer(),       % = 1, 32 bits
         type                   :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_ROOM_JOIN_ROOM_TOS_PB_H').
-define('M_MATCH_SCENE_ROOM_JOIN_ROOM_TOS_PB_H', true).
-record(m_match_scene_room_join_room_tos,
        {room_id                :: integer(),       % = 1, 32 bits
         password               :: iodata()         % = 2
        }).
-endif.

-ifndef('M_SPECIAL_PROP_SPECIAL_PROP_MERGE_TOS_PB_H').
-define('M_SPECIAL_PROP_SPECIAL_PROP_MERGE_TOS_PB_H', true).
-record(m_special_prop_special_prop_merge_tos,
        {prop_obj_id            :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_VISITOR_BINDING_TOS_PB_H').
-define('M_PLAYER_VISITOR_BINDING_TOS_PB_H', true).
-record(m_player_visitor_binding_tos,
        {channel                :: iodata(),        % = 1
         acc_id                 :: iodata()         % = 2
        }).
-endif.

-ifndef('M_PLAYER_CHAT_GET_PLAYER_CHAT_INFO_TOS_PB_H').
-define('M_PLAYER_CHAT_GET_PLAYER_CHAT_INFO_TOS_PB_H', true).
-record(m_player_chat_get_player_chat_info_tos,
        {nickname               :: iodata()         % = 1
        }).
-endif.

-ifndef('M_CHAT_CHANNEL_CHAT_TOC_PB_H').
-define('M_CHAT_CHANNEL_CHAT_TOC_PB_H', true).
-record(m_chat_channel_chat_toc,
        {fail_reason            :: 'level_limit' | 'too_quick' | 'too_long' | 'no_faction' | 'fail' | integer() % = 1, enum m_chat_channel_chat_toc.ENUM
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_START_TOS_PB_H').
-define('M_SHI_SHI_ROOM_START_TOS_PB_H', true).
-record(m_shi_shi_room_start_tos,
        {
        }).
-endif.

-ifndef('M_MISSION_HERO_VERSUS_BOSS_STATUS_TOC_PB_H').
-define('M_MISSION_HERO_VERSUS_BOSS_STATUS_TOC_PB_H', true).
-record(m_mission_hero_versus_boss_status_toc,
        {state                  :: integer(),       % = 1, 32 bits
         timestamp              :: integer(),       % = 2, 32 bits
         players                :: integer(),       % = 3, 32 bits
         operation              :: integer() | undefined, % = 4, 32 bits
         previous_timestamp     :: integer() | undefined, % = 5, 32 bits
         winner_hero            :: integer() | undefined % = 6, 32 bits
        }).
-endif.

-ifndef('M_PROMOTE_GET_AWARD_TOS_PB_H').
-define('M_PROMOTE_GET_AWARD_TOS_PB_H', true).
-record(m_promote_get_award_tos,
        {
        }).
-endif.

-ifndef('M_SCENE_NOTICE_PLAYER_STOP_MOVE_TOC_PB_H').
-define('M_SCENE_NOTICE_PLAYER_STOP_MOVE_TOC_PB_H', true).
-record(m_scene_notice_player_stop_move_toc,
        {player_id              :: integer(),       % = 1, 32 bits
         x                      :: integer(),       % = 2, 32 bits
         y                      :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_JOIN_ROOM_TOC_PB_H').
-define('M_MANY_PEOPLE_BOSS_JOIN_ROOM_TOC_PB_H', true).
-record(m_many_people_boss_join_room_toc,
        {result                 :: 'success' | 'fail' | 'not_enough_mana' | 'not_authority' | 'no_condition' | 'already_join_room' | 'error_password' | 'none' | 'time_limit' | integer(), % = 1, enum m_many_people_boss_join_room_toc.ENUM
         room_details_data      :: #roomdetailsdata{} | undefined % = 2
        }).
-endif.

-ifndef('M_GIFT_SELECT_PLAYER_TOS_PB_H').
-define('M_GIFT_SELECT_PLAYER_TOS_PB_H', true).
-record(m_gift_select_player_tos,
        {player_id              :: non_neg_integer() % = 1, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_MISSION_ROUND_TOC_PB_H').
-define('M_MISSION_NOTICE_MISSION_ROUND_TOC_PB_H', true).
-record(m_mission_notice_mission_round_toc,
        {total_round            :: integer(),       % = 1, 32 bits
         round                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_LEVEL_UPGRADE_TOS_PB_H').
-define('M_PLAYER_LEVEL_UPGRADE_TOS_PB_H', true).
-record(m_player_level_upgrade_tos,
        {
        }).
-endif.

-ifndef('M_INVEST_GET_INVEST_AWARD_TOS_PB_H').
-define('M_INVEST_GET_INVEST_AWARD_TOS_PB_H', true).
-record(m_invest_get_invest_award_tos,
        {type                   :: integer(),       % = 1, 32 bits
         id                     :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_MISSION_EITHER_NOTICE_RESULT_TOC_PB_H').
-define('M_MISSION_EITHER_NOTICE_RESULT_TOC_PB_H', true).
-record(m_mission_either_notice_result_toc,
        {result_state           :: integer(),       % = 1, 32 bits
         award_value            :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_CHARGE_GET_CHARGE_TYPE_TOS_PB_H').
-define('M_CHARGE_GET_CHARGE_TYPE_TOS_PB_H', true).
-record(m_charge_get_charge_type_tos,
        {
        }).
-endif.

-ifndef('M_ACHIEVEMENT_GET_INFO_TOS_PB_H').
-define('M_ACHIEVEMENT_GET_INFO_TOS_PB_H', true).
-record(m_achievement_get_info_tos,
        {
        }).
-endif.

-ifndef('MONSTER_PB_H').
-define('MONSTER_PB_H', true).
-record(monster,
        {scene_monster_id       :: integer(),       % = 1, 32 bits
         monster_id             :: integer(),       % = 2, 32 bits
         x                      :: integer(),       % = 3, 32 bits
         y                      :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_MONSTER_LIST_TOC_PB_H').
-define('M_SCENE_NOTICE_MONSTER_LIST_TOC_PB_H', true).
-record(m_scene_notice_monster_list_toc,
        {monster_list = []      :: [#monster{}] | undefined % = 1
        }).
-endif.

-ifndef('M_PLAYER_UPDATE_PLAYER_SIGNATURE_TOS_PB_H').
-define('M_PLAYER_UPDATE_PLAYER_SIGNATURE_TOS_PB_H', true).
-record(m_player_update_player_signature_tos,
        {signature              :: iodata()         % = 1
        }).
-endif.

-ifndef('M_TONGXINGZHENG_PURCHASE_LEVEL_TOS_PB_H').
-define('M_TONGXINGZHENG_PURCHASE_LEVEL_TOS_PB_H', true).
-record(m_tongxingzheng_purchase_level_tos,
        {
        }).
-endif.

-ifndef('M_VERIFY_CODE_GET_AREA_CODE_TOS_PB_H').
-define('M_VERIFY_CODE_GET_AREA_CODE_TOS_PB_H', true).
-record(m_verify_code_get_area_code_tos,
        {
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_NOTICE_PLAYER_FIGHT_RESULT_TOC_PB_H').
-define('M_SHI_SHI_ROOM_NOTICE_PLAYER_FIGHT_RESULT_TOC_PB_H', true).
-record(m_shi_shi_room_notice_player_fight_result_toc,
        {prop_list = []         :: [#prop{}] | undefined, % = 1
         room_details_data      :: #shishiroomdetailsdata{} | undefined, % = 2
         win_name               :: iodata() | undefined, % = 3
         total_cost_value       :: integer() | undefined, % = 4, 32 bits
         win_player_id          :: integer() | undefined % = 5, 32 bits
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_GET_ROOM_LIST_TOS_PB_H').
-define('M_SHI_SHI_ROOM_GET_ROOM_LIST_TOS_PB_H', true).
-record(m_shi_shi_room_get_room_list_tos,
        {mission_id             :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_ROOM_ADD_FRAME_ACTION_TOS_PB_H').
-define('M_ROOM_ADD_FRAME_ACTION_TOS_PB_H', true).
-record(m_room_add_frame_action_tos,
        {action                 :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_WHEEL_GET_RECORD_TOC_PB_H').
-define('M_WHEEL_GET_RECORD_TOC_PB_H', true).
-record(m_wheel_get_record_toc,
        {type                   :: non_neg_integer(), % = 1, 32 bits
         record_list = []       :: [#wheelrecord{}] | undefined % = 2
        }).
-endif.

-ifndef('M_FIRST_CHARGE_NOTICE_DATA_UPDATE_TOC_PB_H').
-define('M_FIRST_CHARGE_NOTICE_DATA_UPDATE_TOC_PB_H', true).
-record(m_first_charge_notice_data_update_toc,
        {first_charge           :: #firstcharge{}   % = 1
        }).
-endif.

-ifndef('M_SYS_COMMON_NOTICE_SYS_COMMON_TOC_PB_H').
-define('M_SYS_COMMON_NOTICE_SYS_COMMON_TOC_PB_H', true).
-record(m_sys_common_notice_sys_common_toc,
        {sysCommonDataList = [] :: [#syscommondata{}] | undefined % = 1
        }).
-endif.

-ifndef('M_MISSION_HERO_VERSUS_BOSS_BET_MODIFICATION_TOC_PB_H').
-define('M_MISSION_HERO_VERSUS_BOSS_BET_MODIFICATION_TOC_PB_H', true).
-record(m_mission_hero_versus_boss_bet_modification_toc,
        {bet_modification = []  :: [#betmodification{}] | undefined % = 1
        }).
-endif.

-ifndef('M_PLAYER_GET_SERVER_TIME_TOS_PB_H').
-define('M_PLAYER_GET_SERVER_TIME_TOS_PB_H', true).
-record(m_player_get_server_time_tos,
        {
        }).
-endif.

-ifndef('M_MATCH_SCENE_MATCH_TOS_PB_H').
-define('M_MATCH_SCENE_MATCH_TOS_PB_H', true).
-record(m_match_scene_match_tos,
        {id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_NOTICE_PLAYER_READY_TOC_PB_H').
-define('M_MANY_PEOPLE_BOSS_NOTICE_PLAYER_READY_TOC_PB_H', true).
-record(m_many_people_boss_notice_player_ready_toc,
        {pos_id                 :: integer(),       % = 1, 32 bits
         is_ready               :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_LEICHONG_INFO_QUERY_TOC_PB_H').
-define('M_LEICHONG_INFO_QUERY_TOC_PB_H', true).
-record(m_leichong_info_query_toc,
        {activity_id            :: integer(),       % = 1, 32 bits
         list = []              :: [#'m_leichong_info_query_toc.leichong'{}] | undefined % = 2
        }).
-endif.

-ifndef('M_PLAYER_BIND_MOBILE_TOS_PB_H').
-define('M_PLAYER_BIND_MOBILE_TOS_PB_H', true).
-record(m_player_bind_mobile_tos,
        {code                   :: iodata(),        % = 1
         mobile                 :: iodata()         % = 2
        }).
-endif.

-ifndef('M_PLAYER_CHANGE_PK_MODE_TOC_PB_H').
-define('M_PLAYER_CHANGE_PK_MODE_TOC_PB_H', true).
-record(m_player_change_pk_mode_toc,
        {result                 :: 'success' | 'fail' | integer(), % = 1, enum m_player_change_pk_mode_toc.ENUM
         pk_mode                :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_LABA_SPIN_TOS_PB_H').
-define('M_LABA_SPIN_TOS_PB_H', true).
-record(m_laba_spin_tos,
        {id                     :: integer(),       % = 1, 32 bits
         num                    :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_ITEM_LEAVE_TOC_PB_H').
-define('M_SCENE_NOTICE_ITEM_LEAVE_TOC_PB_H', true).
-record(m_scene_notice_item_leave_toc,
        {scene_item_id_list = [] :: [integer()] | undefined, % = 1, 32 bits
         type                   :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_NOTICE_PLAYER_STRING_ATTR_CHANGE_TOC_PB_H').
-define('M_PLAYER_NOTICE_PLAYER_STRING_ATTR_CHANGE_TOC_PB_H', true).
-record(m_player_notice_player_string_attr_change_toc,
        {player_id              :: integer(),       % = 1, 32 bits
         list = []              :: [#'m_player_notice_player_string_attr_change_toc.string_attr_change'{}] | undefined % = 2
        }).
-endif.

-ifndef('M_MANY_PEOPLE_BOSS_GET_ROOM_LIST_TOC_PB_H').
-define('M_MANY_PEOPLE_BOSS_GET_ROOM_LIST_TOC_PB_H', true).
-record(m_many_people_boss_get_room_list_toc,
        {room_data_list = []    :: [#roomdata{}] | undefined, % = 1
         boss_id                :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_FIGHT_NOTICE_BIN_DONG_SKILL_TOC_PB_H').
-define('M_FIGHT_NOTICE_BIN_DONG_SKILL_TOC_PB_H', true).
-record(m_fight_notice_bin_dong_skill_toc,
        {player_id              :: integer(),       % = 1, 32 bits
         list = []              :: [#'m_fight_notice_bin_dong_skill_toc.attr_change'{}] | undefined % = 2
        }).
-endif.

-ifndef('M_MISSION_HERO_VERSUS_BOSS_BET_RESET_TOC_PB_H').
-define('M_MISSION_HERO_VERSUS_BOSS_BET_RESET_TOC_PB_H', true).
-record(m_mission_hero_versus_boss_bet_reset_toc,
        {result                 :: 'success' | 'failure' | 'unknown' | integer() % = 1, enum m_mission_hero_versus_boss_bet_reset_toc.ENUM
        }).
-endif.

-ifndef('M_SCENE_NOTICE_PREPARE_TRANSMIT_TOC_PB_H').
-define('M_SCENE_NOTICE_PREPARE_TRANSMIT_TOC_PB_H', true).
-record(m_scene_notice_prepare_transmit_toc,
        {
        }).
-endif.

-ifndef('M_WHEEL_USE_LAST_BET_TOC_PB_H').
-define('M_WHEEL_USE_LAST_BET_TOC_PB_H', true).
-record(m_wheel_use_last_bet_toc,
        {result                 :: 'success' | 'fail' | 'function_no_open' | 'not_authority' | 'no_enough_prop' | 'none' | integer() % = 1, enum m_wheel_use_last_bet_toc.ENUM
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_READY_TOC_PB_H').
-define('M_SHI_SHI_ROOM_READY_TOC_PB_H', true).
-record(m_shi_shi_room_ready_toc,
        {result                 :: 'success' | 'fail' | 'not_enough_mana' | integer(), % = 1, enum m_shi_shi_room_ready_toc.ENUM
         is_ready               :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_WHEEL_BET_TOS_PB_H').
-define('M_WHEEL_BET_TOS_PB_H', true).
-record(m_wheel_bet_tos,
        {bet_id                 :: non_neg_integer(), % = 1, 32 bits
         num                    :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_HERO_VERSUS_BOSS_FIGHT_TOC_PB_H').
-define('M_MISSION_NOTICE_HERO_VERSUS_BOSS_FIGHT_TOC_PB_H', true).
-record(m_mission_notice_hero_versus_boss_fight_toc,
        {attacker_id            :: integer(),       % = 1, 32 bits
         attacker_type          :: integer(),       % = 2, 32 bits
         x                      :: integer(),       % = 3, 32 bits
         y                      :: integer(),       % = 4, 32 bits
         dir                    :: integer(),       % = 5, 32 bits
         target_id              :: integer(),       % = 6, 32 bits
         target_type            :: integer(),       % = 7, 32 bits
         skill_id               :: integer(),       % = 8, 32 bits
         skill_level            :: integer(),       % = 9, 32 bits
         defender_result_list = [] :: [#heroversusbossdefenderresult{}] | undefined, % = 13
         anger                  :: integer(),       % = 18, 32 bits
         timestamp              :: integer()        % = 19, 32 bits
        }).
-endif.

-ifndef('M_TONGXINGZHENG_REWARD_INFO_NOTICE_TOC_PB_H').
-define('M_TONGXINGZHENG_REWARD_INFO_NOTICE_TOC_PB_H', true).
-record(m_tongxingzheng_reward_info_notice_toc,
        {lv                     :: integer() | undefined, % = 1, 32 bits
         exp                    :: integer() | undefined, % = 2, 32 bits
         silver_rewards = []    :: [integer()] | undefined, % = 3, 32 bits
         diamond_rewards = []   :: [integer()] | undefined, % = 4, 32 bits
         box_num                :: integer(),       % = 5, 32 bits
         is_buy                 :: boolean() | 0 | 1, % = 6
         txz_id                 :: integer()        % = 7, 32 bits
        }).
-endif.

-ifndef('M_JIANGJINCHI_GET_INFO_TOC_PB_H').
-define('M_JIANGJINCHI_GET_INFO_TOC_PB_H', true).
-record(m_jiangjinchi_get_info_toc,
        {pool                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_GIFT_DELETE_MAIL_TOC_PB_H').
-define('M_GIFT_DELETE_MAIL_TOC_PB_H', true).
-record(m_gift_delete_mail_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'none' | integer(), % = 1, enum m_gift_delete_mail_toc.ENUM
         mail_real_id_list = [] :: [integer()] | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_SHI_SHI_TIME_TOC_PB_H').
-define('M_MISSION_NOTICE_SHI_SHI_TIME_TOC_PB_H', true).
-record(m_mission_notice_shi_shi_time_toc,
        {type                   :: integer(),       % = 5, 32 bits
         nextEndTime            :: integer(),       % = 6, 32 bits
         value                  :: integer()        % = 7, 32 bits
        }).
-endif.

-ifndef('M_FIGHT_BLIND_BOX_REWARD_TOC_PB_H').
-define('M_FIGHT_BLIND_BOX_REWARD_TOC_PB_H', true).
-record(m_fight_blind_box_reward_toc,
        {blind_box_reward = []  :: [#'m_fight_blind_box_reward_toc.blindboxreward'{}] | undefined % = 1
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_NOTICE_PLAYER_JOIN_TOC_PB_H').
-define('M_SHI_SHI_ROOM_NOTICE_PLAYER_JOIN_TOC_PB_H', true).
-record(m_shi_shi_room_notice_player_join_toc,
        {room_player_data       :: #shishiroomplayerdata{} % = 1
        }).
-endif.

-ifndef('M_INVEST_GET_INVEST_AWARD_TOC_PB_H').
-define('M_INVEST_GET_INVEST_AWARD_TOC_PB_H', true).
-record(m_invest_get_invest_award_toc,
        {type                   :: integer(),       % = 1, 32 bits
         id                     :: integer(),       % = 2, 32 bits
         result                 :: 'success' | 'fail' | 'node' | 'not_authority' | 'already_get' | integer() % = 99, enum m_invest_get_invest_award_toc.ENUM
        }).
-endif.

-ifndef('M_PLAYER_CHANGE_NAME_TOC_PB_H').
-define('M_PLAYER_CHANGE_NAME_TOC_PB_H', true).
-record(m_player_change_name_toc,
        {result                 :: 'success' | 'used' | 'invalid_string' | 'too_long' | 'not_enough_times' | 'fail' | integer(), % = 1, enum m_player_change_name_toc.ENUM
         name                   :: iodata()         % = 2
        }).
-endif.

-ifndef('M_DEBUG_DEBUG_TOC_PB_H').
-define('M_DEBUG_DEBUG_TOC_PB_H', true).
-record(m_debug_debug_toc,
        {type                   :: integer(),       % = 1, 32 bits
         result                 :: 'success' | 'fail' | integer() % = 2, enum m_debug_debug_toc.ENUM
        }).
-endif.

-ifndef('M_PLAYER_GET_PLAYER_ATTR_TOS_PB_H').
-define('M_PLAYER_GET_PLAYER_ATTR_TOS_PB_H', true).
-record(m_player_get_player_attr_tos,
        {player_id              :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_EVENT_NOTICE_DROP_BALL_TOC_PB_H').
-define('M_SCENE_EVENT_NOTICE_DROP_BALL_TOC_PB_H', true).
-record(m_scene_event_notice_drop_ball_toc,
        {number                 :: integer(),       % = 1, 32 bits
         own_player_id          :: integer(),       % = 2, 32 bits
         x                      :: integer(),       % = 3, 32 bits
         y                      :: integer()        % = 4, 32 bits
        }).
-endif.

-ifndef('M_PLATFORM_FUNCTION_GET_SHARE_FRIEND_GIVE_TOS_PB_H').
-define('M_PLATFORM_FUNCTION_GET_SHARE_FRIEND_GIVE_TOS_PB_H', true).
-record(m_platform_function_get_share_friend_give_tos,
        {id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MATCH_SCENE_MATCH_TOC_PB_H').
-define('M_MATCH_SCENE_MATCH_TOC_PB_H', true).
-record(m_match_scene_match_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'no_enough_prop' | integer(), % = 1, enum m_match_scene_match_toc.Result
         id                     :: integer() | undefined, % = 2, 32 bits
         num                    :: integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('M_PROMOTE_NOTICE_PLAYER_PROMOTE_DATA_TOC_PB_H').
-define('M_PROMOTE_NOTICE_PLAYER_PROMOTE_DATA_TOC_PB_H', true).
-record(m_promote_notice_player_promote_data_toc,
        {player_promote_info_data :: #playerpromotedata{} % = 1
        }).
-endif.

-ifndef('M_DAILY_TASK_NOTICE_UPDATE_DAILY_TASK_DATA_TOC_PB_H').
-define('M_DAILY_TASK_NOTICE_UPDATE_DAILY_TASK_DATA_TOC_PB_H', true).
-record(m_daily_task_notice_update_daily_task_data_toc,
        {daily_task_data_list = [] :: [#dailytaskdata{}] | undefined % = 2
        }).
-endif.

-ifndef('M_MISSION_LUCKY_BOSS_BET_INFO_TOC_PB_H').
-define('M_MISSION_LUCKY_BOSS_BET_INFO_TOC_PB_H', true).
-record(m_mission_lucky_boss_bet_info_toc,
        {bet_modification = []  :: [#betmodification{}] | undefined % = 1
        }).
-endif.

-ifndef('M_TURN_TABLE_DRAW_TOC_PB_H').
-define('M_TURN_TABLE_DRAW_TOC_PB_H', true).
-record(m_turn_table_draw_toc,
        {result                 :: 'success' | 'fail' | 'function_no_open' | 'not_enough_grid' | 'no_enough_prop' | integer(), % = 99, enum m_turn_table_draw_toc.ENUM
         times                  :: integer(),       % = 1, 32 bits
         id_list = []           :: [integer()] | undefined, % = 2, 32 bits
         value                  :: integer()        % = 3, 32 bits
        }).
-endif.

-ifndef('M_PLAYER_BIND_RES_TOC_PB_H').
-define('M_PLAYER_BIND_RES_TOC_PB_H', true).
-record(m_player_bind_res_toc,
        {bind_mobile            :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_MISSION_NOTICE_ONE_ON_ONE_RATE_TOC_PB_H').
-define('M_MISSION_NOTICE_ONE_ON_ONE_RATE_TOC_PB_H', true).
-record(m_mission_notice_one_on_one_rate_toc,
        {winne_rate = []        :: [#winnerrate{}] | undefined % = 2
        }).
-endif.

-ifndef('M_JIANGJINCHI_RESULT_TOS_PB_H').
-define('M_JIANGJINCHI_RESULT_TOS_PB_H', true).
-record(m_jiangjinchi_result_tos,
        {
        }).
-endif.

-ifndef('M_MISSION_SCENE_BOSS_BET_RESET_TOS_PB_H').
-define('M_MISSION_SCENE_BOSS_BET_RESET_TOS_PB_H', true).
-record(m_mission_scene_boss_bet_reset_tos,
        {type                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_SCENE_NOTICE_MONSTER_RESTORE_HP_TOC_PB_H').
-define('M_SCENE_NOTICE_MONSTER_RESTORE_HP_TOC_PB_H', true).
-record(m_scene_notice_monster_restore_hp_toc,
        {obj_id                 :: integer(),       % = 1, 32 bits
         new_hp                 :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('M_PROMOTE_GET_PROMOTE_RECORD_TOC_PB_H').
-define('M_PROMOTE_GET_PROMOTE_RECORD_TOC_PB_H', true).
-record(m_promote_get_promote_record_toc,
        {promote_record_list = [] :: [#promoterecord{}] | undefined % = 1
        }).
-endif.

-ifndef('M_VIP_NOTICE_VIP_DATA_TOC_PB_H').
-define('M_VIP_NOTICE_VIP_DATA_TOC_PB_H', true).
-record(m_vip_notice_vip_data_toc,
        {vip_data               :: #vipdata{}       % = 1
        }).
-endif.

-ifndef('M_JIANGJINCHI_DO_DRAW_TOS_PB_H').
-define('M_JIANGJINCHI_DO_DRAW_TOS_PB_H', true).
-record(m_jiangjinchi_do_draw_tos,
        {
        }).
-endif.

-ifndef('M_TASK_NOTICE_TASK_CHANGE_TOC_PB_H').
-define('M_TASK_NOTICE_TASK_CHANGE_TOC_PB_H', true).
-record(m_task_notice_task_change_toc,
        {task_info              :: #taskinfo{}      % = 1
        }).
-endif.

-ifndef('M_MISSION_HERO_VERSUS_BOSS_BET_TOC_PB_H').
-define('M_MISSION_HERO_VERSUS_BOSS_BET_TOC_PB_H', true).
-record(m_mission_hero_versus_boss_bet_toc,
        {result                 :: 'success' | 'no_enough_prop' | 'already_start' | 'not_authority' | 'none' | 'unknown' | integer() % = 1, enum m_mission_hero_versus_boss_bet_toc.ENUM
        }).
-endif.

-ifndef('M_SHI_SHI_ROOM_NOTICE_ROOM_OWNER_CHANGE_TOC_PB_H').
-define('M_SHI_SHI_ROOM_NOTICE_ROOM_OWNER_CHANGE_TOC_PB_H', true).
-record(m_shi_shi_room_notice_room_owner_change_toc,
        {pos_id                 :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_STEP_BY_STEP_SY_ENTER_TOC_PB_H').
-define('M_STEP_BY_STEP_SY_ENTER_TOC_PB_H', true).
-record(m_step_by_step_sy_enter_toc,
        {result                 :: 'success' | 'fail' | 'not_authority' | 'already_have' | 'function_no_open' | 'not_enough_grid' | 'no_enough_prop' | integer(), % = 99, enum m_step_by_step_sy_enter_toc.ENUM
         id                     :: integer()        % = 1, 32 bits
        }).
-endif.

-endif.
