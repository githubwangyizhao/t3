%%% Generated automatically, no need to modify.
-module(db).
-include("gen/db.hrl").
-include("prof.hrl").
%% API
-export([
    select_all/2,
    select/2,
    select/3,
    read/1,
    delete/1,
    select_delete/2,
    select_delete/3,
    write/1,
    dirty_write/1,
    delete_all/1,
    tran_apply/1,
    tran_merge_apply/2,
    tran_merge_apply/3,
    tran_merge_apply_2/2,
    do/1
]).
-export([
    tran_to_sql/1,
    tran_bin_log/2,
    save_bin_log/1,
    get_changes/3,
    is_incremental_sync/1,
    get_incremental_tables/0,
    get_slice_table/2,
    get_slice_table_list/1,
    get_bin_log_table/1,
    get_log_table_list/0
]).


select_all(Table, MatchSpec) ->
    ?START_PROF,
    Result =
        lists:foldl(
            fun(TableId, Tmp) ->
                case ets:select(TableId, MatchSpec) of
                    [] ->
                        Tmp;
                    R ->
                        [R | Tmp]
                end
            end,
            [],
            get_slice_table_list(Table)
        ),
    ?STOP_PROF(?MODULE, select_all, Table),
    lists:concat(Result).
      
fetch_lookup(TablePrefix, Key) ->
    fetch_lookup(TablePrefix, Key, 0).

fetch_lookup(_, _, 100) ->
    [];

fetch_lookup(TablePrefix, Key, N) ->
    case ets:lookup(get_slice_table(TablePrefix, N), Key) of
        [] -> fetch_lookup(TablePrefix, Key, N + 1);
        R  -> R
    end.



read(Record) when is_record(Record, key_wheel_result_record_accumulate) ->
    Type = Record#key_wheel_result_record_accumulate.type,
    UId = Record#key_wheel_result_record_accumulate.u_id,
    RecordType = Record#key_wheel_result_record_accumulate.record_type,
    Id = Record#key_wheel_result_record_accumulate.id,
    ?START_PROF,
    R1 =
    case ets:lookup(wheel_result_record_accumulate, {Type, UId, RecordType, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, wheel_result_record_accumulate),
    R1;
read(Record) when is_record(Record, key_wheel_result_record) ->
    Type = Record#key_wheel_result_record.type,
    Id = Record#key_wheel_result_record.id,
    ?START_PROF,
    R1 =
    case ets:lookup(wheel_result_record, {Type, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, wheel_result_record),
    R1;
read(Record) when is_record(Record, key_wheel_pool) ->
    Type = Record#key_wheel_pool.type,
    ?START_PROF,
    R1 =
    case ets:lookup(wheel_pool, {Type}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, wheel_pool),
    R1;
read(Record) when is_record(Record, key_wheel_player_bet_record_today) ->
    PlayerId = Record#key_wheel_player_bet_record_today.player_id,
    Type = Record#key_wheel_player_bet_record_today.type,
    Id = Record#key_wheel_player_bet_record_today.id,
    ?START_PROF,
    R1 =
    case ets:lookup(wheel_player_bet_record_today, {PlayerId, Type, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, wheel_player_bet_record_today),
    R1;
read(Record) when is_record(Record, key_wheel_player_bet_record) ->
    PlayerId = Record#key_wheel_player_bet_record.player_id,
    Type = Record#key_wheel_player_bet_record.type,
    Id = Record#key_wheel_player_bet_record.id,
    ?START_PROF,
    R1 =
    case ets:lookup(wheel_player_bet_record, {PlayerId, Type, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, wheel_player_bet_record),
    R1;
read(Record) when is_record(Record, key_unique_id_data) ->
    Type = Record#key_unique_id_data.type,
    ?START_PROF,
    R1 =
    case ets:lookup(unique_id_data, {Type}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, unique_id_data),
    R1;
read(Record) when is_record(Record, key_tongxingzheng_month_task) ->
    PlayerId = Record#key_tongxingzheng_month_task.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(tongxingzheng_month_task, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, tongxingzheng_month_task),
    R1;
read(Record) when is_record(Record, key_tongxingzheng_daily_task) ->
    PlayerId = Record#key_tongxingzheng_daily_task.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(tongxingzheng_daily_task, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, tongxingzheng_daily_task),
    R1;
read(Record) when is_record(Record, key_timer_data) ->
    TimerId = Record#key_timer_data.timer_id,
    ?START_PROF,
    R1 =
    case ets:lookup(timer_data, {TimerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, timer_data),
    R1;
read(Record) when is_record(Record, key_test) ->
    Id = Record#key_test.id,
    ?START_PROF,
    R1 =
    case ets:lookup(test, {Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, test),
    R1;
read(Record) when is_record(Record, key_server_state) ->
    Time = Record#key_server_state.time,
    ?START_PROF,
    R1 =
    case ets:lookup(server_state, {Time}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, server_state),
    R1;
read(Record) when is_record(Record, key_server_player_fight_adjust) ->
    PlayerId = Record#key_server_player_fight_adjust.player_id,
    PropId = Record#key_server_player_fight_adjust.prop_id,
    ?START_PROF,
    R1 =
    case ets:lookup(server_player_fight_adjust, {PlayerId, PropId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, server_player_fight_adjust),
    R1;
read(Record) when is_record(Record, key_server_game_config) ->
    ConfigId = Record#key_server_game_config.config_id,
    ?START_PROF,
    R1 =
    case ets:lookup(server_game_config, {ConfigId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, server_game_config),
    R1;
read(Record) when is_record(Record, key_server_fight_adjust) ->
    PropId = Record#key_server_fight_adjust.prop_id,
    ?START_PROF,
    R1 =
    case ets:lookup(server_fight_adjust, {PropId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, server_fight_adjust),
    R1;
read(Record) when is_record(Record, key_server_data) ->
    Id = Record#key_server_data.id,
    Key2 = Record#key_server_data.key2,
    ?START_PROF,
    R1 =
    case ets:lookup(server_data, {Id, Key2}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, server_data),
    R1;
read(Record) when is_record(Record, key_scene_log) ->
    SceneId = Record#key_scene_log.scene_id,
    ?START_PROF,
    R1 =
    case ets:lookup(scene_log, {SceneId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, scene_log),
    R1;
read(Record) when is_record(Record, key_scene_boss_adjust) ->
    SceneId = Record#key_scene_boss_adjust.scene_id,
    ?START_PROF,
    R1 =
    case ets:lookup(scene_boss_adjust, {SceneId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, scene_boss_adjust),
    R1;
read(Record) when is_record(Record, key_scene_adjust) ->
    SceneId = Record#key_scene_adjust.scene_id,
    ?START_PROF,
    R1 =
    case ets:lookup(scene_adjust, {SceneId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, scene_adjust),
    R1;
read(Record) when is_record(Record, key_robot_player_scene_cache) ->
    Id = Record#key_robot_player_scene_cache.id,
    ?START_PROF,
    R1 =
    case ets:lookup(robot_player_scene_cache, {Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, robot_player_scene_cache),
    R1;
read(Record) when is_record(Record, key_robot_player_data) ->
    PlayerId = Record#key_robot_player_data.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(robot_player_data, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, robot_player_data),
    R1;
read(Record) when is_record(Record, key_red_packet_condition) ->
    Id = Record#key_red_packet_condition.id,
    ?START_PROF,
    R1 =
    case ets:lookup(red_packet_condition, {Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, red_packet_condition),
    R1;
read(Record) when is_record(Record, key_rank_info) ->
    RankId = Record#key_rank_info.rank_id,
    PlayerId = Record#key_rank_info.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(rank_info, {RankId, PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, rank_info),
    R1;
read(Record) when is_record(Record, key_promote_record) ->
    RealId = Record#key_promote_record.real_id,
    ?START_PROF,
    R1 =
    case ets:lookup(promote_record, {RealId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, promote_record),
    R1;
read(Record) when is_record(Record, key_promote_info) ->
    PlatformId = Record#key_promote_info.platform_id,
    AccId = Record#key_promote_info.acc_id,
    Level = Record#key_promote_info.level,
    ?START_PROF,
    R1 =
    case ets:lookup(promote_info, {PlatformId, AccId, Level}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, promote_info),
    R1;
read(Record) when is_record(Record, key_promote) ->
    PlatformId = Record#key_promote.platform_id,
    AccId = Record#key_promote.acc_id,
    ?START_PROF,
    R1 =
    case ets:lookup(promote, {PlatformId, AccId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, promote),
    R1;
read(Record) when is_record(Record, key_player_vip_award) ->
    PlayerId = Record#key_player_vip_award.player_id,
    Level = Record#key_player_vip_award.level,
    ?START_PROF,
    R1 =
    case ets:lookup(player_vip_award, {PlayerId, Level}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_vip_award),
    R1;
read(Record) when is_record(Record, key_player_vip) ->
    PlayerId = Record#key_player_vip.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_vip, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_vip),
    R1;
read(Record) when is_record(Record, key_player_title) ->
    PlayerId = Record#key_player_title.player_id,
    TitleId = Record#key_player_title.title_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_title, {PlayerId, TitleId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_title),
    R1;
read(Record) when is_record(Record, key_player_times_data) ->
    PlayerId = Record#key_player_times_data.player_id,
    TimesId = Record#key_player_times_data.times_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_times_data, {PlayerId, TimesId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_times_data),
    R1;
read(Record) when is_record(Record, key_player_task_share_award) ->
    PlayerId = Record#key_player_task_share_award.player_id,
    TaskId = Record#key_player_task_share_award.task_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_task_share_award, {PlayerId, TaskId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_task_share_award),
    R1;
read(Record) when is_record(Record, key_player_task) ->
    PlayerId = Record#key_player_task.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_task, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_task),
    R1;
read(Record) when is_record(Record, key_player_sys_common) ->
    PlayerId = Record#key_player_sys_common.player_id,
    Id = Record#key_player_sys_common.id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_sys_common, {PlayerId, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_sys_common),
    R1;
read(Record) when is_record(Record, key_player_sys_attr) ->
    PlayerId = Record#key_player_sys_attr.player_id,
    FunId = Record#key_player_sys_attr.fun_id,
    ?START_PROF,
    R1 =
    case dets:lookup(player_sys_attr, {PlayerId, FunId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_sys_attr),
    R1;
read(Record) when is_record(Record, key_player_special_prop) ->
    PlayerId = Record#key_player_special_prop.player_id,
    PropObjId = Record#key_player_special_prop.prop_obj_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_special_prop, {PlayerId, PropObjId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_special_prop),
    R1;
read(Record) when is_record(Record, key_player_shop) ->
    PlayerId = Record#key_player_shop.player_id,
    Id = Record#key_player_shop.id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_shop, {PlayerId, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_shop),
    R1;
read(Record) when is_record(Record, key_player_shen_long) ->
    PlayerId = Record#key_player_shen_long.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_shen_long, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_shen_long),
    R1;
read(Record) when is_record(Record, key_player_share_task_award) ->
    PlayerId = Record#key_player_share_task_award.player_id,
    TaskType = Record#key_player_share_task_award.task_type,
    TaskId = Record#key_player_share_task_award.task_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_share_task_award, {PlayerId, TaskType, TaskId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_share_task_award),
    R1;
read(Record) when is_record(Record, key_player_share_task) ->
    PlayerId = Record#key_player_share_task.player_id,
    TaskType = Record#key_player_share_task.task_type,
    ?START_PROF,
    R1 =
    case ets:lookup(player_share_task, {PlayerId, TaskType}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_share_task),
    R1;
read(Record) when is_record(Record, key_player_share_friend) ->
    PlayerId = Record#key_player_share_friend.player_id,
    Id = Record#key_player_share_friend.id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_share_friend, {PlayerId, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_share_friend),
    R1;
read(Record) when is_record(Record, key_player_share) ->
    PlayerId = Record#key_player_share.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_share, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_share),
    R1;
read(Record) when is_record(Record, key_player_seven_login) ->
    PlayerId = Record#key_player_seven_login.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_seven_login, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_seven_login),
    R1;
read(Record) when is_record(Record, key_player_server_data) ->
    PlayerId = Record#key_player_server_data.player_id,
    ?START_PROF,
    R1 =
    case dets:lookup(player_server_data, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_server_data),
    R1;
read(Record) when is_record(Record, key_player_send_gamebar_msg) ->
    PlayerId = Record#key_player_send_gamebar_msg.player_id,
    MsgType = Record#key_player_send_gamebar_msg.msg_type,
    ?START_PROF,
    R1 =
    case ets:lookup(player_send_gamebar_msg, {PlayerId, MsgType}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_send_gamebar_msg),
    R1;
read(Record) when is_record(Record, key_player_prop) ->
    PlayerId = Record#key_player_prop.player_id,
    PropId = Record#key_player_prop.prop_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_prop, {PlayerId, PropId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_prop),
    R1;
read(Record) when is_record(Record, key_player_prerogative_card) ->
    PlayerId = Record#key_player_prerogative_card.player_id,
    Type = Record#key_player_prerogative_card.type,
    ?START_PROF,
    R1 =
    case ets:lookup(player_prerogative_card, {PlayerId, Type}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_prerogative_card),
    R1;
read(Record) when is_record(Record, key_player_platform_award) ->
    PlayerId = Record#key_player_platform_award.player_id,
    Id = Record#key_player_platform_award.id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_platform_award, {PlayerId, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_platform_award),
    R1;
read(Record) when is_record(Record, key_player_passive_skill) ->
    PlayerId = Record#key_player_passive_skill.player_id,
    PassiveSkillId = Record#key_player_passive_skill.passive_skill_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_passive_skill, {PlayerId, PassiveSkillId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_passive_skill),
    R1;
read(Record) when is_record(Record, key_player_online_info) ->
    PlayerId = Record#key_player_online_info.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_online_info, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_online_info),
    R1;
read(Record) when is_record(Record, key_player_online_award) ->
    PlayerId = Record#key_player_online_award.player_id,
    Id = Record#key_player_online_award.id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_online_award, {PlayerId, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_online_award),
    R1;
read(Record) when is_record(Record, key_player_offline_apply) ->
    Id = Record#key_player_offline_apply.id,
    ?START_PROF,
    R1 =
    case dets:lookup(player_offline_apply, {Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_offline_apply),
    R1;
read(Record) when is_record(Record, key_player_mission_data) ->
    PlayerId = Record#key_player_mission_data.player_id,
    MissionType = Record#key_player_mission_data.mission_type,
    ?START_PROF,
    R1 =
    case ets:lookup(player_mission_data, {PlayerId, MissionType}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_mission_data),
    R1;
read(Record) when is_record(Record, key_player_mail) ->
    PlayerId = Record#key_player_mail.player_id,
    MailRealId = Record#key_player_mail.mail_real_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_mail, {PlayerId, MailRealId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_mail),
    R1;
read(Record) when is_record(Record, key_player_leichong) ->
    PlayerId = Record#key_player_leichong.player_id,
    ActivityId = Record#key_player_leichong.activity_id,
    TaskId = Record#key_player_leichong.task_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_leichong, {PlayerId, ActivityId, TaskId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_leichong),
    R1;
read(Record) when is_record(Record, key_player_laba_data) ->
    PlayerId = Record#key_player_laba_data.player_id,
    LabaId = Record#key_player_laba_data.laba_id,
    CostRate = Record#key_player_laba_data.cost_rate,
    ?START_PROF,
    R1 =
    case ets:lookup(player_laba_data, {PlayerId, LabaId, CostRate}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_laba_data),
    R1;
read(Record) when is_record(Record, key_player_jiangjinchi) ->
    PlayerId = Record#key_player_jiangjinchi.player_id,
    SceneId = Record#key_player_jiangjinchi.scene_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_jiangjinchi, {PlayerId, SceneId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_jiangjinchi),
    R1;
read(Record) when is_record(Record, key_player_invite_friend_log) ->
    PlayerId = Record#key_player_invite_friend_log.player_id,
    AccId = Record#key_player_invite_friend_log.acc_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_invite_friend_log, {PlayerId, AccId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_invite_friend_log),
    R1;
read(Record) when is_record(Record, key_player_invite_friend) ->
    AccId = Record#key_player_invite_friend.acc_id,
    PlayerId = Record#key_player_invite_friend.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_invite_friend, {AccId, PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_invite_friend),
    R1;
read(Record) when is_record(Record, key_player_invest_type) ->
    PlayerId = Record#key_player_invest_type.player_id,
    Type = Record#key_player_invest_type.type,
    ?START_PROF,
    R1 =
    case ets:lookup(player_invest_type, {PlayerId, Type}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_invest_type),
    R1;
read(Record) when is_record(Record, key_player_invest) ->
    PlayerId = Record#key_player_invest.player_id,
    Type = Record#key_player_invest.type,
    Id = Record#key_player_invest.id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_invest, {PlayerId, Type, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_invest),
    R1;
read(Record) when is_record(Record, key_player_hero_use) ->
    PlayerId = Record#key_player_hero_use.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_hero_use, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_hero_use),
    R1;
read(Record) when is_record(Record, key_player_hero_parts) ->
    PlayerId = Record#key_player_hero_parts.player_id,
    PartsId = Record#key_player_hero_parts.parts_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_hero_parts, {PlayerId, PartsId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_hero_parts),
    R1;
read(Record) when is_record(Record, key_player_hero) ->
    PlayerId = Record#key_player_hero.player_id,
    HeroId = Record#key_player_hero.hero_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_hero, {PlayerId, HeroId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_hero),
    R1;
read(Record) when is_record(Record, key_player_gift_mail_log) ->
    Sender = Record#key_player_gift_mail_log.sender,
    CreateTime = Record#key_player_gift_mail_log.create_time,
    ?START_PROF,
    R1 =
    case ets:lookup(player_gift_mail_log, {Sender, CreateTime}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_gift_mail_log),
    R1;
read(Record) when is_record(Record, key_player_gift_mail) ->
    PlayerId = Record#key_player_gift_mail.player_id,
    MailRealId = Record#key_player_gift_mail.mail_real_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_gift_mail, {PlayerId, MailRealId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_gift_mail),
    R1;
read(Record) when is_record(Record, key_player_gift_code) ->
    PlayerId = Record#key_player_gift_code.player_id,
    GiftCodeType = Record#key_player_gift_code.gift_code_type,
    ?START_PROF,
    R1 =
    case ets:lookup(player_gift_code, {PlayerId, GiftCodeType}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_gift_code),
    R1;
read(Record) when is_record(Record, key_player_game_data) ->
    PlayerId = Record#key_player_game_data.player_id,
    DataId = Record#key_player_game_data.data_id,
    ?START_PROF,
    R1 =
    case dets:lookup(player_game_data, {PlayerId, DataId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_game_data),
    R1;
read(Record) when is_record(Record, key_player_game_config) ->
    PlayerId = Record#key_player_game_config.player_id,
    ConfigId = Record#key_player_game_config.config_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_game_config, {PlayerId, ConfigId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_game_config),
    R1;
read(Record) when is_record(Record, key_player_function) ->
    PlayerId = Record#key_player_function.player_id,
    FunctionId = Record#key_player_function.function_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_function, {PlayerId, FunctionId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_function),
    R1;
read(Record) when is_record(Record, key_player_first_charge_day) ->
    PlayerId = Record#key_player_first_charge_day.player_id,
    Type = Record#key_player_first_charge_day.type,
    Day = Record#key_player_first_charge_day.day,
    ?START_PROF,
    R1 =
    case ets:lookup(player_first_charge_day, {PlayerId, Type, Day}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_first_charge_day),
    R1;
read(Record) when is_record(Record, key_player_first_charge) ->
    PlayerId = Record#key_player_first_charge.player_id,
    Type = Record#key_player_first_charge.type,
    ?START_PROF,
    R1 =
    case ets:lookup(player_first_charge, {PlayerId, Type}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_first_charge),
    R1;
read(Record) when is_record(Record, key_player_finish_share_task) ->
    AccId = Record#key_player_finish_share_task.acc_id,
    TaskType = Record#key_player_finish_share_task.task_type,
    PlayerId = Record#key_player_finish_share_task.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_finish_share_task, {AccId, TaskType, PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_finish_share_task),
    R1;
read(Record) when is_record(Record, key_player_fight_adjust) ->
    PlayerId = Record#key_player_fight_adjust.player_id,
    PropId = Record#key_player_fight_adjust.prop_id,
    FightType = Record#key_player_fight_adjust.fight_type,
    ?START_PROF,
    R1 =
    case ets:lookup(player_fight_adjust, {PlayerId, PropId, FightType}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_fight_adjust),
    R1;
read(Record) when is_record(Record, key_player_everyday_sign) ->
    PlayerId = Record#key_player_everyday_sign.player_id,
    Today = Record#key_player_everyday_sign.today,
    ?START_PROF,
    R1 =
    case ets:lookup(player_everyday_sign, {PlayerId, Today}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_everyday_sign),
    R1;
read(Record) when is_record(Record, key_player_everyday_charge) ->
    PlayerId = Record#key_player_everyday_charge.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_everyday_charge, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_everyday_charge),
    R1;
read(Record) when is_record(Record, key_player_data) ->
    PlayerId = Record#key_player_data.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_data, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_data),
    R1;
read(Record) when is_record(Record, key_player_daily_task) ->
    PlayerId = Record#key_player_daily_task.player_id,
    Id = Record#key_player_daily_task.id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_daily_task, {PlayerId, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_daily_task),
    R1;
read(Record) when is_record(Record, key_player_daily_points) ->
    PlayerId = Record#key_player_daily_points.player_id,
    Bid = Record#key_player_daily_points.bid,
    ?START_PROF,
    R1 =
    case ets:lookup(player_daily_points, {PlayerId, Bid}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_daily_points),
    R1;
read(Record) when is_record(Record, key_player_conditions_data) ->
    PlayerId = Record#key_player_conditions_data.player_id,
    ConditionsId = Record#key_player_conditions_data.conditions_id,
    Type = Record#key_player_conditions_data.type,
    Type2 = Record#key_player_conditions_data.type2,
    ?START_PROF,
    R1 =
    case dets:lookup(player_conditions_data, {PlayerId, ConditionsId, Type, Type2}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_conditions_data),
    R1;
read(Record) when is_record(Record, key_player_condition_activity) ->
    PlayerId = Record#key_player_condition_activity.player_id,
    ActivityId = Record#key_player_condition_activity.activity_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_condition_activity, {PlayerId, ActivityId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_condition_activity),
    R1;
read(Record) when is_record(Record, key_player_client_data) ->
    PlayerId = Record#key_player_client_data.player_id,
    Id = Record#key_player_client_data.id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_client_data, {PlayerId, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_client_data),
    R1;
read(Record) when is_record(Record, key_player_chat_data) ->
    PlayerId = Record#key_player_chat_data.player_id,
    Id = Record#key_player_chat_data.id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_chat_data, {PlayerId, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_chat_data),
    R1;
read(Record) when is_record(Record, key_player_charge_shop) ->
    PlayerId = Record#key_player_charge_shop.player_id,
    Id = Record#key_player_charge_shop.id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_charge_shop, {PlayerId, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_charge_shop),
    R1;
read(Record) when is_record(Record, key_player_charge_record) ->
    OrderId = Record#key_player_charge_record.order_id,
    ?START_PROF,
    R1 =
    case dets:lookup(player_charge_record, {OrderId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_charge_record),
    R1;
read(Record) when is_record(Record, key_player_charge_info_record) ->
    PlayerId = Record#key_player_charge_info_record.player_id,
    ?START_PROF,
    R1 =
    case dets:lookup(player_charge_info_record, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_charge_info_record),
    R1;
read(Record) when is_record(Record, key_player_charge_activity) ->
    PlayerId = Record#key_player_charge_activity.player_id,
    Type = Record#key_player_charge_activity.type,
    Id = Record#key_player_charge_activity.id,
    ?START_PROF,
    R1 =
    case dets:lookup(player_charge_activity, {PlayerId, Type, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_charge_activity),
    R1;
read(Record) when is_record(Record, key_player_card_title) ->
    PlayerId = Record#key_player_card_title.player_id,
    CardTitleId = Record#key_player_card_title.card_title_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_card_title, {PlayerId, CardTitleId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_card_title),
    R1;
read(Record) when is_record(Record, key_player_card_summon) ->
    PlayerId = Record#key_player_card_summon.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_card_summon, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_card_summon),
    R1;
read(Record) when is_record(Record, key_player_card_book) ->
    PlayerId = Record#key_player_card_book.player_id,
    CardBookId = Record#key_player_card_book.card_book_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_card_book, {PlayerId, CardBookId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_card_book),
    R1;
read(Record) when is_record(Record, key_player_card) ->
    PlayerId = Record#key_player_card.player_id,
    CardId = Record#key_player_card.card_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_card, {PlayerId, CardId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_card),
    R1;
read(Record) when is_record(Record, key_player_bounty_task) ->
    PlayerId = Record#key_player_bounty_task.player_id,
    Id = Record#key_player_bounty_task.id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_bounty_task, {PlayerId, Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_bounty_task),
    R1;
read(Record) when is_record(Record, key_player_adjust_rebound) ->
    PlayerId = Record#key_player_adjust_rebound.player_id,
    ReboundType = Record#key_player_adjust_rebound.rebound_type,
    ?START_PROF,
    R1 =
    case ets:lookup(player_adjust_rebound, {PlayerId, ReboundType}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_adjust_rebound),
    R1;
read(Record) when is_record(Record, key_player_activity_task) ->
    PlayerId = Record#key_player_activity_task.player_id,
    ActivityId = Record#key_player_activity_task.activity_id,
    TaskType = Record#key_player_activity_task.task_type,
    ?START_PROF,
    R1 =
    case ets:lookup(player_activity_task, {PlayerId, ActivityId, TaskType}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_activity_task),
    R1;
read(Record) when is_record(Record, key_player_activity_info) ->
    PlayerId = Record#key_player_activity_info.player_id,
    ActivityId = Record#key_player_activity_info.activity_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_activity_info, {PlayerId, ActivityId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_activity_info),
    R1;
read(Record) when is_record(Record, key_player_activity_game_info) ->
    PlayerId = Record#key_player_activity_game_info.player_id,
    ActivityId = Record#key_player_activity_game_info.activity_id,
    GameId = Record#key_player_activity_game_info.game_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_activity_game_info, {PlayerId, ActivityId, GameId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_activity_game_info),
    R1;
read(Record) when is_record(Record, key_player_activity_game) ->
    PlayerId = Record#key_player_activity_game.player_id,
    ActivityId = Record#key_player_activity_game.activity_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_activity_game, {PlayerId, ActivityId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_activity_game),
    R1;
read(Record) when is_record(Record, key_player_activity_condition) ->
    PlayerId = Record#key_player_activity_condition.player_id,
    ActivityId = Record#key_player_activity_condition.activity_id,
    ConditionId = Record#key_player_activity_condition.condition_id,
    ?START_PROF,
    R1 =
    case ets:lookup(player_activity_condition, {PlayerId, ActivityId, ConditionId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_activity_condition),
    R1;
read(Record) when is_record(Record, key_player_achievement) ->
    PlayerId = Record#key_player_achievement.player_id,
    Type = Record#key_player_achievement.type,
    ?START_PROF,
    R1 =
    case ets:lookup(player_achievement, {PlayerId, Type}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player_achievement),
    R1;
read(Record) when is_record(Record, key_player) ->
    Id = Record#key_player.id,
    ?START_PROF,
    R1 =
    case ets:lookup(player, {Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, player),
    R1;
read(Record) when is_record(Record, key_one_vs_one_rank_data) ->
    Type = Record#key_one_vs_one_rank_data.type,
    PlayerId = Record#key_one_vs_one_rank_data.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(one_vs_one_rank_data, {Type, PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, one_vs_one_rank_data),
    R1;
read(Record) when is_record(Record, key_oauth_order_log) ->
    OrderId = Record#key_oauth_order_log.order_id,
    ?START_PROF,
    R1 =
    case ets:lookup(oauth_order_log, {OrderId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, oauth_order_log),
    R1;
read(Record) when is_record(Record, key_mission_ranking) ->
    MissionType = Record#key_mission_ranking.mission_type,
    MissionId = Record#key_mission_ranking.mission_id,
    Id = Record#key_mission_ranking.id,
    PlayerId = Record#key_mission_ranking.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(mission_ranking, {MissionType, MissionId, Id, PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, mission_ranking),
    R1;
read(Record) when is_record(Record, key_mission_guess_boss) ->
    Id = Record#key_mission_guess_boss.id,
    ?START_PROF,
    R1 =
    case ets:lookup(mission_guess_boss, {Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, mission_guess_boss),
    R1;
read(Record) when is_record(Record, key_match_scene_data) ->
    Id = Record#key_match_scene_data.id,
    ?START_PROF,
    R1 =
    case ets:lookup(match_scene_data, {Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, match_scene_data),
    R1;
read(Record) when is_record(Record, key_login_notice) ->
    PlatformId = Record#key_login_notice.platform_id,
    ChannelId = Record#key_login_notice.channel_id,
    ?START_PROF,
    R1 =
    case ets:lookup(login_notice, {PlatformId, ChannelId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, login_notice),
    R1;
read(Record) when is_record(Record, key_laba_adjust) ->
    LabaId = Record#key_laba_adjust.laba_id,
    CostRate = Record#key_laba_adjust.cost_rate,
    ?START_PROF,
    R1 =
    case ets:lookup(laba_adjust, {LabaId, CostRate}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, laba_adjust),
    R1;
read(Record) when is_record(Record, key_jiangjinchi) ->
    SceneId = Record#key_jiangjinchi.scene_id,
    ?START_PROF,
    R1 =
    case ets:lookup(jiangjinchi, {SceneId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, jiangjinchi),
    R1;
read(Record) when is_record(Record, key_gift_code_type) ->
    Type = Record#key_gift_code_type.type,
    ?START_PROF,
    R1 =
    case ets:lookup(gift_code_type, {Type}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, gift_code_type),
    R1;
read(Record) when is_record(Record, key_gift_code) ->
    GiftCode = Record#key_gift_code.gift_code,
    ?START_PROF,
    R1 =
    case ets:lookup(gift_code, {GiftCode}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, gift_code),
    R1;
read(Record) when is_record(Record, key_consume_statistics) ->
    PlayerId = Record#key_consume_statistics.player_id,
    PropId = Record#key_consume_statistics.prop_id,
    Type = Record#key_consume_statistics.type,
    LogType = Record#key_consume_statistics.log_type,
    SceneId = Record#key_consume_statistics.scene_id,
    ?START_PROF,
    R1 =
    case dets:lookup(consume_statistics, {PlayerId, PropId, Type, LogType, SceneId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, consume_statistics),
    R1;
read(Record) when is_record(Record, key_client_versin) ->
    Version = Record#key_client_versin.version,
    ?START_PROF,
    R1 =
    case ets:lookup(client_versin, {Version}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, client_versin),
    R1;
read(Record) when is_record(Record, key_charge_order_request_record) ->
    OrderId = Record#key_charge_order_request_record.order_id,
    ?START_PROF,
    R1 =
    case ets:lookup(charge_order_request_record, {OrderId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, charge_order_request_record),
    R1;
read(Record) when is_record(Record, key_charge_ip_white_record) ->
    Ip = Record#key_charge_ip_white_record.ip,
    ?START_PROF,
    R1 =
    case ets:lookup(charge_ip_white_record, {Ip}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, charge_ip_white_record),
    R1;
read(Record) when is_record(Record, key_charge_info_record) ->
    OrderId = Record#key_charge_info_record.order_id,
    ?START_PROF,
    R1 =
    case dets:lookup(charge_info_record, {OrderId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, charge_info_record),
    R1;
read(Record) when is_record(Record, key_c_server_node) ->
    Node = Record#key_c_server_node.node,
    ?START_PROF,
    R1 =
    case ets:lookup(c_server_node, {Node}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, c_server_node),
    R1;
read(Record) when is_record(Record, key_c_game_server) ->
    PlatformId = Record#key_c_game_server.platform_id,
    Sid = Record#key_c_game_server.sid,
    ?START_PROF,
    R1 =
    case ets:lookup(c_game_server, {PlatformId, Sid}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, c_game_server),
    R1;
read(Record) when is_record(Record, key_brave_one) ->
    PlayerId = Record#key_brave_one.player_id,
    ?START_PROF,
    R1 =
    case ets:lookup(brave_one, {PlayerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, brave_one),
    R1;
read(Record) when is_record(Record, key_boss_one_on_one) ->
    Id = Record#key_boss_one_on_one.id,
    ?START_PROF,
    R1 =
    case ets:lookup(boss_one_on_one, {Id}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, boss_one_on_one),
    R1;
read(Record) when is_record(Record, key_activity_info) ->
    ActivityId = Record#key_activity_info.activity_id,
    ?START_PROF,
    R1 =
    case ets:lookup(activity_info, {ActivityId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, activity_info),
    R1;
read(Record) when is_record(Record, key_activity_award) ->
    ActivityId = Record#key_activity_award.activity_id,
    ?START_PROF,
    R1 =
    case ets:lookup(activity_award, {ActivityId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, activity_award),
    R1;
read(Record) when is_record(Record, key_account_share_data) ->
    PlatformId = Record#key_account_share_data.platform_id,
    Account = Record#key_account_share_data.account,
    ?START_PROF,
    R1 =
    case ets:lookup(account_share_data, {PlatformId, Account}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, account_share_data),
    R1;
read(Record) when is_record(Record, key_account_charge_white) ->
    PlatformId = Record#key_account_charge_white.platform_id,
    Account = Record#key_account_charge_white.account,
    ?START_PROF,
    R1 =
    case ets:lookup(account_charge_white, {PlatformId, Account}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, account_charge_white),
    R1;
read(Record) when is_record(Record, key_account) ->
    AccId = Record#key_account.acc_id,
    ServerId = Record#key_account.server_id,
    ?START_PROF,
    R1 =
    case dets:lookup(account, {AccId, ServerId}) of
        [] ->
            null;
        [R] ->
            R
    end,
    ?STOP_PROF(?MODULE, lookup, account),
    R1.

write(Record) when is_record(Record, db_wheel_result_record_accumulate) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = wheel_result_record_accumulate,
    case Record#db_wheel_result_record_accumulate.row_key of 
        undefined -> 
            Type = Record#db_wheel_result_record_accumulate.type,
            UId = Record#db_wheel_result_record_accumulate.u_id,
            RecordType = Record#db_wheel_result_record_accumulate.record_type,
            Id = Record#db_wheel_result_record_accumulate.id,
            RealRecord = Record#db_wheel_result_record_accumulate{row_key ={Type, UId, RecordType, Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, wheel_result_record_accumulate, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, wheel_result_record_accumulate),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(wheel_result_record_accumulate, Record#db_wheel_result_record_accumulate.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, wheel_result_record_accumulate, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, wheel_result_record_accumulate),
                    Record
            end
    end;
write(Record) when is_record(Record, db_wheel_result_record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = wheel_result_record,
    case Record#db_wheel_result_record.row_key of 
        undefined -> 
            Type = Record#db_wheel_result_record.type,
            Id = Record#db_wheel_result_record.id,
            RealRecord = Record#db_wheel_result_record{row_key ={Type, Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, wheel_result_record, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, wheel_result_record),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(wheel_result_record, Record#db_wheel_result_record.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, wheel_result_record, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, wheel_result_record),
                    Record
            end
    end;
write(Record) when is_record(Record, db_wheel_pool) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = wheel_pool,
    case Record#db_wheel_pool.row_key of 
        undefined -> 
            Type = Record#db_wheel_pool.type,
            RealRecord = Record#db_wheel_pool{row_key ={Type}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, wheel_pool, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, wheel_pool),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(wheel_pool, Record#db_wheel_pool.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, wheel_pool, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, wheel_pool),
                    Record
            end
    end;
write(Record) when is_record(Record, db_wheel_player_bet_record_today) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = wheel_player_bet_record_today,
    case Record#db_wheel_player_bet_record_today.row_key of 
        undefined -> 
            PlayerId = Record#db_wheel_player_bet_record_today.player_id,
            Type = Record#db_wheel_player_bet_record_today.type,
            Id = Record#db_wheel_player_bet_record_today.id,
            RealRecord = Record#db_wheel_player_bet_record_today{row_key ={PlayerId, Type, Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, wheel_player_bet_record_today, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, wheel_player_bet_record_today),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(wheel_player_bet_record_today, Record#db_wheel_player_bet_record_today.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, wheel_player_bet_record_today, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, wheel_player_bet_record_today),
                    Record
            end
    end;
write(Record) when is_record(Record, db_wheel_player_bet_record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = wheel_player_bet_record,
    case Record#db_wheel_player_bet_record.row_key of 
        undefined -> 
            PlayerId = Record#db_wheel_player_bet_record.player_id,
            Type = Record#db_wheel_player_bet_record.type,
            Id = Record#db_wheel_player_bet_record.id,
            RealRecord = Record#db_wheel_player_bet_record{row_key ={PlayerId, Type, Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, wheel_player_bet_record, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, wheel_player_bet_record),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(wheel_player_bet_record, Record#db_wheel_player_bet_record.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, wheel_player_bet_record, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, wheel_player_bet_record),
                    Record
            end
    end;
write(Record) when is_record(Record, db_unique_id_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = unique_id_data,
    case Record#db_unique_id_data.row_key of 
        undefined -> 
            Type = Record#db_unique_id_data.type,
            RealRecord = Record#db_unique_id_data{row_key ={Type}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, unique_id_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, unique_id_data),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(unique_id_data, Record#db_unique_id_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, unique_id_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, unique_id_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_tongxingzheng_month_task) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = tongxingzheng_month_task,
    case Record#db_tongxingzheng_month_task.row_key of 
        undefined -> 
            PlayerId = Record#db_tongxingzheng_month_task.player_id,
            RealRecord = Record#db_tongxingzheng_month_task{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, tongxingzheng_month_task, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, tongxingzheng_month_task),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(tongxingzheng_month_task, Record#db_tongxingzheng_month_task.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, tongxingzheng_month_task, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, tongxingzheng_month_task),
                    Record
            end
    end;
write(Record) when is_record(Record, db_tongxingzheng_daily_task) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = tongxingzheng_daily_task,
    case Record#db_tongxingzheng_daily_task.row_key of 
        undefined -> 
            PlayerId = Record#db_tongxingzheng_daily_task.player_id,
            RealRecord = Record#db_tongxingzheng_daily_task{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, tongxingzheng_daily_task, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, tongxingzheng_daily_task),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(tongxingzheng_daily_task, Record#db_tongxingzheng_daily_task.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, tongxingzheng_daily_task, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, tongxingzheng_daily_task),
                    Record
            end
    end;
write(Record) when is_record(Record, db_timer_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = timer_data,
    case Record#db_timer_data.row_key of 
        undefined -> 
            TimerId = Record#db_timer_data.timer_id,
            RealRecord = Record#db_timer_data{row_key ={TimerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, timer_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, timer_data),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(timer_data, Record#db_timer_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, timer_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, timer_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_test) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = test,
    case Record#db_test.row_key of 
        undefined -> 
            case Record#db_test.id of
                undefined ->
                    Id = ets:update_counter(auto_increment, test, 1),
                    RealRecord = Record#db_test{row_key ={Id}, id = Id};
                Id->
                    RealRecord = Record#db_test{row_key ={Id}}
            end,
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, test, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, test),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(test, Record#db_test.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, test, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, test),
                    Record
            end
    end;
write(Record) when is_record(Record, db_server_state) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = server_state,
    case Record#db_server_state.row_key of 
        undefined -> 
            Time = Record#db_server_state.time,
            RealRecord = Record#db_server_state{row_key ={Time}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, server_state, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, server_state),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(server_state, Record#db_server_state.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, server_state, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, server_state),
                    Record
            end
    end;
write(Record) when is_record(Record, db_server_player_fight_adjust) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = server_player_fight_adjust,
    case Record#db_server_player_fight_adjust.row_key of 
        undefined -> 
            PlayerId = Record#db_server_player_fight_adjust.player_id,
            PropId = Record#db_server_player_fight_adjust.prop_id,
            RealRecord = Record#db_server_player_fight_adjust{row_key ={PlayerId, PropId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, server_player_fight_adjust, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, server_player_fight_adjust),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(server_player_fight_adjust, Record#db_server_player_fight_adjust.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, server_player_fight_adjust, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, server_player_fight_adjust),
                    Record
            end
    end;
write(Record) when is_record(Record, db_server_game_config) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = server_game_config,
    case Record#db_server_game_config.row_key of 
        undefined -> 
            ConfigId = Record#db_server_game_config.config_id,
            RealRecord = Record#db_server_game_config{row_key ={ConfigId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, server_game_config, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, server_game_config),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(server_game_config, Record#db_server_game_config.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, server_game_config, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, server_game_config),
                    Record
            end
    end;
write(Record) when is_record(Record, db_server_fight_adjust) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = server_fight_adjust,
    case Record#db_server_fight_adjust.row_key of 
        undefined -> 
            PropId = Record#db_server_fight_adjust.prop_id,
            RealRecord = Record#db_server_fight_adjust{row_key ={PropId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, server_fight_adjust, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, server_fight_adjust),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(server_fight_adjust, Record#db_server_fight_adjust.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, server_fight_adjust, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, server_fight_adjust),
                    Record
            end
    end;
write(Record) when is_record(Record, db_server_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = server_data,
    case Record#db_server_data.row_key of 
        undefined -> 
            Id = Record#db_server_data.id,
            Key2 = Record#db_server_data.key2,
            RealRecord = Record#db_server_data{row_key ={Id, Key2}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, server_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, server_data),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(server_data, Record#db_server_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, server_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, server_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_scene_log) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = scene_log,
    case Record#db_scene_log.row_key of 
        undefined -> 
            SceneId = Record#db_scene_log.scene_id,
            RealRecord = Record#db_scene_log{row_key ={SceneId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, scene_log, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, scene_log),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(scene_log, Record#db_scene_log.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, scene_log, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, scene_log),
                    Record
            end
    end;
write(Record) when is_record(Record, db_scene_boss_adjust) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = scene_boss_adjust,
    case Record#db_scene_boss_adjust.row_key of 
        undefined -> 
            SceneId = Record#db_scene_boss_adjust.scene_id,
            RealRecord = Record#db_scene_boss_adjust{row_key ={SceneId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, scene_boss_adjust, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, scene_boss_adjust),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(scene_boss_adjust, Record#db_scene_boss_adjust.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, scene_boss_adjust, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, scene_boss_adjust),
                    Record
            end
    end;
write(Record) when is_record(Record, db_scene_adjust) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = scene_adjust,
    case Record#db_scene_adjust.row_key of 
        undefined -> 
            SceneId = Record#db_scene_adjust.scene_id,
            RealRecord = Record#db_scene_adjust{row_key ={SceneId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, scene_adjust, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, scene_adjust),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(scene_adjust, Record#db_scene_adjust.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, scene_adjust, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, scene_adjust),
                    Record
            end
    end;
write(Record) when is_record(Record, db_robot_player_scene_cache) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = robot_player_scene_cache,
    case Record#db_robot_player_scene_cache.row_key of 
        undefined -> 
            Id = Record#db_robot_player_scene_cache.id,
            RealRecord = Record#db_robot_player_scene_cache{row_key ={Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, robot_player_scene_cache, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, robot_player_scene_cache),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(robot_player_scene_cache, Record#db_robot_player_scene_cache.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, robot_player_scene_cache, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, robot_player_scene_cache),
                    Record
            end
    end;
write(Record) when is_record(Record, db_robot_player_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = robot_player_data,
    case Record#db_robot_player_data.row_key of 
        undefined -> 
            PlayerId = Record#db_robot_player_data.player_id,
            RealRecord = Record#db_robot_player_data{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, robot_player_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, robot_player_data),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(robot_player_data, Record#db_robot_player_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, robot_player_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, robot_player_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_red_packet_condition) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = red_packet_condition,
    case Record#db_red_packet_condition.row_key of 
        undefined -> 
            Id = Record#db_red_packet_condition.id,
            RealRecord = Record#db_red_packet_condition{row_key ={Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, red_packet_condition, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, red_packet_condition),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(red_packet_condition, Record#db_red_packet_condition.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, red_packet_condition, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, red_packet_condition),
                    Record
            end
    end;
write(Record) when is_record(Record, db_rank_info) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = rank_info,
    case Record#db_rank_info.row_key of 
        undefined -> 
            RankId = Record#db_rank_info.rank_id,
            PlayerId = Record#db_rank_info.player_id,
            RealRecord = Record#db_rank_info{row_key ={RankId, PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, rank_info, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, rank_info),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(rank_info, Record#db_rank_info.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, rank_info, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, rank_info),
                    Record
            end
    end;
write(Record) when is_record(Record, db_promote_record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = promote_record,
    case Record#db_promote_record.row_key of 
        undefined -> 
            RealId = Record#db_promote_record.real_id,
            RealRecord = Record#db_promote_record{row_key ={RealId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, promote_record, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, promote_record),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(promote_record, Record#db_promote_record.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, promote_record, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, promote_record),
                    Record
            end
    end;
write(Record) when is_record(Record, db_promote_info) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = promote_info,
    case Record#db_promote_info.row_key of 
        undefined -> 
            PlatformId = Record#db_promote_info.platform_id,
            AccId = Record#db_promote_info.acc_id,
            Level = Record#db_promote_info.level,
            RealRecord = Record#db_promote_info{row_key ={PlatformId, AccId, Level}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, promote_info, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, promote_info),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(promote_info, Record#db_promote_info.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, promote_info, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, promote_info),
                    Record
            end
    end;
write(Record) when is_record(Record, db_promote) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = promote,
    case Record#db_promote.row_key of 
        undefined -> 
            PlatformId = Record#db_promote.platform_id,
            AccId = Record#db_promote.acc_id,
            RealRecord = Record#db_promote{row_key ={PlatformId, AccId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, promote, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, promote),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(promote, Record#db_promote.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, promote, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, promote),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_vip_award) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_vip_award,
    case Record#db_player_vip_award.row_key of 
        undefined -> 
            PlayerId = Record#db_player_vip_award.player_id,
            Level = Record#db_player_vip_award.level,
            RealRecord = Record#db_player_vip_award{row_key ={PlayerId, Level}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_vip_award, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_vip_award),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_vip_award, Record#db_player_vip_award.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_vip_award, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_vip_award),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_vip) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_vip,
    case Record#db_player_vip.row_key of 
        undefined -> 
            PlayerId = Record#db_player_vip.player_id,
            RealRecord = Record#db_player_vip{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_vip, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_vip),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_vip, Record#db_player_vip.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_vip, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_vip),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_title) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_title,
    case Record#db_player_title.row_key of 
        undefined -> 
            PlayerId = Record#db_player_title.player_id,
            TitleId = Record#db_player_title.title_id,
            RealRecord = Record#db_player_title{row_key ={PlayerId, TitleId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_title, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_title),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_title, Record#db_player_title.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_title, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_title),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_times_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_times_data,
    case Record#db_player_times_data.row_key of 
        undefined -> 
            PlayerId = Record#db_player_times_data.player_id,
            TimesId = Record#db_player_times_data.times_id,
            RealRecord = Record#db_player_times_data{row_key ={PlayerId, TimesId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_times_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_times_data),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_times_data, Record#db_player_times_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_times_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_times_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_task_share_award) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_task_share_award,
    case Record#db_player_task_share_award.row_key of 
        undefined -> 
            PlayerId = Record#db_player_task_share_award.player_id,
            TaskId = Record#db_player_task_share_award.task_id,
            RealRecord = Record#db_player_task_share_award{row_key ={PlayerId, TaskId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_task_share_award, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_task_share_award),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_task_share_award, Record#db_player_task_share_award.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_task_share_award, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_task_share_award),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_task) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_task,
    case Record#db_player_task.row_key of 
        undefined -> 
            PlayerId = Record#db_player_task.player_id,
            RealRecord = Record#db_player_task{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_task, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_task),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_task, Record#db_player_task.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_task, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_task),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_sys_common) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_sys_common,
    case Record#db_player_sys_common.row_key of 
        undefined -> 
            PlayerId = Record#db_player_sys_common.player_id,
            Id = Record#db_player_sys_common.id,
            RealRecord = Record#db_player_sys_common{row_key ={PlayerId, Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_sys_common, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_sys_common),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_sys_common, Record#db_player_sys_common.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_sys_common, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_sys_common),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_sys_attr) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_sys_attr,
    case Record#db_player_sys_attr.row_key of 
        undefined -> 
            PlayerId = Record#db_player_sys_attr.player_id,
            FunId = Record#db_player_sys_attr.fun_id,
            RealRecord = Record#db_player_sys_attr{row_key ={PlayerId, FunId}},
            ensure_to_sql(RealRecord),
            true = dets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_sys_attr, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_sys_attr),
            RealRecord;
        _ ->
            [OldRecord] = dets:lookup(player_sys_attr, Record#db_player_sys_attr.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    dets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_sys_attr, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_sys_attr),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_special_prop) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_special_prop,
    case Record#db_player_special_prop.row_key of 
        undefined -> 
            PlayerId = Record#db_player_special_prop.player_id,
            PropObjId = Record#db_player_special_prop.prop_obj_id,
            RealRecord = Record#db_player_special_prop{row_key ={PlayerId, PropObjId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_special_prop, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_special_prop),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_special_prop, Record#db_player_special_prop.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_special_prop, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_special_prop),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_shop) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_shop,
    case Record#db_player_shop.row_key of 
        undefined -> 
            PlayerId = Record#db_player_shop.player_id,
            Id = Record#db_player_shop.id,
            RealRecord = Record#db_player_shop{row_key ={PlayerId, Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_shop, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_shop),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_shop, Record#db_player_shop.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_shop, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_shop),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_shen_long) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_shen_long,
    case Record#db_player_shen_long.row_key of 
        undefined -> 
            PlayerId = Record#db_player_shen_long.player_id,
            RealRecord = Record#db_player_shen_long{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_shen_long, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_shen_long),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_shen_long, Record#db_player_shen_long.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_shen_long, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_shen_long),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_share_task_award) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_share_task_award,
    case Record#db_player_share_task_award.row_key of 
        undefined -> 
            PlayerId = Record#db_player_share_task_award.player_id,
            TaskType = Record#db_player_share_task_award.task_type,
            TaskId = Record#db_player_share_task_award.task_id,
            RealRecord = Record#db_player_share_task_award{row_key ={PlayerId, TaskType, TaskId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_share_task_award, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_share_task_award),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_share_task_award, Record#db_player_share_task_award.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_share_task_award, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_share_task_award),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_share_task) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_share_task,
    case Record#db_player_share_task.row_key of 
        undefined -> 
            PlayerId = Record#db_player_share_task.player_id,
            TaskType = Record#db_player_share_task.task_type,
            RealRecord = Record#db_player_share_task{row_key ={PlayerId, TaskType}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_share_task, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_share_task),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_share_task, Record#db_player_share_task.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_share_task, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_share_task),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_share_friend) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_share_friend,
    case Record#db_player_share_friend.row_key of 
        undefined -> 
            PlayerId = Record#db_player_share_friend.player_id,
            Id = Record#db_player_share_friend.id,
            RealRecord = Record#db_player_share_friend{row_key ={PlayerId, Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_share_friend, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_share_friend),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_share_friend, Record#db_player_share_friend.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_share_friend, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_share_friend),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_share) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_share,
    case Record#db_player_share.row_key of 
        undefined -> 
            PlayerId = Record#db_player_share.player_id,
            RealRecord = Record#db_player_share{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_share, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_share),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_share, Record#db_player_share.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_share, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_share),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_seven_login) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_seven_login,
    case Record#db_player_seven_login.row_key of 
        undefined -> 
            PlayerId = Record#db_player_seven_login.player_id,
            RealRecord = Record#db_player_seven_login{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_seven_login, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_seven_login),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_seven_login, Record#db_player_seven_login.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_seven_login, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_seven_login),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_server_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_server_data,
    case Record#db_player_server_data.row_key of 
        undefined -> 
            PlayerId = Record#db_player_server_data.player_id,
            RealRecord = Record#db_player_server_data{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = dets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_server_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_server_data),
            RealRecord;
        _ ->
            [OldRecord] = dets:lookup(player_server_data, Record#db_player_server_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    dets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_server_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_server_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_send_gamebar_msg) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_send_gamebar_msg,
    case Record#db_player_send_gamebar_msg.row_key of 
        undefined -> 
            PlayerId = Record#db_player_send_gamebar_msg.player_id,
            MsgType = Record#db_player_send_gamebar_msg.msg_type,
            RealRecord = Record#db_player_send_gamebar_msg{row_key ={PlayerId, MsgType}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_send_gamebar_msg, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_send_gamebar_msg),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_send_gamebar_msg, Record#db_player_send_gamebar_msg.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_send_gamebar_msg, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_send_gamebar_msg),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_prop) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_prop,
    case Record#db_player_prop.row_key of 
        undefined -> 
            PlayerId = Record#db_player_prop.player_id,
            PropId = Record#db_player_prop.prop_id,
            RealRecord = Record#db_player_prop{row_key ={PlayerId, PropId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_prop, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_prop),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_prop, Record#db_player_prop.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_prop, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_prop),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_prerogative_card) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_prerogative_card,
    case Record#db_player_prerogative_card.row_key of 
        undefined -> 
            PlayerId = Record#db_player_prerogative_card.player_id,
            Type = Record#db_player_prerogative_card.type,
            RealRecord = Record#db_player_prerogative_card{row_key ={PlayerId, Type}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_prerogative_card, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_prerogative_card),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_prerogative_card, Record#db_player_prerogative_card.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_prerogative_card, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_prerogative_card),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_platform_award) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_platform_award,
    case Record#db_player_platform_award.row_key of 
        undefined -> 
            PlayerId = Record#db_player_platform_award.player_id,
            Id = Record#db_player_platform_award.id,
            RealRecord = Record#db_player_platform_award{row_key ={PlayerId, Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_platform_award, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_platform_award),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_platform_award, Record#db_player_platform_award.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_platform_award, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_platform_award),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_passive_skill) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_passive_skill,
    case Record#db_player_passive_skill.row_key of 
        undefined -> 
            PlayerId = Record#db_player_passive_skill.player_id,
            PassiveSkillId = Record#db_player_passive_skill.passive_skill_id,
            RealRecord = Record#db_player_passive_skill{row_key ={PlayerId, PassiveSkillId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_passive_skill, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_passive_skill),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_passive_skill, Record#db_player_passive_skill.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_passive_skill, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_passive_skill),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_online_info) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_online_info,
    case Record#db_player_online_info.row_key of 
        undefined -> 
            PlayerId = Record#db_player_online_info.player_id,
            RealRecord = Record#db_player_online_info{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_online_info, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_online_info),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_online_info, Record#db_player_online_info.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_online_info, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_online_info),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_online_award) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_online_award,
    case Record#db_player_online_award.row_key of 
        undefined -> 
            PlayerId = Record#db_player_online_award.player_id,
            Id = Record#db_player_online_award.id,
            RealRecord = Record#db_player_online_award{row_key ={PlayerId, Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_online_award, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_online_award),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_online_award, Record#db_player_online_award.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_online_award, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_online_award),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_offline_apply) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_offline_apply,
    case Record#db_player_offline_apply.row_key of 
        undefined -> 
            case Record#db_player_offline_apply.id of
                undefined ->
                    Id = ets:update_counter(auto_increment, player_offline_apply, 1),
                    RealRecord = Record#db_player_offline_apply{row_key ={Id}, id = Id};
                Id->
                    RealRecord = Record#db_player_offline_apply{row_key ={Id}}
            end,
            ensure_to_sql(RealRecord),
            true = dets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_offline_apply, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_offline_apply),
            RealRecord;
        _ ->
            [OldRecord] = dets:lookup(player_offline_apply, Record#db_player_offline_apply.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    dets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_offline_apply, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_offline_apply),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_mission_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_mission_data,
    case Record#db_player_mission_data.row_key of 
        undefined -> 
            PlayerId = Record#db_player_mission_data.player_id,
            MissionType = Record#db_player_mission_data.mission_type,
            RealRecord = Record#db_player_mission_data{row_key ={PlayerId, MissionType}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_mission_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_mission_data),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_mission_data, Record#db_player_mission_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_mission_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_mission_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_mail) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_mail,
    case Record#db_player_mail.row_key of 
        undefined -> 
            PlayerId = Record#db_player_mail.player_id,
            MailRealId = Record#db_player_mail.mail_real_id,
            RealRecord = Record#db_player_mail{row_key ={PlayerId, MailRealId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_mail, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_mail),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_mail, Record#db_player_mail.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_mail, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_mail),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_leichong) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_leichong,
    case Record#db_player_leichong.row_key of 
        undefined -> 
            PlayerId = Record#db_player_leichong.player_id,
            ActivityId = Record#db_player_leichong.activity_id,
            TaskId = Record#db_player_leichong.task_id,
            RealRecord = Record#db_player_leichong{row_key ={PlayerId, ActivityId, TaskId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_leichong, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_leichong),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_leichong, Record#db_player_leichong.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_leichong, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_leichong),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_laba_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_laba_data,
    case Record#db_player_laba_data.row_key of 
        undefined -> 
            PlayerId = Record#db_player_laba_data.player_id,
            LabaId = Record#db_player_laba_data.laba_id,
            CostRate = Record#db_player_laba_data.cost_rate,
            RealRecord = Record#db_player_laba_data{row_key ={PlayerId, LabaId, CostRate}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_laba_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_laba_data),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_laba_data, Record#db_player_laba_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_laba_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_laba_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_jiangjinchi) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_jiangjinchi,
    case Record#db_player_jiangjinchi.row_key of 
        undefined -> 
            PlayerId = Record#db_player_jiangjinchi.player_id,
            SceneId = Record#db_player_jiangjinchi.scene_id,
            RealRecord = Record#db_player_jiangjinchi{row_key ={PlayerId, SceneId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_jiangjinchi, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_jiangjinchi),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_jiangjinchi, Record#db_player_jiangjinchi.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_jiangjinchi, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_jiangjinchi),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_invite_friend_log) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_invite_friend_log,
    case Record#db_player_invite_friend_log.row_key of 
        undefined -> 
            PlayerId = Record#db_player_invite_friend_log.player_id,
            AccId = Record#db_player_invite_friend_log.acc_id,
            RealRecord = Record#db_player_invite_friend_log{row_key ={PlayerId, AccId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_invite_friend_log, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_invite_friend_log),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_invite_friend_log, Record#db_player_invite_friend_log.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_invite_friend_log, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_invite_friend_log),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_invite_friend) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_invite_friend,
    case Record#db_player_invite_friend.row_key of 
        undefined -> 
            AccId = Record#db_player_invite_friend.acc_id,
            PlayerId = Record#db_player_invite_friend.player_id,
            RealRecord = Record#db_player_invite_friend{row_key ={AccId, PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_invite_friend, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_invite_friend),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_invite_friend, Record#db_player_invite_friend.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_invite_friend, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_invite_friend),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_invest_type) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_invest_type,
    case Record#db_player_invest_type.row_key of 
        undefined -> 
            PlayerId = Record#db_player_invest_type.player_id,
            Type = Record#db_player_invest_type.type,
            RealRecord = Record#db_player_invest_type{row_key ={PlayerId, Type}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_invest_type, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_invest_type),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_invest_type, Record#db_player_invest_type.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_invest_type, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_invest_type),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_invest) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_invest,
    case Record#db_player_invest.row_key of 
        undefined -> 
            PlayerId = Record#db_player_invest.player_id,
            Type = Record#db_player_invest.type,
            Id = Record#db_player_invest.id,
            RealRecord = Record#db_player_invest{row_key ={PlayerId, Type, Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_invest, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_invest),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_invest, Record#db_player_invest.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_invest, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_invest),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_hero_use) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_hero_use,
    case Record#db_player_hero_use.row_key of 
        undefined -> 
            PlayerId = Record#db_player_hero_use.player_id,
            RealRecord = Record#db_player_hero_use{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_hero_use, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_hero_use),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_hero_use, Record#db_player_hero_use.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_hero_use, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_hero_use),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_hero_parts) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_hero_parts,
    case Record#db_player_hero_parts.row_key of 
        undefined -> 
            PlayerId = Record#db_player_hero_parts.player_id,
            PartsId = Record#db_player_hero_parts.parts_id,
            RealRecord = Record#db_player_hero_parts{row_key ={PlayerId, PartsId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_hero_parts, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_hero_parts),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_hero_parts, Record#db_player_hero_parts.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_hero_parts, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_hero_parts),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_hero) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_hero,
    case Record#db_player_hero.row_key of 
        undefined -> 
            PlayerId = Record#db_player_hero.player_id,
            HeroId = Record#db_player_hero.hero_id,
            RealRecord = Record#db_player_hero{row_key ={PlayerId, HeroId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_hero, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_hero),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_hero, Record#db_player_hero.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_hero, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_hero),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_gift_mail_log) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_gift_mail_log,
    case Record#db_player_gift_mail_log.row_key of 
        undefined -> 
            Sender = Record#db_player_gift_mail_log.sender,
            CreateTime = Record#db_player_gift_mail_log.create_time,
            RealRecord = Record#db_player_gift_mail_log{row_key ={Sender, CreateTime}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_gift_mail_log, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_gift_mail_log),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_gift_mail_log, Record#db_player_gift_mail_log.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_gift_mail_log, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_gift_mail_log),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_gift_mail) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_gift_mail,
    case Record#db_player_gift_mail.row_key of 
        undefined -> 
            PlayerId = Record#db_player_gift_mail.player_id,
            MailRealId = Record#db_player_gift_mail.mail_real_id,
            RealRecord = Record#db_player_gift_mail{row_key ={PlayerId, MailRealId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_gift_mail, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_gift_mail),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_gift_mail, Record#db_player_gift_mail.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_gift_mail, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_gift_mail),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_gift_code) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_gift_code,
    case Record#db_player_gift_code.row_key of 
        undefined -> 
            PlayerId = Record#db_player_gift_code.player_id,
            GiftCodeType = Record#db_player_gift_code.gift_code_type,
            RealRecord = Record#db_player_gift_code{row_key ={PlayerId, GiftCodeType}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_gift_code, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_gift_code),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_gift_code, Record#db_player_gift_code.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_gift_code, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_gift_code),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_game_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_game_data,
    case Record#db_player_game_data.row_key of 
        undefined -> 
            PlayerId = Record#db_player_game_data.player_id,
            DataId = Record#db_player_game_data.data_id,
            RealRecord = Record#db_player_game_data{row_key ={PlayerId, DataId}},
            ensure_to_sql(RealRecord),
            true = dets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_game_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_game_data),
            RealRecord;
        _ ->
            [OldRecord] = dets:lookup(player_game_data, Record#db_player_game_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    dets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_game_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_game_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_game_config) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_game_config,
    case Record#db_player_game_config.row_key of 
        undefined -> 
            PlayerId = Record#db_player_game_config.player_id,
            ConfigId = Record#db_player_game_config.config_id,
            RealRecord = Record#db_player_game_config{row_key ={PlayerId, ConfigId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_game_config, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_game_config),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_game_config, Record#db_player_game_config.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_game_config, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_game_config),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_function) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_function,
    case Record#db_player_function.row_key of 
        undefined -> 
            PlayerId = Record#db_player_function.player_id,
            FunctionId = Record#db_player_function.function_id,
            RealRecord = Record#db_player_function{row_key ={PlayerId, FunctionId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_function, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_function),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_function, Record#db_player_function.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_function, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_function),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_first_charge_day) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_first_charge_day,
    case Record#db_player_first_charge_day.row_key of 
        undefined -> 
            PlayerId = Record#db_player_first_charge_day.player_id,
            Type = Record#db_player_first_charge_day.type,
            Day = Record#db_player_first_charge_day.day,
            RealRecord = Record#db_player_first_charge_day{row_key ={PlayerId, Type, Day}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_first_charge_day, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_first_charge_day),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_first_charge_day, Record#db_player_first_charge_day.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_first_charge_day, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_first_charge_day),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_first_charge) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_first_charge,
    case Record#db_player_first_charge.row_key of 
        undefined -> 
            PlayerId = Record#db_player_first_charge.player_id,
            Type = Record#db_player_first_charge.type,
            RealRecord = Record#db_player_first_charge{row_key ={PlayerId, Type}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_first_charge, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_first_charge),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_first_charge, Record#db_player_first_charge.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_first_charge, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_first_charge),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_finish_share_task) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_finish_share_task,
    case Record#db_player_finish_share_task.row_key of 
        undefined -> 
            AccId = Record#db_player_finish_share_task.acc_id,
            TaskType = Record#db_player_finish_share_task.task_type,
            PlayerId = Record#db_player_finish_share_task.player_id,
            RealRecord = Record#db_player_finish_share_task{row_key ={AccId, TaskType, PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_finish_share_task, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_finish_share_task),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_finish_share_task, Record#db_player_finish_share_task.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_finish_share_task, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_finish_share_task),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_fight_adjust) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_fight_adjust,
    case Record#db_player_fight_adjust.row_key of 
        undefined -> 
            PlayerId = Record#db_player_fight_adjust.player_id,
            PropId = Record#db_player_fight_adjust.prop_id,
            FightType = Record#db_player_fight_adjust.fight_type,
            RealRecord = Record#db_player_fight_adjust{row_key ={PlayerId, PropId, FightType}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_fight_adjust, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_fight_adjust),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_fight_adjust, Record#db_player_fight_adjust.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_fight_adjust, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_fight_adjust),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_everyday_sign) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_everyday_sign,
    case Record#db_player_everyday_sign.row_key of 
        undefined -> 
            PlayerId = Record#db_player_everyday_sign.player_id,
            Today = Record#db_player_everyday_sign.today,
            RealRecord = Record#db_player_everyday_sign{row_key ={PlayerId, Today}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_everyday_sign, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_everyday_sign),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_everyday_sign, Record#db_player_everyday_sign.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_everyday_sign, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_everyday_sign),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_everyday_charge) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_everyday_charge,
    case Record#db_player_everyday_charge.row_key of 
        undefined -> 
            PlayerId = Record#db_player_everyday_charge.player_id,
            RealRecord = Record#db_player_everyday_charge{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_everyday_charge, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_everyday_charge),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_everyday_charge, Record#db_player_everyday_charge.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_everyday_charge, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_everyday_charge),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_data,
    case Record#db_player_data.row_key of 
        undefined -> 
            PlayerId = Record#db_player_data.player_id,
            RealRecord = Record#db_player_data{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_data),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_data, Record#db_player_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_daily_task) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_daily_task,
    case Record#db_player_daily_task.row_key of 
        undefined -> 
            PlayerId = Record#db_player_daily_task.player_id,
            Id = Record#db_player_daily_task.id,
            RealRecord = Record#db_player_daily_task{row_key ={PlayerId, Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_daily_task, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_daily_task),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_daily_task, Record#db_player_daily_task.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_daily_task, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_daily_task),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_daily_points) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_daily_points,
    case Record#db_player_daily_points.row_key of 
        undefined -> 
            PlayerId = Record#db_player_daily_points.player_id,
            Bid = Record#db_player_daily_points.bid,
            RealRecord = Record#db_player_daily_points{row_key ={PlayerId, Bid}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_daily_points, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_daily_points),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_daily_points, Record#db_player_daily_points.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_daily_points, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_daily_points),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_conditions_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_conditions_data,
    case Record#db_player_conditions_data.row_key of 
        undefined -> 
            PlayerId = Record#db_player_conditions_data.player_id,
            ConditionsId = Record#db_player_conditions_data.conditions_id,
            Type = Record#db_player_conditions_data.type,
            Type2 = Record#db_player_conditions_data.type2,
            RealRecord = Record#db_player_conditions_data{row_key ={PlayerId, ConditionsId, Type, Type2}},
            ensure_to_sql(RealRecord),
            true = dets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_conditions_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_conditions_data),
            RealRecord;
        _ ->
            [OldRecord] = dets:lookup(player_conditions_data, Record#db_player_conditions_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    dets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_conditions_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_conditions_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_condition_activity) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_condition_activity,
    case Record#db_player_condition_activity.row_key of 
        undefined -> 
            PlayerId = Record#db_player_condition_activity.player_id,
            ActivityId = Record#db_player_condition_activity.activity_id,
            RealRecord = Record#db_player_condition_activity{row_key ={PlayerId, ActivityId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_condition_activity, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_condition_activity),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_condition_activity, Record#db_player_condition_activity.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_condition_activity, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_condition_activity),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_client_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_client_data,
    case Record#db_player_client_data.row_key of 
        undefined -> 
            PlayerId = Record#db_player_client_data.player_id,
            Id = Record#db_player_client_data.id,
            RealRecord = Record#db_player_client_data{row_key ={PlayerId, Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_client_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_client_data),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_client_data, Record#db_player_client_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_client_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_client_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_chat_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_chat_data,
    case Record#db_player_chat_data.row_key of 
        undefined -> 
            PlayerId = Record#db_player_chat_data.player_id,
            Id = Record#db_player_chat_data.id,
            RealRecord = Record#db_player_chat_data{row_key ={PlayerId, Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_chat_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_chat_data),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_chat_data, Record#db_player_chat_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_chat_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_chat_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_charge_shop) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_charge_shop,
    case Record#db_player_charge_shop.row_key of 
        undefined -> 
            PlayerId = Record#db_player_charge_shop.player_id,
            Id = Record#db_player_charge_shop.id,
            RealRecord = Record#db_player_charge_shop{row_key ={PlayerId, Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_charge_shop, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_charge_shop),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_charge_shop, Record#db_player_charge_shop.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_charge_shop, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_charge_shop),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_charge_record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_charge_record,
    case Record#db_player_charge_record.row_key of 
        undefined -> 
            OrderId = Record#db_player_charge_record.order_id,
            RealRecord = Record#db_player_charge_record{row_key ={OrderId}},
            ensure_to_sql(RealRecord),
            true = dets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_charge_record, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_charge_record),
            RealRecord;
        _ ->
            [OldRecord] = dets:lookup(player_charge_record, Record#db_player_charge_record.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    dets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_charge_record, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_charge_record),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_charge_info_record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_charge_info_record,
    case Record#db_player_charge_info_record.row_key of 
        undefined -> 
            PlayerId = Record#db_player_charge_info_record.player_id,
            RealRecord = Record#db_player_charge_info_record{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = dets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_charge_info_record, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_charge_info_record),
            RealRecord;
        _ ->
            [OldRecord] = dets:lookup(player_charge_info_record, Record#db_player_charge_info_record.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    dets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_charge_info_record, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_charge_info_record),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_charge_activity) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_charge_activity,
    case Record#db_player_charge_activity.row_key of 
        undefined -> 
            PlayerId = Record#db_player_charge_activity.player_id,
            Type = Record#db_player_charge_activity.type,
            Id = Record#db_player_charge_activity.id,
            RealRecord = Record#db_player_charge_activity{row_key ={PlayerId, Type, Id}},
            ensure_to_sql(RealRecord),
            true = dets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_charge_activity, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_charge_activity),
            RealRecord;
        _ ->
            [OldRecord] = dets:lookup(player_charge_activity, Record#db_player_charge_activity.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    dets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_charge_activity, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_charge_activity),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_card_title) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_card_title,
    case Record#db_player_card_title.row_key of 
        undefined -> 
            PlayerId = Record#db_player_card_title.player_id,
            CardTitleId = Record#db_player_card_title.card_title_id,
            RealRecord = Record#db_player_card_title{row_key ={PlayerId, CardTitleId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_card_title, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_card_title),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_card_title, Record#db_player_card_title.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_card_title, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_card_title),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_card_summon) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_card_summon,
    case Record#db_player_card_summon.row_key of 
        undefined -> 
            PlayerId = Record#db_player_card_summon.player_id,
            RealRecord = Record#db_player_card_summon{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_card_summon, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_card_summon),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_card_summon, Record#db_player_card_summon.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_card_summon, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_card_summon),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_card_book) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_card_book,
    case Record#db_player_card_book.row_key of 
        undefined -> 
            PlayerId = Record#db_player_card_book.player_id,
            CardBookId = Record#db_player_card_book.card_book_id,
            RealRecord = Record#db_player_card_book{row_key ={PlayerId, CardBookId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_card_book, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_card_book),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_card_book, Record#db_player_card_book.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_card_book, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_card_book),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_card) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_card,
    case Record#db_player_card.row_key of 
        undefined -> 
            PlayerId = Record#db_player_card.player_id,
            CardId = Record#db_player_card.card_id,
            RealRecord = Record#db_player_card{row_key ={PlayerId, CardId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_card, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_card),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_card, Record#db_player_card.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_card, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_card),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_bounty_task) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_bounty_task,
    case Record#db_player_bounty_task.row_key of 
        undefined -> 
            PlayerId = Record#db_player_bounty_task.player_id,
            Id = Record#db_player_bounty_task.id,
            RealRecord = Record#db_player_bounty_task{row_key ={PlayerId, Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_bounty_task, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_bounty_task),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_bounty_task, Record#db_player_bounty_task.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_bounty_task, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_bounty_task),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_adjust_rebound) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_adjust_rebound,
    case Record#db_player_adjust_rebound.row_key of 
        undefined -> 
            PlayerId = Record#db_player_adjust_rebound.player_id,
            ReboundType = Record#db_player_adjust_rebound.rebound_type,
            RealRecord = Record#db_player_adjust_rebound{row_key ={PlayerId, ReboundType}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_adjust_rebound, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_adjust_rebound),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_adjust_rebound, Record#db_player_adjust_rebound.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_adjust_rebound, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_adjust_rebound),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_activity_task) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_activity_task,
    case Record#db_player_activity_task.row_key of 
        undefined -> 
            PlayerId = Record#db_player_activity_task.player_id,
            ActivityId = Record#db_player_activity_task.activity_id,
            TaskType = Record#db_player_activity_task.task_type,
            RealRecord = Record#db_player_activity_task{row_key ={PlayerId, ActivityId, TaskType}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_activity_task, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_activity_task),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_activity_task, Record#db_player_activity_task.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_activity_task, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_activity_task),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_activity_info) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_activity_info,
    case Record#db_player_activity_info.row_key of 
        undefined -> 
            PlayerId = Record#db_player_activity_info.player_id,
            ActivityId = Record#db_player_activity_info.activity_id,
            RealRecord = Record#db_player_activity_info{row_key ={PlayerId, ActivityId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_activity_info, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_activity_info),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_activity_info, Record#db_player_activity_info.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_activity_info, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_activity_info),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_activity_game_info) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_activity_game_info,
    case Record#db_player_activity_game_info.row_key of 
        undefined -> 
            PlayerId = Record#db_player_activity_game_info.player_id,
            ActivityId = Record#db_player_activity_game_info.activity_id,
            GameId = Record#db_player_activity_game_info.game_id,
            RealRecord = Record#db_player_activity_game_info{row_key ={PlayerId, ActivityId, GameId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_activity_game_info, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_activity_game_info),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_activity_game_info, Record#db_player_activity_game_info.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_activity_game_info, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_activity_game_info),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_activity_game) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_activity_game,
    case Record#db_player_activity_game.row_key of 
        undefined -> 
            PlayerId = Record#db_player_activity_game.player_id,
            ActivityId = Record#db_player_activity_game.activity_id,
            RealRecord = Record#db_player_activity_game{row_key ={PlayerId, ActivityId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player_activity_game, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_activity_game),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_activity_game, Record#db_player_activity_game.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player_activity_game, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_activity_game),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_activity_condition) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_activity_condition,
    case Record#db_player_activity_condition.row_key of 
        undefined -> 
            PlayerId = Record#db_player_activity_condition.player_id,
            ActivityId = Record#db_player_activity_condition.activity_id,
            ConditionId = Record#db_player_activity_condition.condition_id,
            RealRecord = Record#db_player_activity_condition{row_key ={PlayerId, ActivityId, ConditionId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_activity_condition, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_activity_condition),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_activity_condition, Record#db_player_activity_condition.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_activity_condition, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_activity_condition),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player_achievement) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_achievement,
    case Record#db_player_achievement.row_key of 
        undefined -> 
            PlayerId = Record#db_player_achievement.player_id,
            Type = Record#db_player_achievement.type,
            RealRecord = Record#db_player_achievement{row_key ={PlayerId, Type}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, player_achievement, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player_achievement),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player_achievement, Record#db_player_achievement.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, player_achievement, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player_achievement),
                    Record
            end
    end;
write(Record) when is_record(Record, db_player) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player,
    case Record#db_player.row_key of 
        undefined -> 
            Id = Record#db_player.id,
            RealRecord = Record#db_player{row_key ={Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, player, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, player),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(player, Record#db_player.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, player, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, player),
                    Record
            end
    end;
write(Record) when is_record(Record, db_one_vs_one_rank_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = one_vs_one_rank_data,
    case Record#db_one_vs_one_rank_data.row_key of 
        undefined -> 
            Type = Record#db_one_vs_one_rank_data.type,
            PlayerId = Record#db_one_vs_one_rank_data.player_id,
            RealRecord = Record#db_one_vs_one_rank_data{row_key ={Type, PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, one_vs_one_rank_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, one_vs_one_rank_data),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(one_vs_one_rank_data, Record#db_one_vs_one_rank_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, one_vs_one_rank_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, one_vs_one_rank_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_oauth_order_log) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = oauth_order_log,
    case Record#db_oauth_order_log.row_key of 
        undefined -> 
            OrderId = Record#db_oauth_order_log.order_id,
            RealRecord = Record#db_oauth_order_log{row_key ={OrderId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, oauth_order_log, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, oauth_order_log),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(oauth_order_log, Record#db_oauth_order_log.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, oauth_order_log, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, oauth_order_log),
                    Record
            end
    end;
write(Record) when is_record(Record, db_mission_ranking) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = mission_ranking,
    case Record#db_mission_ranking.row_key of 
        undefined -> 
            MissionType = Record#db_mission_ranking.mission_type,
            MissionId = Record#db_mission_ranking.mission_id,
            Id = Record#db_mission_ranking.id,
            PlayerId = Record#db_mission_ranking.player_id,
            RealRecord = Record#db_mission_ranking{row_key ={MissionType, MissionId, Id, PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, mission_ranking, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, mission_ranking),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(mission_ranking, Record#db_mission_ranking.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, mission_ranking, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, mission_ranking),
                    Record
            end
    end;
write(Record) when is_record(Record, db_mission_guess_boss) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = mission_guess_boss,
    case Record#db_mission_guess_boss.row_key of 
        undefined -> 
            Id = Record#db_mission_guess_boss.id,
            RealRecord = Record#db_mission_guess_boss{row_key ={Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, mission_guess_boss, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, mission_guess_boss),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(mission_guess_boss, Record#db_mission_guess_boss.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, mission_guess_boss, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, mission_guess_boss),
                    Record
            end
    end;
write(Record) when is_record(Record, db_match_scene_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = match_scene_data,
    case Record#db_match_scene_data.row_key of 
        undefined -> 
            Id = Record#db_match_scene_data.id,
            RealRecord = Record#db_match_scene_data{row_key ={Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, match_scene_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, match_scene_data),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(match_scene_data, Record#db_match_scene_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, match_scene_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, match_scene_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_login_notice) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = login_notice,
    case Record#db_login_notice.row_key of 
        undefined -> 
            PlatformId = Record#db_login_notice.platform_id,
            ChannelId = Record#db_login_notice.channel_id,
            RealRecord = Record#db_login_notice{row_key ={PlatformId, ChannelId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, login_notice, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, login_notice),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(login_notice, Record#db_login_notice.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, login_notice, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, login_notice),
                    Record
            end
    end;
write(Record) when is_record(Record, db_laba_adjust) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = laba_adjust,
    case Record#db_laba_adjust.row_key of 
        undefined -> 
            LabaId = Record#db_laba_adjust.laba_id,
            CostRate = Record#db_laba_adjust.cost_rate,
            RealRecord = Record#db_laba_adjust{row_key ={LabaId, CostRate}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, laba_adjust, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, laba_adjust),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(laba_adjust, Record#db_laba_adjust.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, laba_adjust, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, laba_adjust),
                    Record
            end
    end;
write(Record) when is_record(Record, db_jiangjinchi) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = jiangjinchi,
    case Record#db_jiangjinchi.row_key of 
        undefined -> 
            SceneId = Record#db_jiangjinchi.scene_id,
            RealRecord = Record#db_jiangjinchi{row_key ={SceneId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, jiangjinchi, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, jiangjinchi),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(jiangjinchi, Record#db_jiangjinchi.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, jiangjinchi, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, jiangjinchi),
                    Record
            end
    end;
write(Record) when is_record(Record, db_gift_code_type) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = gift_code_type,
    case Record#db_gift_code_type.row_key of 
        undefined -> 
            case Record#db_gift_code_type.type of
                undefined ->
                    Type = ets:update_counter(auto_increment, gift_code_type, 1),
                    RealRecord = Record#db_gift_code_type{row_key ={Type}, type = Type};
                Type->
                    RealRecord = Record#db_gift_code_type{row_key ={Type}}
            end,
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, gift_code_type, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, gift_code_type),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(gift_code_type, Record#db_gift_code_type.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, gift_code_type, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, gift_code_type),
                    Record
            end
    end;
write(Record) when is_record(Record, db_gift_code) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = gift_code,
    case Record#db_gift_code.row_key of 
        undefined -> 
            GiftCode = Record#db_gift_code.gift_code,
            RealRecord = Record#db_gift_code{row_key ={GiftCode}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, gift_code, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, gift_code),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(gift_code, Record#db_gift_code.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, gift_code, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, gift_code),
                    Record
            end
    end;
write(Record) when is_record(Record, db_consume_statistics) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = consume_statistics,
    case Record#db_consume_statistics.row_key of 
        undefined -> 
            PlayerId = Record#db_consume_statistics.player_id,
            PropId = Record#db_consume_statistics.prop_id,
            Type = Record#db_consume_statistics.type,
            LogType = Record#db_consume_statistics.log_type,
            SceneId = Record#db_consume_statistics.scene_id,
            RealRecord = Record#db_consume_statistics{row_key ={PlayerId, PropId, Type, LogType, SceneId}},
            ensure_to_sql(RealRecord),
            true = dets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, consume_statistics, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, consume_statistics),
            RealRecord;
        _ ->
            [OldRecord] = dets:lookup(consume_statistics, Record#db_consume_statistics.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    dets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, consume_statistics, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, consume_statistics),
                    Record
            end
    end;
write(Record) when is_record(Record, db_client_versin) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = client_versin,
    case Record#db_client_versin.row_key of 
        undefined -> 
            Version = Record#db_client_versin.version,
            RealRecord = Record#db_client_versin{row_key ={Version}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, client_versin, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, client_versin),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(client_versin, Record#db_client_versin.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, client_versin, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, client_versin),
                    Record
            end
    end;
write(Record) when is_record(Record, db_charge_order_request_record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = charge_order_request_record,
    case Record#db_charge_order_request_record.row_key of 
        undefined -> 
            OrderId = Record#db_charge_order_request_record.order_id,
            RealRecord = Record#db_charge_order_request_record{row_key ={OrderId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, charge_order_request_record, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, charge_order_request_record),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(charge_order_request_record, Record#db_charge_order_request_record.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, charge_order_request_record, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, charge_order_request_record),
                    Record
            end
    end;
write(Record) when is_record(Record, db_charge_ip_white_record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = charge_ip_white_record,
    case Record#db_charge_ip_white_record.row_key of 
        undefined -> 
            Ip = Record#db_charge_ip_white_record.ip,
            RealRecord = Record#db_charge_ip_white_record{row_key ={Ip}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, charge_ip_white_record, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, charge_ip_white_record),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(charge_ip_white_record, Record#db_charge_ip_white_record.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, charge_ip_white_record, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, charge_ip_white_record),
                    Record
            end
    end;
write(Record) when is_record(Record, db_charge_info_record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = charge_info_record,
    case Record#db_charge_info_record.row_key of 
        undefined -> 
            OrderId = Record#db_charge_info_record.order_id,
            RealRecord = Record#db_charge_info_record{row_key ={OrderId}},
            ensure_to_sql(RealRecord),
            true = dets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, charge_info_record, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, charge_info_record),
            RealRecord;
        _ ->
            [OldRecord] = dets:lookup(charge_info_record, Record#db_charge_info_record.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    dets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, charge_info_record, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, charge_info_record),
                    Record
            end
    end;
write(Record) when is_record(Record, db_c_server_node) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = c_server_node,
    case Record#db_c_server_node.row_key of 
        undefined -> 
            Node = Record#db_c_server_node.node,
            RealRecord = Record#db_c_server_node{row_key ={Node}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, c_server_node, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, c_server_node),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(c_server_node, Record#db_c_server_node.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, c_server_node, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, c_server_node),
                    Record
            end
    end;
write(Record) when is_record(Record, db_c_game_server) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = c_game_server,
    case Record#db_c_game_server.row_key of 
        undefined -> 
            PlatformId = Record#db_c_game_server.platform_id,
            Sid = Record#db_c_game_server.sid,
            RealRecord = Record#db_c_game_server{row_key ={PlatformId, Sid}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, c_game_server, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, c_game_server),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(c_game_server, Record#db_c_game_server.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, c_game_server, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, c_game_server),
                    Record
            end
    end;
write(Record) when is_record(Record, db_brave_one) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = brave_one,
    case Record#db_brave_one.row_key of 
        undefined -> 
            PlayerId = Record#db_brave_one.player_id,
            RealRecord = Record#db_brave_one{row_key ={PlayerId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            db_index:insert_index(RealRecord),
            add_tran_action({EtsTable, brave_one, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, brave_one),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(brave_one, Record#db_brave_one.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    db_index:update_index(OldRecord, Record),
                    add_tran_action({EtsTable, brave_one, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, brave_one),
                    Record
            end
    end;
write(Record) when is_record(Record, db_boss_one_on_one) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = boss_one_on_one,
    case Record#db_boss_one_on_one.row_key of 
        undefined -> 
            Id = Record#db_boss_one_on_one.id,
            RealRecord = Record#db_boss_one_on_one{row_key ={Id}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, boss_one_on_one, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, boss_one_on_one),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(boss_one_on_one, Record#db_boss_one_on_one.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, boss_one_on_one, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, boss_one_on_one),
                    Record
            end
    end;
write(Record) when is_record(Record, db_activity_info) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = activity_info,
    case Record#db_activity_info.row_key of 
        undefined -> 
            ActivityId = Record#db_activity_info.activity_id,
            RealRecord = Record#db_activity_info{row_key ={ActivityId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, activity_info, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, activity_info),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(activity_info, Record#db_activity_info.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, activity_info, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, activity_info),
                    Record
            end
    end;
write(Record) when is_record(Record, db_activity_award) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = activity_award,
    case Record#db_activity_award.row_key of 
        undefined -> 
            ActivityId = Record#db_activity_award.activity_id,
            RealRecord = Record#db_activity_award{row_key ={ActivityId}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, activity_award, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, activity_award),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(activity_award, Record#db_activity_award.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, activity_award, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, activity_award),
                    Record
            end
    end;
write(Record) when is_record(Record, db_account_share_data) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = account_share_data,
    case Record#db_account_share_data.row_key of 
        undefined -> 
            PlatformId = Record#db_account_share_data.platform_id,
            Account = Record#db_account_share_data.account,
            RealRecord = Record#db_account_share_data{row_key ={PlatformId, Account}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, account_share_data, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, account_share_data),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(account_share_data, Record#db_account_share_data.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, account_share_data, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, account_share_data),
                    Record
            end
    end;
write(Record) when is_record(Record, db_account_charge_white) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = account_charge_white,
    case Record#db_account_charge_white.row_key of 
        undefined -> 
            PlatformId = Record#db_account_charge_white.platform_id,
            Account = Record#db_account_charge_white.account,
            RealRecord = Record#db_account_charge_white{row_key ={PlatformId, Account}},
            ensure_to_sql(RealRecord),
            true = ets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, account_charge_white, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, account_charge_white),
            RealRecord;
        _ ->
            [OldRecord] = ets:lookup(account_charge_white, Record#db_account_charge_white.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    ets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, account_charge_white, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, account_charge_white),
                    Record
            end
    end;
write(Record) when is_record(Record, db_account) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = account,
    case Record#db_account.row_key of 
        undefined -> 
            AccId = Record#db_account.acc_id,
            ServerId = Record#db_account.server_id,
            RealRecord = Record#db_account{row_key ={AccId, ServerId}},
            ensure_to_sql(RealRecord),
            true = dets:insert_new(EtsTable, [RealRecord]),
            add_tran_action({EtsTable, account, insert, RealRecord}),
            ?STOP_PROF(?MODULE, insert, account),
            RealRecord;
        _ ->
            [OldRecord] = dets:lookup(account, Record#db_account.row_key),
            if OldRecord == Record -> Record;
                true ->
                    ensure_to_sql(Record),
                    dets:insert(EtsTable, [Record]),
                    add_tran_action({EtsTable, account, update, Record, OldRecord}),
                    ?STOP_PROF(?MODULE, update, account),
                    Record
            end
    end.

dirty_write(Record) when is_record(Record, db_player_prop_log) ->
    ?START_PROF,
    case is_tran() of
       false ->
           db_proxy:fetch(tran_to_sql({player_prop_log, insert, Record})), Record;
       true ->
           add_dirty_action({player_prop_log, insert, Record}), Record
    end,
    ?STOP_PROF(?MODULE, insert, player_prop_log);
dirty_write(Record) when is_record(Record, db_player_online_log) ->
    ?START_PROF,
    case is_tran() of
       false ->
           db_proxy:fetch(tran_to_sql({player_online_log, insert, Record})), Record;
       true ->
           add_dirty_action({player_online_log, insert, Record}), Record
    end,
    ?STOP_PROF(?MODULE, insert, player_online_log);
dirty_write(Record) when is_record(Record, db_player_login_log) ->
    ?START_PROF,
    case is_tran() of
       false ->
           db_proxy:fetch(tran_to_sql({player_login_log, insert, Record})), Record;
       true ->
           add_dirty_action({player_login_log, insert, Record}), Record
    end,
    ?STOP_PROF(?MODULE, insert, player_login_log);
dirty_write(Record) when is_record(Record, db_player_game_log) ->
    ?START_PROF,
    case is_tran() of
       false ->
           db_proxy:fetch(tran_to_sql({player_game_log, insert, Record})), Record;
       true ->
           add_dirty_action({player_game_log, insert, Record}), Record
    end,
    ?STOP_PROF(?MODULE, insert, player_game_log);
dirty_write(Record) when is_record(Record, db_player_client_log) ->
    ?START_PROF,
    case is_tran() of
       false ->
           db_proxy:fetch(tran_to_sql({player_client_log, insert, Record})), Record;
       true ->
           add_dirty_action({player_client_log, insert, Record}), Record
    end,
    ?STOP_PROF(?MODULE, insert, player_client_log);
dirty_write(Record) when is_record(Record, db_phone_unique_id) ->
    ?START_PROF,
    case is_tran() of
       false ->
           db_proxy:fetch(tran_to_sql({phone_unique_id, insert, Record})), Record;
       true ->
           add_dirty_action({phone_unique_id, insert, Record}), Record
    end,
    ?STOP_PROF(?MODULE, insert, phone_unique_id);
dirty_write(Record) when is_record(Record, db_global_player) ->
    ?START_PROF,
    case is_tran() of
       false ->
           db_proxy:fetch(tran_to_sql({global_player, insert, Record})), Record;
       true ->
           add_dirty_action({global_player, insert, Record}), Record
    end,
    ?STOP_PROF(?MODULE, insert, global_player);
dirty_write(Record) when is_record(Record, db_global_account) ->
    ?START_PROF,
    case is_tran() of
       false ->
           db_proxy:fetch(tran_to_sql({global_account, insert, Record})), Record;
       true ->
           add_dirty_action({global_account, insert, Record}), Record
    end,
    ?STOP_PROF(?MODULE, insert, global_account).

delete(#db_wheel_result_record_accumulate{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = wheel_result_record_accumulate,
    add_tran_action({EtsTable, wheel_result_record_accumulate, delete, Record}),
    ets:delete_object(wheel_result_record_accumulate, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, wheel_result_record_accumulate);

delete(#db_wheel_result_record{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = wheel_result_record,
    add_tran_action({EtsTable, wheel_result_record, delete, Record}),
    ets:delete_object(wheel_result_record, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, wheel_result_record);

delete(#db_wheel_pool{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = wheel_pool,
    add_tran_action({EtsTable, wheel_pool, delete, Record}),
    ets:delete_object(wheel_pool, Record),
    ?STOP_PROF(?MODULE, delete, wheel_pool);

delete(#db_wheel_player_bet_record_today{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = wheel_player_bet_record_today,
    add_tran_action({EtsTable, wheel_player_bet_record_today, delete, Record}),
    ets:delete_object(wheel_player_bet_record_today, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, wheel_player_bet_record_today);

delete(#db_wheel_player_bet_record{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = wheel_player_bet_record,
    add_tran_action({EtsTable, wheel_player_bet_record, delete, Record}),
    ets:delete_object(wheel_player_bet_record, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, wheel_player_bet_record);

delete(#db_unique_id_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = unique_id_data,
    add_tran_action({EtsTable, unique_id_data, delete, Record}),
    ets:delete_object(unique_id_data, Record),
    ?STOP_PROF(?MODULE, delete, unique_id_data);

delete(#db_tongxingzheng_month_task{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = tongxingzheng_month_task,
    add_tran_action({EtsTable, tongxingzheng_month_task, delete, Record}),
    ets:delete_object(tongxingzheng_month_task, Record),
    ?STOP_PROF(?MODULE, delete, tongxingzheng_month_task);

delete(#db_tongxingzheng_daily_task{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = tongxingzheng_daily_task,
    add_tran_action({EtsTable, tongxingzheng_daily_task, delete, Record}),
    ets:delete_object(tongxingzheng_daily_task, Record),
    ?STOP_PROF(?MODULE, delete, tongxingzheng_daily_task);

delete(#db_timer_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = timer_data,
    add_tran_action({EtsTable, timer_data, delete, Record}),
    ets:delete_object(timer_data, Record),
    ?STOP_PROF(?MODULE, delete, timer_data);

delete(#db_test{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = test,
    add_tran_action({EtsTable, test, delete, Record}),
    ets:delete_object(test, Record),
    ?STOP_PROF(?MODULE, delete, test);

delete(#db_server_state{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = server_state,
    add_tran_action({EtsTable, server_state, delete, Record}),
    ets:delete_object(server_state, Record),
    ?STOP_PROF(?MODULE, delete, server_state);

delete(#db_server_player_fight_adjust{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = server_player_fight_adjust,
    add_tran_action({EtsTable, server_player_fight_adjust, delete, Record}),
    ets:delete_object(server_player_fight_adjust, Record),
    ?STOP_PROF(?MODULE, delete, server_player_fight_adjust);

delete(#db_server_game_config{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = server_game_config,
    add_tran_action({EtsTable, server_game_config, delete, Record}),
    ets:delete_object(server_game_config, Record),
    ?STOP_PROF(?MODULE, delete, server_game_config);

delete(#db_server_fight_adjust{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = server_fight_adjust,
    add_tran_action({EtsTable, server_fight_adjust, delete, Record}),
    ets:delete_object(server_fight_adjust, Record),
    ?STOP_PROF(?MODULE, delete, server_fight_adjust);

delete(#db_server_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = server_data,
    add_tran_action({EtsTable, server_data, delete, Record}),
    ets:delete_object(server_data, Record),
    ?STOP_PROF(?MODULE, delete, server_data);

delete(#db_scene_log{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = scene_log,
    add_tran_action({EtsTable, scene_log, delete, Record}),
    ets:delete_object(scene_log, Record),
    ?STOP_PROF(?MODULE, delete, scene_log);

delete(#db_scene_boss_adjust{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = scene_boss_adjust,
    add_tran_action({EtsTable, scene_boss_adjust, delete, Record}),
    ets:delete_object(scene_boss_adjust, Record),
    ?STOP_PROF(?MODULE, delete, scene_boss_adjust);

delete(#db_scene_adjust{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = scene_adjust,
    add_tran_action({EtsTable, scene_adjust, delete, Record}),
    ets:delete_object(scene_adjust, Record),
    ?STOP_PROF(?MODULE, delete, scene_adjust);

delete(#db_robot_player_scene_cache{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = robot_player_scene_cache,
    add_tran_action({EtsTable, robot_player_scene_cache, delete, Record}),
    ets:delete_object(robot_player_scene_cache, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, robot_player_scene_cache);

delete(#db_robot_player_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = robot_player_data,
    add_tran_action({EtsTable, robot_player_data, delete, Record}),
    ets:delete_object(robot_player_data, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, robot_player_data);

delete(#db_red_packet_condition{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = red_packet_condition,
    add_tran_action({EtsTable, red_packet_condition, delete, Record}),
    ets:delete_object(red_packet_condition, Record),
    ?STOP_PROF(?MODULE, delete, red_packet_condition);

delete(#db_rank_info{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = rank_info,
    add_tran_action({EtsTable, rank_info, delete, Record}),
    ets:delete_object(rank_info, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, rank_info);

delete(#db_promote_record{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = promote_record,
    add_tran_action({EtsTable, promote_record, delete, Record}),
    ets:delete_object(promote_record, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, promote_record);

delete(#db_promote_info{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = promote_info,
    add_tran_action({EtsTable, promote_info, delete, Record}),
    ets:delete_object(promote_info, Record),
    ?STOP_PROF(?MODULE, delete, promote_info);

delete(#db_promote{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = promote,
    add_tran_action({EtsTable, promote, delete, Record}),
    ets:delete_object(promote, Record),
    ?STOP_PROF(?MODULE, delete, promote);

delete(#db_player_vip_award{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_vip_award,
    add_tran_action({EtsTable, player_vip_award, delete, Record}),
    ets:delete_object(player_vip_award, Record),
    ?STOP_PROF(?MODULE, delete, player_vip_award);

delete(#db_player_vip{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_vip,
    add_tran_action({EtsTable, player_vip, delete, Record}),
    ets:delete_object(player_vip, Record),
    ?STOP_PROF(?MODULE, delete, player_vip);

delete(#db_player_title{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_title,
    add_tran_action({EtsTable, player_title, delete, Record}),
    ets:delete_object(player_title, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_title);

delete(#db_player_times_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_times_data,
    add_tran_action({EtsTable, player_times_data, delete, Record}),
    ets:delete_object(player_times_data, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_times_data);

delete(#db_player_task_share_award{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_task_share_award,
    add_tran_action({EtsTable, player_task_share_award, delete, Record}),
    ets:delete_object(player_task_share_award, Record),
    ?STOP_PROF(?MODULE, delete, player_task_share_award);

delete(#db_player_task{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_task,
    add_tran_action({EtsTable, player_task, delete, Record}),
    ets:delete_object(player_task, Record),
    ?STOP_PROF(?MODULE, delete, player_task);

delete(#db_player_sys_common{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_sys_common,
    add_tran_action({EtsTable, player_sys_common, delete, Record}),
    ets:delete_object(player_sys_common, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_sys_common);

delete(#db_player_sys_attr{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_sys_attr,
    add_tran_action({EtsTable, player_sys_attr, delete, Record}),
    dets:delete_object(player_sys_attr, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_sys_attr);

delete(#db_player_special_prop{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_special_prop,
    add_tran_action({EtsTable, player_special_prop, delete, Record}),
    ets:delete_object(player_special_prop, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_special_prop);

delete(#db_player_shop{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_shop,
    add_tran_action({EtsTable, player_shop, delete, Record}),
    ets:delete_object(player_shop, Record),
    ?STOP_PROF(?MODULE, delete, player_shop);

delete(#db_player_shen_long{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_shen_long,
    add_tran_action({EtsTable, player_shen_long, delete, Record}),
    ets:delete_object(player_shen_long, Record),
    ?STOP_PROF(?MODULE, delete, player_shen_long);

delete(#db_player_share_task_award{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_share_task_award,
    add_tran_action({EtsTable, player_share_task_award, delete, Record}),
    ets:delete_object(player_share_task_award, Record),
    ?STOP_PROF(?MODULE, delete, player_share_task_award);

delete(#db_player_share_task{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_share_task,
    add_tran_action({EtsTable, player_share_task, delete, Record}),
    ets:delete_object(player_share_task, Record),
    ?STOP_PROF(?MODULE, delete, player_share_task);

delete(#db_player_share_friend{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_share_friend,
    add_tran_action({EtsTable, player_share_friend, delete, Record}),
    ets:delete_object(player_share_friend, Record),
    ?STOP_PROF(?MODULE, delete, player_share_friend);

delete(#db_player_share{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_share,
    add_tran_action({EtsTable, player_share, delete, Record}),
    ets:delete_object(player_share, Record),
    ?STOP_PROF(?MODULE, delete, player_share);

delete(#db_player_seven_login{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_seven_login,
    add_tran_action({EtsTable, player_seven_login, delete, Record}),
    ets:delete_object(player_seven_login, Record),
    ?STOP_PROF(?MODULE, delete, player_seven_login);

delete(#db_player_server_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_server_data,
    add_tran_action({EtsTable, player_server_data, delete, Record}),
    dets:delete_object(player_server_data, Record),
    ?STOP_PROF(?MODULE, delete, player_server_data);

delete(#db_player_send_gamebar_msg{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_send_gamebar_msg,
    add_tran_action({EtsTable, player_send_gamebar_msg, delete, Record}),
    ets:delete_object(player_send_gamebar_msg, Record),
    ?STOP_PROF(?MODULE, delete, player_send_gamebar_msg);

delete(#db_player_prop{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_prop,
    add_tran_action({EtsTable, player_prop, delete, Record}),
    ets:delete_object(player_prop, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_prop);

delete(#db_player_prerogative_card{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_prerogative_card,
    add_tran_action({EtsTable, player_prerogative_card, delete, Record}),
    ets:delete_object(player_prerogative_card, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_prerogative_card);

delete(#db_player_platform_award{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_platform_award,
    add_tran_action({EtsTable, player_platform_award, delete, Record}),
    ets:delete_object(player_platform_award, Record),
    ?STOP_PROF(?MODULE, delete, player_platform_award);

delete(#db_player_passive_skill{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_passive_skill,
    add_tran_action({EtsTable, player_passive_skill, delete, Record}),
    ets:delete_object(player_passive_skill, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_passive_skill);

delete(#db_player_online_info{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_online_info,
    add_tran_action({EtsTable, player_online_info, delete, Record}),
    ets:delete_object(player_online_info, Record),
    ?STOP_PROF(?MODULE, delete, player_online_info);

delete(#db_player_online_award{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_online_award,
    add_tran_action({EtsTable, player_online_award, delete, Record}),
    ets:delete_object(player_online_award, Record),
    ?STOP_PROF(?MODULE, delete, player_online_award);

delete(#db_player_offline_apply{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_offline_apply,
    add_tran_action({EtsTable, player_offline_apply, delete, Record}),
    dets:delete_object(player_offline_apply, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_offline_apply);

delete(#db_player_mission_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_mission_data,
    add_tran_action({EtsTable, player_mission_data, delete, Record}),
    ets:delete_object(player_mission_data, Record),
    ?STOP_PROF(?MODULE, delete, player_mission_data);

delete(#db_player_mail{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_mail,
    add_tran_action({EtsTable, player_mail, delete, Record}),
    ets:delete_object(player_mail, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_mail);

delete(#db_player_leichong{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_leichong,
    add_tran_action({EtsTable, player_leichong, delete, Record}),
    ets:delete_object(player_leichong, Record),
    ?STOP_PROF(?MODULE, delete, player_leichong);

delete(#db_player_laba_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_laba_data,
    add_tran_action({EtsTable, player_laba_data, delete, Record}),
    ets:delete_object(player_laba_data, Record),
    ?STOP_PROF(?MODULE, delete, player_laba_data);

delete(#db_player_jiangjinchi{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_jiangjinchi,
    add_tran_action({EtsTable, player_jiangjinchi, delete, Record}),
    ets:delete_object(player_jiangjinchi, Record),
    ?STOP_PROF(?MODULE, delete, player_jiangjinchi);

delete(#db_player_invite_friend_log{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_invite_friend_log,
    add_tran_action({EtsTable, player_invite_friend_log, delete, Record}),
    ets:delete_object(player_invite_friend_log, Record),
    ?STOP_PROF(?MODULE, delete, player_invite_friend_log);

delete(#db_player_invite_friend{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_invite_friend,
    add_tran_action({EtsTable, player_invite_friend, delete, Record}),
    ets:delete_object(player_invite_friend, Record),
    ?STOP_PROF(?MODULE, delete, player_invite_friend);

delete(#db_player_invest_type{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_invest_type,
    add_tran_action({EtsTable, player_invest_type, delete, Record}),
    ets:delete_object(player_invest_type, Record),
    ?STOP_PROF(?MODULE, delete, player_invest_type);

delete(#db_player_invest{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_invest,
    add_tran_action({EtsTable, player_invest, delete, Record}),
    ets:delete_object(player_invest, Record),
    ?STOP_PROF(?MODULE, delete, player_invest);

delete(#db_player_hero_use{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_hero_use,
    add_tran_action({EtsTable, player_hero_use, delete, Record}),
    ets:delete_object(player_hero_use, Record),
    ?STOP_PROF(?MODULE, delete, player_hero_use);

delete(#db_player_hero_parts{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_hero_parts,
    add_tran_action({EtsTable, player_hero_parts, delete, Record}),
    ets:delete_object(player_hero_parts, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_hero_parts);

delete(#db_player_hero{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_hero,
    add_tran_action({EtsTable, player_hero, delete, Record}),
    ets:delete_object(player_hero, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_hero);

delete(#db_player_gift_mail_log{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_gift_mail_log,
    add_tran_action({EtsTable, player_gift_mail_log, delete, Record}),
    ets:delete_object(player_gift_mail_log, Record),
    ?STOP_PROF(?MODULE, delete, player_gift_mail_log);

delete(#db_player_gift_mail{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_gift_mail,
    add_tran_action({EtsTable, player_gift_mail, delete, Record}),
    ets:delete_object(player_gift_mail, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_gift_mail);

delete(#db_player_gift_code{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_gift_code,
    add_tran_action({EtsTable, player_gift_code, delete, Record}),
    ets:delete_object(player_gift_code, Record),
    ?STOP_PROF(?MODULE, delete, player_gift_code);

delete(#db_player_game_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_game_data,
    add_tran_action({EtsTable, player_game_data, delete, Record}),
    dets:delete_object(player_game_data, Record),
    ?STOP_PROF(?MODULE, delete, player_game_data);

delete(#db_player_game_config{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_game_config,
    add_tran_action({EtsTable, player_game_config, delete, Record}),
    ets:delete_object(player_game_config, Record),
    ?STOP_PROF(?MODULE, delete, player_game_config);

delete(#db_player_function{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_function,
    add_tran_action({EtsTable, player_function, delete, Record}),
    ets:delete_object(player_function, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_function);

delete(#db_player_first_charge_day{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_first_charge_day,
    add_tran_action({EtsTable, player_first_charge_day, delete, Record}),
    ets:delete_object(player_first_charge_day, Record),
    ?STOP_PROF(?MODULE, delete, player_first_charge_day);

delete(#db_player_first_charge{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_first_charge,
    add_tran_action({EtsTable, player_first_charge, delete, Record}),
    ets:delete_object(player_first_charge, Record),
    ?STOP_PROF(?MODULE, delete, player_first_charge);

delete(#db_player_finish_share_task{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_finish_share_task,
    add_tran_action({EtsTable, player_finish_share_task, delete, Record}),
    ets:delete_object(player_finish_share_task, Record),
    ?STOP_PROF(?MODULE, delete, player_finish_share_task);

delete(#db_player_fight_adjust{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_fight_adjust,
    add_tran_action({EtsTable, player_fight_adjust, delete, Record}),
    ets:delete_object(player_fight_adjust, Record),
    ?STOP_PROF(?MODULE, delete, player_fight_adjust);

delete(#db_player_everyday_sign{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_everyday_sign,
    add_tran_action({EtsTable, player_everyday_sign, delete, Record}),
    ets:delete_object(player_everyday_sign, Record),
    ?STOP_PROF(?MODULE, delete, player_everyday_sign);

delete(#db_player_everyday_charge{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_everyday_charge,
    add_tran_action({EtsTable, player_everyday_charge, delete, Record}),
    ets:delete_object(player_everyday_charge, Record),
    ?STOP_PROF(?MODULE, delete, player_everyday_charge);

delete(#db_player_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_data,
    add_tran_action({EtsTable, player_data, delete, Record}),
    ets:delete_object(player_data, Record),
    ?STOP_PROF(?MODULE, delete, player_data);

delete(#db_player_daily_task{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_daily_task,
    add_tran_action({EtsTable, player_daily_task, delete, Record}),
    ets:delete_object(player_daily_task, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_daily_task);

delete(#db_player_daily_points{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_daily_points,
    add_tran_action({EtsTable, player_daily_points, delete, Record}),
    ets:delete_object(player_daily_points, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_daily_points);

delete(#db_player_conditions_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_conditions_data,
    add_tran_action({EtsTable, player_conditions_data, delete, Record}),
    dets:delete_object(player_conditions_data, Record),
    ?STOP_PROF(?MODULE, delete, player_conditions_data);

delete(#db_player_condition_activity{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_condition_activity,
    add_tran_action({EtsTable, player_condition_activity, delete, Record}),
    ets:delete_object(player_condition_activity, Record),
    ?STOP_PROF(?MODULE, delete, player_condition_activity);

delete(#db_player_client_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_client_data,
    add_tran_action({EtsTable, player_client_data, delete, Record}),
    ets:delete_object(player_client_data, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_client_data);

delete(#db_player_chat_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_chat_data,
    add_tran_action({EtsTable, player_chat_data, delete, Record}),
    ets:delete_object(player_chat_data, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_chat_data);

delete(#db_player_charge_shop{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_charge_shop,
    add_tran_action({EtsTable, player_charge_shop, delete, Record}),
    ets:delete_object(player_charge_shop, Record),
    ?STOP_PROF(?MODULE, delete, player_charge_shop);

delete(#db_player_charge_record{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_charge_record,
    add_tran_action({EtsTable, player_charge_record, delete, Record}),
    dets:delete_object(player_charge_record, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_charge_record);

delete(#db_player_charge_info_record{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_charge_info_record,
    add_tran_action({EtsTable, player_charge_info_record, delete, Record}),
    dets:delete_object(player_charge_info_record, Record),
    ?STOP_PROF(?MODULE, delete, player_charge_info_record);

delete(#db_player_charge_activity{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_charge_activity,
    add_tran_action({EtsTable, player_charge_activity, delete, Record}),
    dets:delete_object(player_charge_activity, Record),
    ?STOP_PROF(?MODULE, delete, player_charge_activity);

delete(#db_player_card_title{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_card_title,
    add_tran_action({EtsTable, player_card_title, delete, Record}),
    ets:delete_object(player_card_title, Record),
    ?STOP_PROF(?MODULE, delete, player_card_title);

delete(#db_player_card_summon{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_card_summon,
    add_tran_action({EtsTable, player_card_summon, delete, Record}),
    ets:delete_object(player_card_summon, Record),
    ?STOP_PROF(?MODULE, delete, player_card_summon);

delete(#db_player_card_book{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_card_book,
    add_tran_action({EtsTable, player_card_book, delete, Record}),
    ets:delete_object(player_card_book, Record),
    ?STOP_PROF(?MODULE, delete, player_card_book);

delete(#db_player_card{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_card,
    add_tran_action({EtsTable, player_card, delete, Record}),
    ets:delete_object(player_card, Record),
    ?STOP_PROF(?MODULE, delete, player_card);

delete(#db_player_bounty_task{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_bounty_task,
    add_tran_action({EtsTable, player_bounty_task, delete, Record}),
    ets:delete_object(player_bounty_task, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_bounty_task);

delete(#db_player_adjust_rebound{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_adjust_rebound,
    add_tran_action({EtsTable, player_adjust_rebound, delete, Record}),
    ets:delete_object(player_adjust_rebound, Record),
    ?STOP_PROF(?MODULE, delete, player_adjust_rebound);

delete(#db_player_activity_task{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_activity_task,
    add_tran_action({EtsTable, player_activity_task, delete, Record}),
    ets:delete_object(player_activity_task, Record),
    ?STOP_PROF(?MODULE, delete, player_activity_task);

delete(#db_player_activity_info{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_activity_info,
    add_tran_action({EtsTable, player_activity_info, delete, Record}),
    ets:delete_object(player_activity_info, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_activity_info);

delete(#db_player_activity_game_info{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_activity_game_info,
    add_tran_action({EtsTable, player_activity_game_info, delete, Record}),
    ets:delete_object(player_activity_game_info, Record),
    ?STOP_PROF(?MODULE, delete, player_activity_game_info);

delete(#db_player_activity_game{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_activity_game,
    add_tran_action({EtsTable, player_activity_game, delete, Record}),
    ets:delete_object(player_activity_game, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player_activity_game);

delete(#db_player_activity_condition{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_activity_condition,
    add_tran_action({EtsTable, player_activity_condition, delete, Record}),
    ets:delete_object(player_activity_condition, Record),
    ?STOP_PROF(?MODULE, delete, player_activity_condition);

delete(#db_player_achievement{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player_achievement,
    add_tran_action({EtsTable, player_achievement, delete, Record}),
    ets:delete_object(player_achievement, Record),
    ?STOP_PROF(?MODULE, delete, player_achievement);

delete(#db_player{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = player,
    add_tran_action({EtsTable, player, delete, Record}),
    ets:delete_object(player, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, player);

delete(#db_one_vs_one_rank_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = one_vs_one_rank_data,
    add_tran_action({EtsTable, one_vs_one_rank_data, delete, Record}),
    ets:delete_object(one_vs_one_rank_data, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, one_vs_one_rank_data);

delete(#db_oauth_order_log{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = oauth_order_log,
    add_tran_action({EtsTable, oauth_order_log, delete, Record}),
    ets:delete_object(oauth_order_log, Record),
    ?STOP_PROF(?MODULE, delete, oauth_order_log);

delete(#db_mission_ranking{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = mission_ranking,
    add_tran_action({EtsTable, mission_ranking, delete, Record}),
    ets:delete_object(mission_ranking, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, mission_ranking);

delete(#db_mission_guess_boss{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = mission_guess_boss,
    add_tran_action({EtsTable, mission_guess_boss, delete, Record}),
    ets:delete_object(mission_guess_boss, Record),
    ?STOP_PROF(?MODULE, delete, mission_guess_boss);

delete(#db_match_scene_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = match_scene_data,
    add_tran_action({EtsTable, match_scene_data, delete, Record}),
    ets:delete_object(match_scene_data, Record),
    ?STOP_PROF(?MODULE, delete, match_scene_data);

delete(#db_login_notice{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = login_notice,
    add_tran_action({EtsTable, login_notice, delete, Record}),
    ets:delete_object(login_notice, Record),
    ?STOP_PROF(?MODULE, delete, login_notice);

delete(#db_laba_adjust{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = laba_adjust,
    add_tran_action({EtsTable, laba_adjust, delete, Record}),
    ets:delete_object(laba_adjust, Record),
    ?STOP_PROF(?MODULE, delete, laba_adjust);

delete(#db_jiangjinchi{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = jiangjinchi,
    add_tran_action({EtsTable, jiangjinchi, delete, Record}),
    ets:delete_object(jiangjinchi, Record),
    ?STOP_PROF(?MODULE, delete, jiangjinchi);

delete(#db_gift_code_type{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = gift_code_type,
    add_tran_action({EtsTable, gift_code_type, delete, Record}),
    ets:delete_object(gift_code_type, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, gift_code_type);

delete(#db_gift_code{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = gift_code,
    add_tran_action({EtsTable, gift_code, delete, Record}),
    ets:delete_object(gift_code, Record),
    ?STOP_PROF(?MODULE, delete, gift_code);

delete(#db_consume_statistics{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = consume_statistics,
    add_tran_action({EtsTable, consume_statistics, delete, Record}),
    dets:delete_object(consume_statistics, Record),
    ?STOP_PROF(?MODULE, delete, consume_statistics);

delete(#db_client_versin{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = client_versin,
    add_tran_action({EtsTable, client_versin, delete, Record}),
    ets:delete_object(client_versin, Record),
    ?STOP_PROF(?MODULE, delete, client_versin);

delete(#db_charge_order_request_record{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = charge_order_request_record,
    add_tran_action({EtsTable, charge_order_request_record, delete, Record}),
    ets:delete_object(charge_order_request_record, Record),
    ?STOP_PROF(?MODULE, delete, charge_order_request_record);

delete(#db_charge_ip_white_record{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = charge_ip_white_record,
    add_tran_action({EtsTable, charge_ip_white_record, delete, Record}),
    ets:delete_object(charge_ip_white_record, Record),
    ?STOP_PROF(?MODULE, delete, charge_ip_white_record);

delete(#db_charge_info_record{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = charge_info_record,
    add_tran_action({EtsTable, charge_info_record, delete, Record}),
    dets:delete_object(charge_info_record, Record),
    ?STOP_PROF(?MODULE, delete, charge_info_record);

delete(#db_c_server_node{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = c_server_node,
    add_tran_action({EtsTable, c_server_node, delete, Record}),
    ets:delete_object(c_server_node, Record),
    ?STOP_PROF(?MODULE, delete, c_server_node);

delete(#db_c_game_server{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = c_game_server,
    add_tran_action({EtsTable, c_game_server, delete, Record}),
    ets:delete_object(c_game_server, Record),
    ?STOP_PROF(?MODULE, delete, c_game_server);

delete(#db_brave_one{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = brave_one,
    add_tran_action({EtsTable, brave_one, delete, Record}),
    ets:delete_object(brave_one, Record),
    db_index:erase_index(Record),
    ?STOP_PROF(?MODULE, delete, brave_one);

delete(#db_boss_one_on_one{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = boss_one_on_one,
    add_tran_action({EtsTable, boss_one_on_one, delete, Record}),
    ets:delete_object(boss_one_on_one, Record),
    ?STOP_PROF(?MODULE, delete, boss_one_on_one);

delete(#db_activity_info{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = activity_info,
    add_tran_action({EtsTable, activity_info, delete, Record}),
    ets:delete_object(activity_info, Record),
    ?STOP_PROF(?MODULE, delete, activity_info);

delete(#db_activity_award{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = activity_award,
    add_tran_action({EtsTable, activity_award, delete, Record}),
    ets:delete_object(activity_award, Record),
    ?STOP_PROF(?MODULE, delete, activity_award);

delete(#db_account_share_data{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = account_share_data,
    add_tran_action({EtsTable, account_share_data, delete, Record}),
    ets:delete_object(account_share_data, Record),
    ?STOP_PROF(?MODULE, delete, account_share_data);

delete(#db_account_charge_white{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = account_charge_white,
    add_tran_action({EtsTable, account_charge_white, delete, Record}),
    ets:delete_object(account_charge_white, Record),
    ?STOP_PROF(?MODULE, delete, account_charge_white);

delete(#db_account{}=Record) ->
    ?START_PROF,
    ensure_tran(),
    EtsTable = account,
    add_tran_action({EtsTable, account, delete, Record}),
    dets:delete_object(account, Record),
    ?STOP_PROF(?MODULE, delete, account).

delete_all(wheel_result_record_accumulate) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({wheel_result_record_accumulate, wheel_result_record_accumulate, delete_all, ets:tab2list(wheel_result_record_accumulate)}),
    ets:delete_all_objects(wheel_result_record_accumulate),
    db_index:erase_all_index(wheel_result_record_accumulate),
    ?STOP_PROF(?MODULE, delete_all, wheel_result_record_accumulate);

delete_all(wheel_result_record) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({wheel_result_record, wheel_result_record, delete_all, ets:tab2list(wheel_result_record)}),
    ets:delete_all_objects(wheel_result_record),
    db_index:erase_all_index(wheel_result_record),
    ?STOP_PROF(?MODULE, delete_all, wheel_result_record);

delete_all(wheel_pool) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({wheel_pool, wheel_pool, delete_all, ets:tab2list(wheel_pool)}),
    ets:delete_all_objects(wheel_pool),
    ?STOP_PROF(?MODULE, delete_all, wheel_pool);

delete_all(wheel_player_bet_record_today) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({wheel_player_bet_record_today, wheel_player_bet_record_today, delete_all, ets:tab2list(wheel_player_bet_record_today)}),
    ets:delete_all_objects(wheel_player_bet_record_today),
    db_index:erase_all_index(wheel_player_bet_record_today),
    ?STOP_PROF(?MODULE, delete_all, wheel_player_bet_record_today);

delete_all(wheel_player_bet_record) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({wheel_player_bet_record, wheel_player_bet_record, delete_all, ets:tab2list(wheel_player_bet_record)}),
    ets:delete_all_objects(wheel_player_bet_record),
    db_index:erase_all_index(wheel_player_bet_record),
    ?STOP_PROF(?MODULE, delete_all, wheel_player_bet_record);

delete_all(unique_id_data) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({unique_id_data, unique_id_data, delete_all, ets:tab2list(unique_id_data)}),
    ets:delete_all_objects(unique_id_data),
    ?STOP_PROF(?MODULE, delete_all, unique_id_data);

delete_all(tongxingzheng_month_task) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({tongxingzheng_month_task, tongxingzheng_month_task, delete_all, ets:tab2list(tongxingzheng_month_task)}),
    ets:delete_all_objects(tongxingzheng_month_task),
    ?STOP_PROF(?MODULE, delete_all, tongxingzheng_month_task);

delete_all(tongxingzheng_daily_task) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({tongxingzheng_daily_task, tongxingzheng_daily_task, delete_all, ets:tab2list(tongxingzheng_daily_task)}),
    ets:delete_all_objects(tongxingzheng_daily_task),
    ?STOP_PROF(?MODULE, delete_all, tongxingzheng_daily_task);

delete_all(timer_data) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({timer_data, timer_data, delete_all, ets:tab2list(timer_data)}),
    ets:delete_all_objects(timer_data),
    ?STOP_PROF(?MODULE, delete_all, timer_data);

delete_all(test) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({test, test, delete_all, ets:tab2list(test)}),
    ets:delete_all_objects(test),
    ?STOP_PROF(?MODULE, delete_all, test);

delete_all(server_state) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({server_state, server_state, delete_all, ets:tab2list(server_state)}),
    ets:delete_all_objects(server_state),
    ?STOP_PROF(?MODULE, delete_all, server_state);

delete_all(server_player_fight_adjust) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({server_player_fight_adjust, server_player_fight_adjust, delete_all, ets:tab2list(server_player_fight_adjust)}),
    ets:delete_all_objects(server_player_fight_adjust),
    ?STOP_PROF(?MODULE, delete_all, server_player_fight_adjust);

delete_all(server_game_config) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({server_game_config, server_game_config, delete_all, ets:tab2list(server_game_config)}),
    ets:delete_all_objects(server_game_config),
    ?STOP_PROF(?MODULE, delete_all, server_game_config);

delete_all(server_fight_adjust) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({server_fight_adjust, server_fight_adjust, delete_all, ets:tab2list(server_fight_adjust)}),
    ets:delete_all_objects(server_fight_adjust),
    ?STOP_PROF(?MODULE, delete_all, server_fight_adjust);

delete_all(server_data) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({server_data, server_data, delete_all, ets:tab2list(server_data)}),
    ets:delete_all_objects(server_data),
    ?STOP_PROF(?MODULE, delete_all, server_data);

delete_all(scene_log) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({scene_log, scene_log, delete_all, ets:tab2list(scene_log)}),
    ets:delete_all_objects(scene_log),
    ?STOP_PROF(?MODULE, delete_all, scene_log);

delete_all(scene_boss_adjust) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({scene_boss_adjust, scene_boss_adjust, delete_all, ets:tab2list(scene_boss_adjust)}),
    ets:delete_all_objects(scene_boss_adjust),
    ?STOP_PROF(?MODULE, delete_all, scene_boss_adjust);

delete_all(scene_adjust) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({scene_adjust, scene_adjust, delete_all, ets:tab2list(scene_adjust)}),
    ets:delete_all_objects(scene_adjust),
    ?STOP_PROF(?MODULE, delete_all, scene_adjust);

delete_all(robot_player_scene_cache) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({robot_player_scene_cache, robot_player_scene_cache, delete_all, ets:tab2list(robot_player_scene_cache)}),
    ets:delete_all_objects(robot_player_scene_cache),
    db_index:erase_all_index(robot_player_scene_cache),
    ?STOP_PROF(?MODULE, delete_all, robot_player_scene_cache);

delete_all(robot_player_data) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({robot_player_data, robot_player_data, delete_all, ets:tab2list(robot_player_data)}),
    ets:delete_all_objects(robot_player_data),
    db_index:erase_all_index(robot_player_data),
    ?STOP_PROF(?MODULE, delete_all, robot_player_data);

delete_all(red_packet_condition) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({red_packet_condition, red_packet_condition, delete_all, ets:tab2list(red_packet_condition)}),
    ets:delete_all_objects(red_packet_condition),
    ?STOP_PROF(?MODULE, delete_all, red_packet_condition);

delete_all(rank_info) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({rank_info, rank_info, delete_all, ets:tab2list(rank_info)}),
    ets:delete_all_objects(rank_info),
    db_index:erase_all_index(rank_info),
    ?STOP_PROF(?MODULE, delete_all, rank_info);

delete_all(promote_record) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({promote_record, promote_record, delete_all, ets:tab2list(promote_record)}),
    ets:delete_all_objects(promote_record),
    db_index:erase_all_index(promote_record),
    ?STOP_PROF(?MODULE, delete_all, promote_record);

delete_all(promote_info) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({promote_info, promote_info, delete_all, ets:tab2list(promote_info)}),
    ets:delete_all_objects(promote_info),
    ?STOP_PROF(?MODULE, delete_all, promote_info);

delete_all(promote) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({promote, promote, delete_all, ets:tab2list(promote)}),
    ets:delete_all_objects(promote),
    ?STOP_PROF(?MODULE, delete_all, promote);

delete_all(player_vip_award) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_vip_award, player_vip_award, delete_all, ets:tab2list(player_vip_award)}),
    ets:delete_all_objects(player_vip_award),
    ?STOP_PROF(?MODULE, delete_all, player_vip_award);

delete_all(player_vip) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_vip, player_vip, delete_all, ets:tab2list(player_vip)}),
    ets:delete_all_objects(player_vip),
    ?STOP_PROF(?MODULE, delete_all, player_vip);

delete_all(player_title) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_title, player_title, delete_all, ets:tab2list(player_title)}),
    ets:delete_all_objects(player_title),
    db_index:erase_all_index(player_title),
    ?STOP_PROF(?MODULE, delete_all, player_title);

delete_all(player_times_data) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_times_data, player_times_data, delete_all, ets:tab2list(player_times_data)}),
    ets:delete_all_objects(player_times_data),
    db_index:erase_all_index(player_times_data),
    ?STOP_PROF(?MODULE, delete_all, player_times_data);

delete_all(player_task_share_award) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_task_share_award, player_task_share_award, delete_all, ets:tab2list(player_task_share_award)}),
    ets:delete_all_objects(player_task_share_award),
    ?STOP_PROF(?MODULE, delete_all, player_task_share_award);

delete_all(player_task) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_task, player_task, delete_all, ets:tab2list(player_task)}),
    ets:delete_all_objects(player_task),
    ?STOP_PROF(?MODULE, delete_all, player_task);

delete_all(player_sys_common) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_sys_common, player_sys_common, delete_all, ets:tab2list(player_sys_common)}),
    ets:delete_all_objects(player_sys_common),
    db_index:erase_all_index(player_sys_common),
    ?STOP_PROF(?MODULE, delete_all, player_sys_common);

delete_all(player_sys_attr) ->
    ?START_PROF,
    ensure_tran(),
    DeleteRows = case dets:select(player_sys_attr, [{#db_player_sys_attr{ _ ='_'}, [], ['$_']}]) of {error, Reason} -> exit({delete_all_select_error, player_sys_attr, Reason}); DeleteRows0 -> DeleteRows0 end,
    add_tran_action({player_sys_attr, player_sys_attr, delete_all, DeleteRows}),
    DeleteResult = dets:delete_all_objects(player_sys_attr),
    case DeleteResult of {error, ErrorReason} -> exit({delete_all_error, player_sys_attr, ErrorReason}); _ -> noop end,
    db_index:erase_all_index(player_sys_attr),
    ?STOP_PROF(?MODULE, delete_all, player_sys_attr);

delete_all(player_special_prop) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_special_prop, player_special_prop, delete_all, ets:tab2list(player_special_prop)}),
    ets:delete_all_objects(player_special_prop),
    db_index:erase_all_index(player_special_prop),
    ?STOP_PROF(?MODULE, delete_all, player_special_prop);

delete_all(player_shop) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_shop, player_shop, delete_all, ets:tab2list(player_shop)}),
    ets:delete_all_objects(player_shop),
    ?STOP_PROF(?MODULE, delete_all, player_shop);

delete_all(player_shen_long) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_shen_long, player_shen_long, delete_all, ets:tab2list(player_shen_long)}),
    ets:delete_all_objects(player_shen_long),
    ?STOP_PROF(?MODULE, delete_all, player_shen_long);

delete_all(player_share_task_award) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_share_task_award, player_share_task_award, delete_all, ets:tab2list(player_share_task_award)}),
    ets:delete_all_objects(player_share_task_award),
    ?STOP_PROF(?MODULE, delete_all, player_share_task_award);

delete_all(player_share_task) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_share_task, player_share_task, delete_all, ets:tab2list(player_share_task)}),
    ets:delete_all_objects(player_share_task),
    ?STOP_PROF(?MODULE, delete_all, player_share_task);

delete_all(player_share_friend) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_share_friend, player_share_friend, delete_all, ets:tab2list(player_share_friend)}),
    ets:delete_all_objects(player_share_friend),
    ?STOP_PROF(?MODULE, delete_all, player_share_friend);

delete_all(player_share) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_share, player_share, delete_all, ets:tab2list(player_share)}),
    ets:delete_all_objects(player_share),
    ?STOP_PROF(?MODULE, delete_all, player_share);

delete_all(player_seven_login) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_seven_login, player_seven_login, delete_all, ets:tab2list(player_seven_login)}),
    ets:delete_all_objects(player_seven_login),
    ?STOP_PROF(?MODULE, delete_all, player_seven_login);

delete_all(player_server_data) ->
    ?START_PROF,
    ensure_tran(),
    DeleteRows = case dets:select(player_server_data, [{#db_player_server_data{ _ ='_'}, [], ['$_']}]) of {error, Reason} -> exit({delete_all_select_error, player_server_data, Reason}); DeleteRows0 -> DeleteRows0 end,
    add_tran_action({player_server_data, player_server_data, delete_all, DeleteRows}),
    DeleteResult = dets:delete_all_objects(player_server_data),
    case DeleteResult of {error, ErrorReason} -> exit({delete_all_error, player_server_data, ErrorReason}); _ -> noop end,
    ?STOP_PROF(?MODULE, delete_all, player_server_data);

delete_all(player_send_gamebar_msg) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_send_gamebar_msg, player_send_gamebar_msg, delete_all, ets:tab2list(player_send_gamebar_msg)}),
    ets:delete_all_objects(player_send_gamebar_msg),
    ?STOP_PROF(?MODULE, delete_all, player_send_gamebar_msg);

delete_all(player_prop) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_prop, player_prop, delete_all, ets:tab2list(player_prop)}),
    ets:delete_all_objects(player_prop),
    db_index:erase_all_index(player_prop),
    ?STOP_PROF(?MODULE, delete_all, player_prop);

delete_all(player_prerogative_card) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_prerogative_card, player_prerogative_card, delete_all, ets:tab2list(player_prerogative_card)}),
    ets:delete_all_objects(player_prerogative_card),
    db_index:erase_all_index(player_prerogative_card),
    ?STOP_PROF(?MODULE, delete_all, player_prerogative_card);

delete_all(player_platform_award) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_platform_award, player_platform_award, delete_all, ets:tab2list(player_platform_award)}),
    ets:delete_all_objects(player_platform_award),
    ?STOP_PROF(?MODULE, delete_all, player_platform_award);

delete_all(player_passive_skill) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_passive_skill, player_passive_skill, delete_all, ets:tab2list(player_passive_skill)}),
    ets:delete_all_objects(player_passive_skill),
    db_index:erase_all_index(player_passive_skill),
    ?STOP_PROF(?MODULE, delete_all, player_passive_skill);

delete_all(player_online_info) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_online_info, player_online_info, delete_all, ets:tab2list(player_online_info)}),
    ets:delete_all_objects(player_online_info),
    ?STOP_PROF(?MODULE, delete_all, player_online_info);

delete_all(player_online_award) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_online_award, player_online_award, delete_all, ets:tab2list(player_online_award)}),
    ets:delete_all_objects(player_online_award),
    ?STOP_PROF(?MODULE, delete_all, player_online_award);

delete_all(player_offline_apply) ->
    ?START_PROF,
    ensure_tran(),
    DeleteRows = case dets:select(player_offline_apply, [{#db_player_offline_apply{ _ ='_'}, [], ['$_']}]) of {error, Reason} -> exit({delete_all_select_error, player_offline_apply, Reason}); DeleteRows0 -> DeleteRows0 end,
    add_tran_action({player_offline_apply, player_offline_apply, delete_all, DeleteRows}),
    DeleteResult = dets:delete_all_objects(player_offline_apply),
    case DeleteResult of {error, ErrorReason} -> exit({delete_all_error, player_offline_apply, ErrorReason}); _ -> noop end,
    db_index:erase_all_index(player_offline_apply),
    ?STOP_PROF(?MODULE, delete_all, player_offline_apply);

delete_all(player_mission_data) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_mission_data, player_mission_data, delete_all, ets:tab2list(player_mission_data)}),
    ets:delete_all_objects(player_mission_data),
    ?STOP_PROF(?MODULE, delete_all, player_mission_data);

delete_all(player_mail) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_mail, player_mail, delete_all, ets:tab2list(player_mail)}),
    ets:delete_all_objects(player_mail),
    db_index:erase_all_index(player_mail),
    ?STOP_PROF(?MODULE, delete_all, player_mail);

delete_all(player_leichong) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_leichong, player_leichong, delete_all, ets:tab2list(player_leichong)}),
    ets:delete_all_objects(player_leichong),
    ?STOP_PROF(?MODULE, delete_all, player_leichong);

delete_all(player_laba_data) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_laba_data, player_laba_data, delete_all, ets:tab2list(player_laba_data)}),
    ets:delete_all_objects(player_laba_data),
    ?STOP_PROF(?MODULE, delete_all, player_laba_data);

delete_all(player_jiangjinchi) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_jiangjinchi, player_jiangjinchi, delete_all, ets:tab2list(player_jiangjinchi)}),
    ets:delete_all_objects(player_jiangjinchi),
    ?STOP_PROF(?MODULE, delete_all, player_jiangjinchi);

delete_all(player_invite_friend_log) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_invite_friend_log, player_invite_friend_log, delete_all, ets:tab2list(player_invite_friend_log)}),
    ets:delete_all_objects(player_invite_friend_log),
    ?STOP_PROF(?MODULE, delete_all, player_invite_friend_log);

delete_all(player_invite_friend) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_invite_friend, player_invite_friend, delete_all, ets:tab2list(player_invite_friend)}),
    ets:delete_all_objects(player_invite_friend),
    ?STOP_PROF(?MODULE, delete_all, player_invite_friend);

delete_all(player_invest_type) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_invest_type, player_invest_type, delete_all, ets:tab2list(player_invest_type)}),
    ets:delete_all_objects(player_invest_type),
    ?STOP_PROF(?MODULE, delete_all, player_invest_type);

delete_all(player_invest) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_invest, player_invest, delete_all, ets:tab2list(player_invest)}),
    ets:delete_all_objects(player_invest),
    ?STOP_PROF(?MODULE, delete_all, player_invest);

delete_all(player_hero_use) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_hero_use, player_hero_use, delete_all, ets:tab2list(player_hero_use)}),
    ets:delete_all_objects(player_hero_use),
    ?STOP_PROF(?MODULE, delete_all, player_hero_use);

delete_all(player_hero_parts) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_hero_parts, player_hero_parts, delete_all, ets:tab2list(player_hero_parts)}),
    ets:delete_all_objects(player_hero_parts),
    db_index:erase_all_index(player_hero_parts),
    ?STOP_PROF(?MODULE, delete_all, player_hero_parts);

delete_all(player_hero) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_hero, player_hero, delete_all, ets:tab2list(player_hero)}),
    ets:delete_all_objects(player_hero),
    db_index:erase_all_index(player_hero),
    ?STOP_PROF(?MODULE, delete_all, player_hero);

delete_all(player_gift_mail_log) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_gift_mail_log, player_gift_mail_log, delete_all, ets:tab2list(player_gift_mail_log)}),
    ets:delete_all_objects(player_gift_mail_log),
    ?STOP_PROF(?MODULE, delete_all, player_gift_mail_log);

delete_all(player_gift_mail) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_gift_mail, player_gift_mail, delete_all, ets:tab2list(player_gift_mail)}),
    ets:delete_all_objects(player_gift_mail),
    db_index:erase_all_index(player_gift_mail),
    ?STOP_PROF(?MODULE, delete_all, player_gift_mail);

delete_all(player_gift_code) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_gift_code, player_gift_code, delete_all, ets:tab2list(player_gift_code)}),
    ets:delete_all_objects(player_gift_code),
    ?STOP_PROF(?MODULE, delete_all, player_gift_code);

delete_all(player_game_data) ->
    ?START_PROF,
    ensure_tran(),
    DeleteRows = case dets:select(player_game_data, [{#db_player_game_data{ _ ='_'}, [], ['$_']}]) of {error, Reason} -> exit({delete_all_select_error, player_game_data, Reason}); DeleteRows0 -> DeleteRows0 end,
    add_tran_action({player_game_data, player_game_data, delete_all, DeleteRows}),
    DeleteResult = dets:delete_all_objects(player_game_data),
    case DeleteResult of {error, ErrorReason} -> exit({delete_all_error, player_game_data, ErrorReason}); _ -> noop end,
    ?STOP_PROF(?MODULE, delete_all, player_game_data);

delete_all(player_game_config) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_game_config, player_game_config, delete_all, ets:tab2list(player_game_config)}),
    ets:delete_all_objects(player_game_config),
    ?STOP_PROF(?MODULE, delete_all, player_game_config);

delete_all(player_function) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_function, player_function, delete_all, ets:tab2list(player_function)}),
    ets:delete_all_objects(player_function),
    db_index:erase_all_index(player_function),
    ?STOP_PROF(?MODULE, delete_all, player_function);

delete_all(player_first_charge_day) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_first_charge_day, player_first_charge_day, delete_all, ets:tab2list(player_first_charge_day)}),
    ets:delete_all_objects(player_first_charge_day),
    ?STOP_PROF(?MODULE, delete_all, player_first_charge_day);

delete_all(player_first_charge) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_first_charge, player_first_charge, delete_all, ets:tab2list(player_first_charge)}),
    ets:delete_all_objects(player_first_charge),
    ?STOP_PROF(?MODULE, delete_all, player_first_charge);

delete_all(player_finish_share_task) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_finish_share_task, player_finish_share_task, delete_all, ets:tab2list(player_finish_share_task)}),
    ets:delete_all_objects(player_finish_share_task),
    ?STOP_PROF(?MODULE, delete_all, player_finish_share_task);

delete_all(player_fight_adjust) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_fight_adjust, player_fight_adjust, delete_all, ets:tab2list(player_fight_adjust)}),
    ets:delete_all_objects(player_fight_adjust),
    ?STOP_PROF(?MODULE, delete_all, player_fight_adjust);

delete_all(player_everyday_sign) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_everyday_sign, player_everyday_sign, delete_all, ets:tab2list(player_everyday_sign)}),
    ets:delete_all_objects(player_everyday_sign),
    ?STOP_PROF(?MODULE, delete_all, player_everyday_sign);

delete_all(player_everyday_charge) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_everyday_charge, player_everyday_charge, delete_all, ets:tab2list(player_everyday_charge)}),
    ets:delete_all_objects(player_everyday_charge),
    ?STOP_PROF(?MODULE, delete_all, player_everyday_charge);

delete_all(player_data) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_data, player_data, delete_all, ets:tab2list(player_data)}),
    ets:delete_all_objects(player_data),
    ?STOP_PROF(?MODULE, delete_all, player_data);

delete_all(player_daily_task) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_daily_task, player_daily_task, delete_all, ets:tab2list(player_daily_task)}),
    ets:delete_all_objects(player_daily_task),
    db_index:erase_all_index(player_daily_task),
    ?STOP_PROF(?MODULE, delete_all, player_daily_task);

delete_all(player_daily_points) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_daily_points, player_daily_points, delete_all, ets:tab2list(player_daily_points)}),
    ets:delete_all_objects(player_daily_points),
    db_index:erase_all_index(player_daily_points),
    ?STOP_PROF(?MODULE, delete_all, player_daily_points);

delete_all(player_conditions_data) ->
    ?START_PROF,
    ensure_tran(),
    DeleteRows = case dets:select(player_conditions_data, [{#db_player_conditions_data{ _ ='_'}, [], ['$_']}]) of {error, Reason} -> exit({delete_all_select_error, player_conditions_data, Reason}); DeleteRows0 -> DeleteRows0 end,
    add_tran_action({player_conditions_data, player_conditions_data, delete_all, DeleteRows}),
    DeleteResult = dets:delete_all_objects(player_conditions_data),
    case DeleteResult of {error, ErrorReason} -> exit({delete_all_error, player_conditions_data, ErrorReason}); _ -> noop end,
    ?STOP_PROF(?MODULE, delete_all, player_conditions_data);

delete_all(player_condition_activity) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_condition_activity, player_condition_activity, delete_all, ets:tab2list(player_condition_activity)}),
    ets:delete_all_objects(player_condition_activity),
    ?STOP_PROF(?MODULE, delete_all, player_condition_activity);

delete_all(player_client_data) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_client_data, player_client_data, delete_all, ets:tab2list(player_client_data)}),
    ets:delete_all_objects(player_client_data),
    db_index:erase_all_index(player_client_data),
    ?STOP_PROF(?MODULE, delete_all, player_client_data);

delete_all(player_chat_data) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_chat_data, player_chat_data, delete_all, ets:tab2list(player_chat_data)}),
    ets:delete_all_objects(player_chat_data),
    db_index:erase_all_index(player_chat_data),
    ?STOP_PROF(?MODULE, delete_all, player_chat_data);

delete_all(player_charge_shop) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_charge_shop, player_charge_shop, delete_all, ets:tab2list(player_charge_shop)}),
    ets:delete_all_objects(player_charge_shop),
    ?STOP_PROF(?MODULE, delete_all, player_charge_shop);

delete_all(player_charge_record) ->
    ?START_PROF,
    ensure_tran(),
    DeleteRows = case dets:select(player_charge_record, [{#db_player_charge_record{ _ ='_'}, [], ['$_']}]) of {error, Reason} -> exit({delete_all_select_error, player_charge_record, Reason}); DeleteRows0 -> DeleteRows0 end,
    add_tran_action({player_charge_record, player_charge_record, delete_all, DeleteRows}),
    DeleteResult = dets:delete_all_objects(player_charge_record),
    case DeleteResult of {error, ErrorReason} -> exit({delete_all_error, player_charge_record, ErrorReason}); _ -> noop end,
    db_index:erase_all_index(player_charge_record),
    ?STOP_PROF(?MODULE, delete_all, player_charge_record);

delete_all(player_charge_info_record) ->
    ?START_PROF,
    ensure_tran(),
    DeleteRows = case dets:select(player_charge_info_record, [{#db_player_charge_info_record{ _ ='_'}, [], ['$_']}]) of {error, Reason} -> exit({delete_all_select_error, player_charge_info_record, Reason}); DeleteRows0 -> DeleteRows0 end,
    add_tran_action({player_charge_info_record, player_charge_info_record, delete_all, DeleteRows}),
    DeleteResult = dets:delete_all_objects(player_charge_info_record),
    case DeleteResult of {error, ErrorReason} -> exit({delete_all_error, player_charge_info_record, ErrorReason}); _ -> noop end,
    ?STOP_PROF(?MODULE, delete_all, player_charge_info_record);

delete_all(player_charge_activity) ->
    ?START_PROF,
    ensure_tran(),
    DeleteRows = case dets:select(player_charge_activity, [{#db_player_charge_activity{ _ ='_'}, [], ['$_']}]) of {error, Reason} -> exit({delete_all_select_error, player_charge_activity, Reason}); DeleteRows0 -> DeleteRows0 end,
    add_tran_action({player_charge_activity, player_charge_activity, delete_all, DeleteRows}),
    DeleteResult = dets:delete_all_objects(player_charge_activity),
    case DeleteResult of {error, ErrorReason} -> exit({delete_all_error, player_charge_activity, ErrorReason}); _ -> noop end,
    ?STOP_PROF(?MODULE, delete_all, player_charge_activity);

delete_all(player_card_title) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_card_title, player_card_title, delete_all, ets:tab2list(player_card_title)}),
    ets:delete_all_objects(player_card_title),
    ?STOP_PROF(?MODULE, delete_all, player_card_title);

delete_all(player_card_summon) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_card_summon, player_card_summon, delete_all, ets:tab2list(player_card_summon)}),
    ets:delete_all_objects(player_card_summon),
    ?STOP_PROF(?MODULE, delete_all, player_card_summon);

delete_all(player_card_book) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_card_book, player_card_book, delete_all, ets:tab2list(player_card_book)}),
    ets:delete_all_objects(player_card_book),
    ?STOP_PROF(?MODULE, delete_all, player_card_book);

delete_all(player_card) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_card, player_card, delete_all, ets:tab2list(player_card)}),
    ets:delete_all_objects(player_card),
    ?STOP_PROF(?MODULE, delete_all, player_card);

delete_all(player_bounty_task) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_bounty_task, player_bounty_task, delete_all, ets:tab2list(player_bounty_task)}),
    ets:delete_all_objects(player_bounty_task),
    db_index:erase_all_index(player_bounty_task),
    ?STOP_PROF(?MODULE, delete_all, player_bounty_task);

delete_all(player_adjust_rebound) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_adjust_rebound, player_adjust_rebound, delete_all, ets:tab2list(player_adjust_rebound)}),
    ets:delete_all_objects(player_adjust_rebound),
    ?STOP_PROF(?MODULE, delete_all, player_adjust_rebound);

delete_all(player_activity_task) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_activity_task, player_activity_task, delete_all, ets:tab2list(player_activity_task)}),
    ets:delete_all_objects(player_activity_task),
    ?STOP_PROF(?MODULE, delete_all, player_activity_task);

delete_all(player_activity_info) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_activity_info, player_activity_info, delete_all, ets:tab2list(player_activity_info)}),
    ets:delete_all_objects(player_activity_info),
    db_index:erase_all_index(player_activity_info),
    ?STOP_PROF(?MODULE, delete_all, player_activity_info);

delete_all(player_activity_game_info) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_activity_game_info, player_activity_game_info, delete_all, ets:tab2list(player_activity_game_info)}),
    ets:delete_all_objects(player_activity_game_info),
    ?STOP_PROF(?MODULE, delete_all, player_activity_game_info);

delete_all(player_activity_game) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_activity_game, player_activity_game, delete_all, ets:tab2list(player_activity_game)}),
    ets:delete_all_objects(player_activity_game),
    db_index:erase_all_index(player_activity_game),
    ?STOP_PROF(?MODULE, delete_all, player_activity_game);

delete_all(player_activity_condition) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_activity_condition, player_activity_condition, delete_all, ets:tab2list(player_activity_condition)}),
    ets:delete_all_objects(player_activity_condition),
    ?STOP_PROF(?MODULE, delete_all, player_activity_condition);

delete_all(player_achievement) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player_achievement, player_achievement, delete_all, ets:tab2list(player_achievement)}),
    ets:delete_all_objects(player_achievement),
    ?STOP_PROF(?MODULE, delete_all, player_achievement);

delete_all(player) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({player, player, delete_all, ets:tab2list(player)}),
    ets:delete_all_objects(player),
    db_index:erase_all_index(player),
    ?STOP_PROF(?MODULE, delete_all, player);

delete_all(one_vs_one_rank_data) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({one_vs_one_rank_data, one_vs_one_rank_data, delete_all, ets:tab2list(one_vs_one_rank_data)}),
    ets:delete_all_objects(one_vs_one_rank_data),
    db_index:erase_all_index(one_vs_one_rank_data),
    ?STOP_PROF(?MODULE, delete_all, one_vs_one_rank_data);

delete_all(oauth_order_log) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({oauth_order_log, oauth_order_log, delete_all, ets:tab2list(oauth_order_log)}),
    ets:delete_all_objects(oauth_order_log),
    ?STOP_PROF(?MODULE, delete_all, oauth_order_log);

delete_all(mission_ranking) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({mission_ranking, mission_ranking, delete_all, ets:tab2list(mission_ranking)}),
    ets:delete_all_objects(mission_ranking),
    db_index:erase_all_index(mission_ranking),
    ?STOP_PROF(?MODULE, delete_all, mission_ranking);

delete_all(mission_guess_boss) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({mission_guess_boss, mission_guess_boss, delete_all, ets:tab2list(mission_guess_boss)}),
    ets:delete_all_objects(mission_guess_boss),
    ?STOP_PROF(?MODULE, delete_all, mission_guess_boss);

delete_all(match_scene_data) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({match_scene_data, match_scene_data, delete_all, ets:tab2list(match_scene_data)}),
    ets:delete_all_objects(match_scene_data),
    ?STOP_PROF(?MODULE, delete_all, match_scene_data);

delete_all(login_notice) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({login_notice, login_notice, delete_all, ets:tab2list(login_notice)}),
    ets:delete_all_objects(login_notice),
    ?STOP_PROF(?MODULE, delete_all, login_notice);

delete_all(laba_adjust) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({laba_adjust, laba_adjust, delete_all, ets:tab2list(laba_adjust)}),
    ets:delete_all_objects(laba_adjust),
    ?STOP_PROF(?MODULE, delete_all, laba_adjust);

delete_all(jiangjinchi) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({jiangjinchi, jiangjinchi, delete_all, ets:tab2list(jiangjinchi)}),
    ets:delete_all_objects(jiangjinchi),
    ?STOP_PROF(?MODULE, delete_all, jiangjinchi);

delete_all(gift_code_type) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({gift_code_type, gift_code_type, delete_all, ets:tab2list(gift_code_type)}),
    ets:delete_all_objects(gift_code_type),
    db_index:erase_all_index(gift_code_type),
    ?STOP_PROF(?MODULE, delete_all, gift_code_type);

delete_all(gift_code) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({gift_code, gift_code, delete_all, ets:tab2list(gift_code)}),
    ets:delete_all_objects(gift_code),
    ?STOP_PROF(?MODULE, delete_all, gift_code);

delete_all(consume_statistics) ->
    ?START_PROF,
    ensure_tran(),
    DeleteRows = case dets:select(consume_statistics, [{#db_consume_statistics{ _ ='_'}, [], ['$_']}]) of {error, Reason} -> exit({delete_all_select_error, consume_statistics, Reason}); DeleteRows0 -> DeleteRows0 end,
    add_tran_action({consume_statistics, consume_statistics, delete_all, DeleteRows}),
    DeleteResult = dets:delete_all_objects(consume_statistics),
    case DeleteResult of {error, ErrorReason} -> exit({delete_all_error, consume_statistics, ErrorReason}); _ -> noop end,
    ?STOP_PROF(?MODULE, delete_all, consume_statistics);

delete_all(client_versin) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({client_versin, client_versin, delete_all, ets:tab2list(client_versin)}),
    ets:delete_all_objects(client_versin),
    ?STOP_PROF(?MODULE, delete_all, client_versin);

delete_all(charge_order_request_record) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({charge_order_request_record, charge_order_request_record, delete_all, ets:tab2list(charge_order_request_record)}),
    ets:delete_all_objects(charge_order_request_record),
    ?STOP_PROF(?MODULE, delete_all, charge_order_request_record);

delete_all(charge_ip_white_record) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({charge_ip_white_record, charge_ip_white_record, delete_all, ets:tab2list(charge_ip_white_record)}),
    ets:delete_all_objects(charge_ip_white_record),
    ?STOP_PROF(?MODULE, delete_all, charge_ip_white_record);

delete_all(charge_info_record) ->
    ?START_PROF,
    ensure_tran(),
    DeleteRows = case dets:select(charge_info_record, [{#db_charge_info_record{ _ ='_'}, [], ['$_']}]) of {error, Reason} -> exit({delete_all_select_error, charge_info_record, Reason}); DeleteRows0 -> DeleteRows0 end,
    add_tran_action({charge_info_record, charge_info_record, delete_all, DeleteRows}),
    DeleteResult = dets:delete_all_objects(charge_info_record),
    case DeleteResult of {error, ErrorReason} -> exit({delete_all_error, charge_info_record, ErrorReason}); _ -> noop end,
    ?STOP_PROF(?MODULE, delete_all, charge_info_record);

delete_all(c_server_node) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({c_server_node, c_server_node, delete_all, ets:tab2list(c_server_node)}),
    ets:delete_all_objects(c_server_node),
    ?STOP_PROF(?MODULE, delete_all, c_server_node);

delete_all(c_game_server) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({c_game_server, c_game_server, delete_all, ets:tab2list(c_game_server)}),
    ets:delete_all_objects(c_game_server),
    ?STOP_PROF(?MODULE, delete_all, c_game_server);

delete_all(brave_one) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({brave_one, brave_one, delete_all, ets:tab2list(brave_one)}),
    ets:delete_all_objects(brave_one),
    db_index:erase_all_index(brave_one),
    ?STOP_PROF(?MODULE, delete_all, brave_one);

delete_all(boss_one_on_one) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({boss_one_on_one, boss_one_on_one, delete_all, ets:tab2list(boss_one_on_one)}),
    ets:delete_all_objects(boss_one_on_one),
    ?STOP_PROF(?MODULE, delete_all, boss_one_on_one);

delete_all(activity_info) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({activity_info, activity_info, delete_all, ets:tab2list(activity_info)}),
    ets:delete_all_objects(activity_info),
    ?STOP_PROF(?MODULE, delete_all, activity_info);

delete_all(activity_award) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({activity_award, activity_award, delete_all, ets:tab2list(activity_award)}),
    ets:delete_all_objects(activity_award),
    ?STOP_PROF(?MODULE, delete_all, activity_award);

delete_all(account_share_data) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({account_share_data, account_share_data, delete_all, ets:tab2list(account_share_data)}),
    ets:delete_all_objects(account_share_data),
    ?STOP_PROF(?MODULE, delete_all, account_share_data);

delete_all(account_charge_white) ->
    ?START_PROF,
    ensure_tran(),
    add_tran_action({account_charge_white, account_charge_white, delete_all, ets:tab2list(account_charge_white)}),
    ets:delete_all_objects(account_charge_white),
    ?STOP_PROF(?MODULE, delete_all, account_charge_white);

delete_all(account) ->
    ?START_PROF,
    ensure_tran(),
    DeleteRows = case dets:select(account, [{#db_account{ _ ='_'}, [], ['$_']}]) of {error, Reason} -> exit({delete_all_select_error, account, Reason}); DeleteRows0 -> DeleteRows0 end,
    add_tran_action({account, account, delete_all, DeleteRows}),
    DeleteResult = dets:delete_all_objects(account),
    case DeleteResult of {error, ErrorReason} -> exit({delete_all_error, account, ErrorReason}); _ -> noop end,
    ?STOP_PROF(?MODULE, delete_all, account).

select(_, _, _)->
    null.
select(wheel_result_record_accumulate, MatchSpec) ->
    ?START_PROF,
    R = ets:select(wheel_result_record_accumulate, MatchSpec),
    ?STOP_PROF(?MODULE, select, wheel_result_record_accumulate),
    R;

select(wheel_result_record, MatchSpec) ->
    ?START_PROF,
    R = ets:select(wheel_result_record, MatchSpec),
    ?STOP_PROF(?MODULE, select, wheel_result_record),
    R;

select(wheel_pool, MatchSpec) ->
    ?START_PROF,
    R = ets:select(wheel_pool, MatchSpec),
    ?STOP_PROF(?MODULE, select, wheel_pool),
    R;

select(wheel_player_bet_record_today, MatchSpec) ->
    ?START_PROF,
    R = ets:select(wheel_player_bet_record_today, MatchSpec),
    ?STOP_PROF(?MODULE, select, wheel_player_bet_record_today),
    R;

select(wheel_player_bet_record, MatchSpec) ->
    ?START_PROF,
    R = ets:select(wheel_player_bet_record, MatchSpec),
    ?STOP_PROF(?MODULE, select, wheel_player_bet_record),
    R;

select(unique_id_data, MatchSpec) ->
    ?START_PROF,
    R = ets:select(unique_id_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, unique_id_data),
    R;

select(tongxingzheng_month_task, MatchSpec) ->
    ?START_PROF,
    R = ets:select(tongxingzheng_month_task, MatchSpec),
    ?STOP_PROF(?MODULE, select, tongxingzheng_month_task),
    R;

select(tongxingzheng_daily_task, MatchSpec) ->
    ?START_PROF,
    R = ets:select(tongxingzheng_daily_task, MatchSpec),
    ?STOP_PROF(?MODULE, select, tongxingzheng_daily_task),
    R;

select(timer_data, MatchSpec) ->
    ?START_PROF,
    R = ets:select(timer_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, timer_data),
    R;

select(test, MatchSpec) ->
    ?START_PROF,
    R = ets:select(test, MatchSpec),
    ?STOP_PROF(?MODULE, select, test),
    R;

select(server_state, MatchSpec) ->
    ?START_PROF,
    R = ets:select(server_state, MatchSpec),
    ?STOP_PROF(?MODULE, select, server_state),
    R;

select(server_player_fight_adjust, MatchSpec) ->
    ?START_PROF,
    R = ets:select(server_player_fight_adjust, MatchSpec),
    ?STOP_PROF(?MODULE, select, server_player_fight_adjust),
    R;

select(server_game_config, MatchSpec) ->
    ?START_PROF,
    R = ets:select(server_game_config, MatchSpec),
    ?STOP_PROF(?MODULE, select, server_game_config),
    R;

select(server_fight_adjust, MatchSpec) ->
    ?START_PROF,
    R = ets:select(server_fight_adjust, MatchSpec),
    ?STOP_PROF(?MODULE, select, server_fight_adjust),
    R;

select(server_data, MatchSpec) ->
    ?START_PROF,
    R = ets:select(server_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, server_data),
    R;

select(scene_log, MatchSpec) ->
    ?START_PROF,
    R = ets:select(scene_log, MatchSpec),
    ?STOP_PROF(?MODULE, select, scene_log),
    R;

select(scene_boss_adjust, MatchSpec) ->
    ?START_PROF,
    R = ets:select(scene_boss_adjust, MatchSpec),
    ?STOP_PROF(?MODULE, select, scene_boss_adjust),
    R;

select(scene_adjust, MatchSpec) ->
    ?START_PROF,
    R = ets:select(scene_adjust, MatchSpec),
    ?STOP_PROF(?MODULE, select, scene_adjust),
    R;

select(robot_player_scene_cache, MatchSpec) ->
    ?START_PROF,
    R = ets:select(robot_player_scene_cache, MatchSpec),
    ?STOP_PROF(?MODULE, select, robot_player_scene_cache),
    R;

select(robot_player_data, MatchSpec) ->
    ?START_PROF,
    R = ets:select(robot_player_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, robot_player_data),
    R;

select(red_packet_condition, MatchSpec) ->
    ?START_PROF,
    R = ets:select(red_packet_condition, MatchSpec),
    ?STOP_PROF(?MODULE, select, red_packet_condition),
    R;

select(rank_info, MatchSpec) ->
    ?START_PROF,
    R = ets:select(rank_info, MatchSpec),
    ?STOP_PROF(?MODULE, select, rank_info),
    R;

select(promote_record, MatchSpec) ->
    ?START_PROF,
    R = ets:select(promote_record, MatchSpec),
    ?STOP_PROF(?MODULE, select, promote_record),
    R;

select(promote_info, MatchSpec) ->
    ?START_PROF,
    R = ets:select(promote_info, MatchSpec),
    ?STOP_PROF(?MODULE, select, promote_info),
    R;

select(promote, MatchSpec) ->
    ?START_PROF,
    R = ets:select(promote, MatchSpec),
    ?STOP_PROF(?MODULE, select, promote),
    R;

select(player_vip_award, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_vip_award, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_vip_award),
    R;

select(player_vip, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_vip, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_vip),
    R;

select(player_title, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_title, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_title),
    R;

select(player_times_data, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_times_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_times_data),
    R;

select(player_task_share_award, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_task_share_award, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_task_share_award),
    R;

select(player_task, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_task, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_task),
    R;

select(player_sys_common, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_sys_common, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_sys_common),
    R;

select(player_sys_attr, MatchSpec) ->
    ?START_PROF,
    R = dets:select(player_sys_attr, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_sys_attr),
    R;

select(player_special_prop, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_special_prop, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_special_prop),
    R;

select(player_shop, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_shop, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_shop),
    R;

select(player_shen_long, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_shen_long, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_shen_long),
    R;

select(player_share_task_award, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_share_task_award, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_share_task_award),
    R;

select(player_share_task, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_share_task, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_share_task),
    R;

select(player_share_friend, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_share_friend, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_share_friend),
    R;

select(player_share, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_share, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_share),
    R;

select(player_seven_login, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_seven_login, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_seven_login),
    R;

select(player_server_data, MatchSpec) ->
    ?START_PROF,
    R = dets:select(player_server_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_server_data),
    R;

select(player_send_gamebar_msg, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_send_gamebar_msg, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_send_gamebar_msg),
    R;

select(player_prop, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_prop, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_prop),
    R;

select(player_prerogative_card, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_prerogative_card, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_prerogative_card),
    R;

select(player_platform_award, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_platform_award, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_platform_award),
    R;

select(player_passive_skill, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_passive_skill, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_passive_skill),
    R;

select(player_online_info, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_online_info, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_online_info),
    R;

select(player_online_award, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_online_award, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_online_award),
    R;

select(player_offline_apply, MatchSpec) ->
    ?START_PROF,
    R = dets:select(player_offline_apply, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_offline_apply),
    R;

select(player_mission_data, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_mission_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_mission_data),
    R;

select(player_mail, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_mail, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_mail),
    R;

select(player_leichong, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_leichong, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_leichong),
    R;

select(player_laba_data, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_laba_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_laba_data),
    R;

select(player_jiangjinchi, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_jiangjinchi, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_jiangjinchi),
    R;

select(player_invite_friend_log, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_invite_friend_log, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_invite_friend_log),
    R;

select(player_invite_friend, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_invite_friend, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_invite_friend),
    R;

select(player_invest_type, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_invest_type, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_invest_type),
    R;

select(player_invest, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_invest, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_invest),
    R;

select(player_hero_use, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_hero_use, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_hero_use),
    R;

select(player_hero_parts, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_hero_parts, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_hero_parts),
    R;

select(player_hero, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_hero, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_hero),
    R;

select(player_gift_mail_log, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_gift_mail_log, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_gift_mail_log),
    R;

select(player_gift_mail, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_gift_mail, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_gift_mail),
    R;

select(player_gift_code, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_gift_code, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_gift_code),
    R;

select(player_game_data, MatchSpec) ->
    ?START_PROF,
    R = dets:select(player_game_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_game_data),
    R;

select(player_game_config, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_game_config, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_game_config),
    R;

select(player_function, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_function, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_function),
    R;

select(player_first_charge_day, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_first_charge_day, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_first_charge_day),
    R;

select(player_first_charge, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_first_charge, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_first_charge),
    R;

select(player_finish_share_task, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_finish_share_task, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_finish_share_task),
    R;

select(player_fight_adjust, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_fight_adjust, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_fight_adjust),
    R;

select(player_everyday_sign, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_everyday_sign, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_everyday_sign),
    R;

select(player_everyday_charge, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_everyday_charge, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_everyday_charge),
    R;

select(player_data, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_data),
    R;

select(player_daily_task, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_daily_task, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_daily_task),
    R;

select(player_daily_points, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_daily_points, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_daily_points),
    R;

select(player_conditions_data, MatchSpec) ->
    ?START_PROF,
    R = dets:select(player_conditions_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_conditions_data),
    R;

select(player_condition_activity, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_condition_activity, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_condition_activity),
    R;

select(player_client_data, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_client_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_client_data),
    R;

select(player_chat_data, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_chat_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_chat_data),
    R;

select(player_charge_shop, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_charge_shop, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_charge_shop),
    R;

select(player_charge_record, MatchSpec) ->
    ?START_PROF,
    R = dets:select(player_charge_record, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_charge_record),
    R;

select(player_charge_info_record, MatchSpec) ->
    ?START_PROF,
    R = dets:select(player_charge_info_record, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_charge_info_record),
    R;

select(player_charge_activity, MatchSpec) ->
    ?START_PROF,
    R = dets:select(player_charge_activity, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_charge_activity),
    R;

select(player_card_title, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_card_title, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_card_title),
    R;

select(player_card_summon, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_card_summon, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_card_summon),
    R;

select(player_card_book, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_card_book, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_card_book),
    R;

select(player_card, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_card, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_card),
    R;

select(player_bounty_task, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_bounty_task, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_bounty_task),
    R;

select(player_adjust_rebound, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_adjust_rebound, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_adjust_rebound),
    R;

select(player_activity_task, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_activity_task, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_activity_task),
    R;

select(player_activity_info, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_activity_info, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_activity_info),
    R;

select(player_activity_game_info, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_activity_game_info, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_activity_game_info),
    R;

select(player_activity_game, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_activity_game, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_activity_game),
    R;

select(player_activity_condition, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_activity_condition, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_activity_condition),
    R;

select(player_achievement, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player_achievement, MatchSpec),
    ?STOP_PROF(?MODULE, select, player_achievement),
    R;

select(player, MatchSpec) ->
    ?START_PROF,
    R = ets:select(player, MatchSpec),
    ?STOP_PROF(?MODULE, select, player),
    R;

select(one_vs_one_rank_data, MatchSpec) ->
    ?START_PROF,
    R = ets:select(one_vs_one_rank_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, one_vs_one_rank_data),
    R;

select(oauth_order_log, MatchSpec) ->
    ?START_PROF,
    R = ets:select(oauth_order_log, MatchSpec),
    ?STOP_PROF(?MODULE, select, oauth_order_log),
    R;

select(mission_ranking, MatchSpec) ->
    ?START_PROF,
    R = ets:select(mission_ranking, MatchSpec),
    ?STOP_PROF(?MODULE, select, mission_ranking),
    R;

select(mission_guess_boss, MatchSpec) ->
    ?START_PROF,
    R = ets:select(mission_guess_boss, MatchSpec),
    ?STOP_PROF(?MODULE, select, mission_guess_boss),
    R;

select(match_scene_data, MatchSpec) ->
    ?START_PROF,
    R = ets:select(match_scene_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, match_scene_data),
    R;

select(login_notice, MatchSpec) ->
    ?START_PROF,
    R = ets:select(login_notice, MatchSpec),
    ?STOP_PROF(?MODULE, select, login_notice),
    R;

select(laba_adjust, MatchSpec) ->
    ?START_PROF,
    R = ets:select(laba_adjust, MatchSpec),
    ?STOP_PROF(?MODULE, select, laba_adjust),
    R;

select(jiangjinchi, MatchSpec) ->
    ?START_PROF,
    R = ets:select(jiangjinchi, MatchSpec),
    ?STOP_PROF(?MODULE, select, jiangjinchi),
    R;

select(gift_code_type, MatchSpec) ->
    ?START_PROF,
    R = ets:select(gift_code_type, MatchSpec),
    ?STOP_PROF(?MODULE, select, gift_code_type),
    R;

select(gift_code, MatchSpec) ->
    ?START_PROF,
    R = ets:select(gift_code, MatchSpec),
    ?STOP_PROF(?MODULE, select, gift_code),
    R;

select(consume_statistics, MatchSpec) ->
    ?START_PROF,
    R = dets:select(consume_statistics, MatchSpec),
    ?STOP_PROF(?MODULE, select, consume_statistics),
    R;

select(client_versin, MatchSpec) ->
    ?START_PROF,
    R = ets:select(client_versin, MatchSpec),
    ?STOP_PROF(?MODULE, select, client_versin),
    R;

select(charge_order_request_record, MatchSpec) ->
    ?START_PROF,
    R = ets:select(charge_order_request_record, MatchSpec),
    ?STOP_PROF(?MODULE, select, charge_order_request_record),
    R;

select(charge_ip_white_record, MatchSpec) ->
    ?START_PROF,
    R = ets:select(charge_ip_white_record, MatchSpec),
    ?STOP_PROF(?MODULE, select, charge_ip_white_record),
    R;

select(charge_info_record, MatchSpec) ->
    ?START_PROF,
    R = dets:select(charge_info_record, MatchSpec),
    ?STOP_PROF(?MODULE, select, charge_info_record),
    R;

select(c_server_node, MatchSpec) ->
    ?START_PROF,
    R = ets:select(c_server_node, MatchSpec),
    ?STOP_PROF(?MODULE, select, c_server_node),
    R;

select(c_game_server, MatchSpec) ->
    ?START_PROF,
    R = ets:select(c_game_server, MatchSpec),
    ?STOP_PROF(?MODULE, select, c_game_server),
    R;

select(brave_one, MatchSpec) ->
    ?START_PROF,
    R = ets:select(brave_one, MatchSpec),
    ?STOP_PROF(?MODULE, select, brave_one),
    R;

select(boss_one_on_one, MatchSpec) ->
    ?START_PROF,
    R = ets:select(boss_one_on_one, MatchSpec),
    ?STOP_PROF(?MODULE, select, boss_one_on_one),
    R;

select(activity_info, MatchSpec) ->
    ?START_PROF,
    R = ets:select(activity_info, MatchSpec),
    ?STOP_PROF(?MODULE, select, activity_info),
    R;

select(activity_award, MatchSpec) ->
    ?START_PROF,
    R = ets:select(activity_award, MatchSpec),
    ?STOP_PROF(?MODULE, select, activity_award),
    R;

select(account_share_data, MatchSpec) ->
    ?START_PROF,
    R = ets:select(account_share_data, MatchSpec),
    ?STOP_PROF(?MODULE, select, account_share_data),
    R;

select(account_charge_white, MatchSpec) ->
    ?START_PROF,
    R = ets:select(account_charge_white, MatchSpec),
    ?STOP_PROF(?MODULE, select, account_charge_white),
    R;

select(account, MatchSpec) ->
    ?START_PROF,
    R = dets:select(account, MatchSpec),
    ?STOP_PROF(?MODULE, select, account),
    R.

select_delete(_, _, _)->
    null.
select_delete(wheel_result_record_accumulate, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(wheel_result_record_accumulate, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, wheel_result_record_accumulate),
    RecordList;

select_delete(wheel_result_record, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(wheel_result_record, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, wheel_result_record),
    RecordList;

select_delete(wheel_pool, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(wheel_pool, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, wheel_pool),
    RecordList;

select_delete(wheel_player_bet_record_today, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(wheel_player_bet_record_today, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, wheel_player_bet_record_today),
    RecordList;

select_delete(wheel_player_bet_record, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(wheel_player_bet_record, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, wheel_player_bet_record),
    RecordList;

select_delete(unique_id_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(unique_id_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, unique_id_data),
    RecordList;

select_delete(tongxingzheng_month_task, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(tongxingzheng_month_task, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, tongxingzheng_month_task),
    RecordList;

select_delete(tongxingzheng_daily_task, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(tongxingzheng_daily_task, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, tongxingzheng_daily_task),
    RecordList;

select_delete(timer_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(timer_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, timer_data),
    RecordList;

select_delete(test, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(test, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, test),
    RecordList;

select_delete(server_state, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(server_state, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, server_state),
    RecordList;

select_delete(server_player_fight_adjust, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(server_player_fight_adjust, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, server_player_fight_adjust),
    RecordList;

select_delete(server_game_config, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(server_game_config, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, server_game_config),
    RecordList;

select_delete(server_fight_adjust, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(server_fight_adjust, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, server_fight_adjust),
    RecordList;

select_delete(server_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(server_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, server_data),
    RecordList;

select_delete(scene_log, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(scene_log, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, scene_log),
    RecordList;

select_delete(scene_boss_adjust, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(scene_boss_adjust, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, scene_boss_adjust),
    RecordList;

select_delete(scene_adjust, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(scene_adjust, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, scene_adjust),
    RecordList;

select_delete(robot_player_scene_cache, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(robot_player_scene_cache, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, robot_player_scene_cache),
    RecordList;

select_delete(robot_player_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(robot_player_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, robot_player_data),
    RecordList;

select_delete(red_packet_condition, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(red_packet_condition, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, red_packet_condition),
    RecordList;

select_delete(rank_info, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(rank_info, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, rank_info),
    RecordList;

select_delete(promote_record, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(promote_record, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, promote_record),
    RecordList;

select_delete(promote_info, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(promote_info, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, promote_info),
    RecordList;

select_delete(promote, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(promote, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, promote),
    RecordList;

select_delete(player_vip_award, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_vip_award, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_vip_award),
    RecordList;

select_delete(player_vip, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_vip, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_vip),
    RecordList;

select_delete(player_title, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_title, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_title),
    RecordList;

select_delete(player_times_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_times_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_times_data),
    RecordList;

select_delete(player_task_share_award, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_task_share_award, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_task_share_award),
    RecordList;

select_delete(player_task, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_task, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_task),
    RecordList;

select_delete(player_sys_common, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_sys_common, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_sys_common),
    RecordList;

select_delete(player_sys_attr, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_sys_attr, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_sys_attr),
    RecordList;

select_delete(player_special_prop, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_special_prop, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_special_prop),
    RecordList;

select_delete(player_shop, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_shop, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_shop),
    RecordList;

select_delete(player_shen_long, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_shen_long, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_shen_long),
    RecordList;

select_delete(player_share_task_award, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_share_task_award, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_share_task_award),
    RecordList;

select_delete(player_share_task, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_share_task, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_share_task),
    RecordList;

select_delete(player_share_friend, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_share_friend, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_share_friend),
    RecordList;

select_delete(player_share, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_share, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_share),
    RecordList;

select_delete(player_seven_login, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_seven_login, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_seven_login),
    RecordList;

select_delete(player_server_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_server_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_server_data),
    RecordList;

select_delete(player_send_gamebar_msg, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_send_gamebar_msg, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_send_gamebar_msg),
    RecordList;

select_delete(player_prop, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_prop, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_prop),
    RecordList;

select_delete(player_prerogative_card, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_prerogative_card, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_prerogative_card),
    RecordList;

select_delete(player_platform_award, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_platform_award, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_platform_award),
    RecordList;

select_delete(player_passive_skill, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_passive_skill, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_passive_skill),
    RecordList;

select_delete(player_online_info, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_online_info, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_online_info),
    RecordList;

select_delete(player_online_award, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_online_award, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_online_award),
    RecordList;

select_delete(player_offline_apply, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_offline_apply, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_offline_apply),
    RecordList;

select_delete(player_mission_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_mission_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_mission_data),
    RecordList;

select_delete(player_mail, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_mail, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_mail),
    RecordList;

select_delete(player_leichong, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_leichong, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_leichong),
    RecordList;

select_delete(player_laba_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_laba_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_laba_data),
    RecordList;

select_delete(player_jiangjinchi, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_jiangjinchi, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_jiangjinchi),
    RecordList;

select_delete(player_invite_friend_log, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_invite_friend_log, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_invite_friend_log),
    RecordList;

select_delete(player_invite_friend, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_invite_friend, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_invite_friend),
    RecordList;

select_delete(player_invest_type, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_invest_type, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_invest_type),
    RecordList;

select_delete(player_invest, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_invest, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_invest),
    RecordList;

select_delete(player_hero_use, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_hero_use, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_hero_use),
    RecordList;

select_delete(player_hero_parts, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_hero_parts, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_hero_parts),
    RecordList;

select_delete(player_hero, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_hero, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_hero),
    RecordList;

select_delete(player_gift_mail_log, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_gift_mail_log, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_gift_mail_log),
    RecordList;

select_delete(player_gift_mail, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_gift_mail, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_gift_mail),
    RecordList;

select_delete(player_gift_code, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_gift_code, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_gift_code),
    RecordList;

select_delete(player_game_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_game_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_game_data),
    RecordList;

select_delete(player_game_config, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_game_config, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_game_config),
    RecordList;

select_delete(player_function, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_function, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_function),
    RecordList;

select_delete(player_first_charge_day, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_first_charge_day, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_first_charge_day),
    RecordList;

select_delete(player_first_charge, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_first_charge, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_first_charge),
    RecordList;

select_delete(player_finish_share_task, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_finish_share_task, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_finish_share_task),
    RecordList;

select_delete(player_fight_adjust, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_fight_adjust, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_fight_adjust),
    RecordList;

select_delete(player_everyday_sign, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_everyday_sign, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_everyday_sign),
    RecordList;

select_delete(player_everyday_charge, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_everyday_charge, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_everyday_charge),
    RecordList;

select_delete(player_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_data),
    RecordList;

select_delete(player_daily_task, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_daily_task, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_daily_task),
    RecordList;

select_delete(player_daily_points, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_daily_points, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_daily_points),
    RecordList;

select_delete(player_conditions_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_conditions_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_conditions_data),
    RecordList;

select_delete(player_condition_activity, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_condition_activity, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_condition_activity),
    RecordList;

select_delete(player_client_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_client_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_client_data),
    RecordList;

select_delete(player_chat_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_chat_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_chat_data),
    RecordList;

select_delete(player_charge_shop, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_charge_shop, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_charge_shop),
    RecordList;

select_delete(player_charge_record, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_charge_record, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_charge_record),
    RecordList;

select_delete(player_charge_info_record, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_charge_info_record, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_charge_info_record),
    RecordList;

select_delete(player_charge_activity, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_charge_activity, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_charge_activity),
    RecordList;

select_delete(player_card_title, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_card_title, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_card_title),
    RecordList;

select_delete(player_card_summon, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_card_summon, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_card_summon),
    RecordList;

select_delete(player_card_book, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_card_book, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_card_book),
    RecordList;

select_delete(player_card, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_card, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_card),
    RecordList;

select_delete(player_bounty_task, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_bounty_task, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_bounty_task),
    RecordList;

select_delete(player_adjust_rebound, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_adjust_rebound, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_adjust_rebound),
    RecordList;

select_delete(player_activity_task, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_activity_task, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_activity_task),
    RecordList;

select_delete(player_activity_info, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_activity_info, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_activity_info),
    RecordList;

select_delete(player_activity_game_info, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_activity_game_info, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_activity_game_info),
    RecordList;

select_delete(player_activity_game, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_activity_game, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_activity_game),
    RecordList;

select_delete(player_activity_condition, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_activity_condition, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_activity_condition),
    RecordList;

select_delete(player_achievement, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player_achievement, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player_achievement),
    RecordList;

select_delete(player, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(player, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, player),
    RecordList;

select_delete(one_vs_one_rank_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(one_vs_one_rank_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, one_vs_one_rank_data),
    RecordList;

select_delete(oauth_order_log, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(oauth_order_log, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, oauth_order_log),
    RecordList;

select_delete(mission_ranking, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(mission_ranking, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, mission_ranking),
    RecordList;

select_delete(mission_guess_boss, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(mission_guess_boss, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, mission_guess_boss),
    RecordList;

select_delete(match_scene_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(match_scene_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, match_scene_data),
    RecordList;

select_delete(login_notice, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(login_notice, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, login_notice),
    RecordList;

select_delete(laba_adjust, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(laba_adjust, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, laba_adjust),
    RecordList;

select_delete(jiangjinchi, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(jiangjinchi, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, jiangjinchi),
    RecordList;

select_delete(gift_code_type, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(gift_code_type, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, gift_code_type),
    RecordList;

select_delete(gift_code, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(gift_code, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, gift_code),
    RecordList;

select_delete(consume_statistics, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(consume_statistics, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, consume_statistics),
    RecordList;

select_delete(client_versin, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(client_versin, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, client_versin),
    RecordList;

select_delete(charge_order_request_record, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(charge_order_request_record, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, charge_order_request_record),
    RecordList;

select_delete(charge_ip_white_record, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(charge_ip_white_record, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, charge_ip_white_record),
    RecordList;

select_delete(charge_info_record, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(charge_info_record, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, charge_info_record),
    RecordList;

select_delete(c_server_node, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(c_server_node, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, c_server_node),
    RecordList;

select_delete(c_game_server, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(c_game_server, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, c_game_server),
    RecordList;

select_delete(brave_one, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(brave_one, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, brave_one),
    RecordList;

select_delete(boss_one_on_one, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(boss_one_on_one, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, boss_one_on_one),
    RecordList;

select_delete(activity_info, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(activity_info, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, activity_info),
    RecordList;

select_delete(activity_award, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(activity_award, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, activity_award),
    RecordList;

select_delete(account_share_data, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(account_share_data, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, account_share_data),
    RecordList;

select_delete(account_charge_white, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(account_charge_white, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, account_charge_white),
    RecordList;

select_delete(account, MatchSpec) ->
    ?START_PROF,
    ensure_tran(),
    RecordList = select(account, MatchSpec),
    [delete(Record) || Record <- RecordList],
    ?STOP_PROF(?MODULE, select_delete, account),
    RecordList.

get_slice_table_list(_)->
    null.
get_slice_table(_, _)->
    null.
save_bin_log({_EtsTable,Table, delete_all, RecordList})->
    [save_bin_log({_EtsTable,Table, delete, Record}) || Record <- RecordList],
    ok;
save_bin_log({_EtsTable,wheel_result_record_accumulate, delete, Record})->
    case ets:lookup(wheel_result_record_accumulate_bin_log, Record#db_wheel_result_record_accumulate.row_key) of
	    []->
		    ets:insert(wheel_result_record_accumulate_bin_log, {Record#db_wheel_result_record_accumulate.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(wheel_result_record_accumulate_bin_log, {Record#db_wheel_result_record_accumulate.row_key, Current, null})
    end;
save_bin_log({_EtsTable,wheel_result_record_accumulate, insert, NewRecord})->
    case ets:lookup(wheel_result_record_accumulate_bin_log, NewRecord#db_wheel_result_record_accumulate.row_key) of
        []->
            ets:insert(wheel_result_record_accumulate_bin_log, {NewRecord#db_wheel_result_record_accumulate.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(wheel_result_record_accumulate_bin_log, {NewRecord#db_wheel_result_record_accumulate.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,wheel_result_record_accumulate, update, NewRecord, OldRecord})->
    case ets:lookup(wheel_result_record_accumulate_bin_log, NewRecord#db_wheel_result_record_accumulate.row_key) of
	    []->
		     ets:insert(wheel_result_record_accumulate_bin_log, {NewRecord#db_wheel_result_record_accumulate.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(wheel_result_record_accumulate_bin_log, {NewRecord#db_wheel_result_record_accumulate.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,wheel_result_record, delete, Record})->
    case ets:lookup(wheel_result_record_bin_log, Record#db_wheel_result_record.row_key) of
	    []->
		    ets:insert(wheel_result_record_bin_log, {Record#db_wheel_result_record.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(wheel_result_record_bin_log, {Record#db_wheel_result_record.row_key, Current, null})
    end;
save_bin_log({_EtsTable,wheel_result_record, insert, NewRecord})->
    case ets:lookup(wheel_result_record_bin_log, NewRecord#db_wheel_result_record.row_key) of
        []->
            ets:insert(wheel_result_record_bin_log, {NewRecord#db_wheel_result_record.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(wheel_result_record_bin_log, {NewRecord#db_wheel_result_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,wheel_result_record, update, NewRecord, OldRecord})->
    case ets:lookup(wheel_result_record_bin_log, NewRecord#db_wheel_result_record.row_key) of
	    []->
		     ets:insert(wheel_result_record_bin_log, {NewRecord#db_wheel_result_record.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(wheel_result_record_bin_log, {NewRecord#db_wheel_result_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,wheel_pool, delete, Record})->
    case ets:lookup(wheel_pool_bin_log, Record#db_wheel_pool.row_key) of
	    []->
		    ets:insert(wheel_pool_bin_log, {Record#db_wheel_pool.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(wheel_pool_bin_log, {Record#db_wheel_pool.row_key, Current, null})
    end;
save_bin_log({_EtsTable,wheel_pool, insert, NewRecord})->
    case ets:lookup(wheel_pool_bin_log, NewRecord#db_wheel_pool.row_key) of
        []->
            ets:insert(wheel_pool_bin_log, {NewRecord#db_wheel_pool.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(wheel_pool_bin_log, {NewRecord#db_wheel_pool.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,wheel_pool, update, NewRecord, OldRecord})->
    case ets:lookup(wheel_pool_bin_log, NewRecord#db_wheel_pool.row_key) of
	    []->
		     ets:insert(wheel_pool_bin_log, {NewRecord#db_wheel_pool.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(wheel_pool_bin_log, {NewRecord#db_wheel_pool.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,wheel_player_bet_record_today, delete, Record})->
    case ets:lookup(wheel_player_bet_record_today_bin_log, Record#db_wheel_player_bet_record_today.row_key) of
	    []->
		    ets:insert(wheel_player_bet_record_today_bin_log, {Record#db_wheel_player_bet_record_today.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(wheel_player_bet_record_today_bin_log, {Record#db_wheel_player_bet_record_today.row_key, Current, null})
    end;
save_bin_log({_EtsTable,wheel_player_bet_record_today, insert, NewRecord})->
    case ets:lookup(wheel_player_bet_record_today_bin_log, NewRecord#db_wheel_player_bet_record_today.row_key) of
        []->
            ets:insert(wheel_player_bet_record_today_bin_log, {NewRecord#db_wheel_player_bet_record_today.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(wheel_player_bet_record_today_bin_log, {NewRecord#db_wheel_player_bet_record_today.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,wheel_player_bet_record_today, update, NewRecord, OldRecord})->
    case ets:lookup(wheel_player_bet_record_today_bin_log, NewRecord#db_wheel_player_bet_record_today.row_key) of
	    []->
		     ets:insert(wheel_player_bet_record_today_bin_log, {NewRecord#db_wheel_player_bet_record_today.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(wheel_player_bet_record_today_bin_log, {NewRecord#db_wheel_player_bet_record_today.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,wheel_player_bet_record, delete, Record})->
    case ets:lookup(wheel_player_bet_record_bin_log, Record#db_wheel_player_bet_record.row_key) of
	    []->
		    ets:insert(wheel_player_bet_record_bin_log, {Record#db_wheel_player_bet_record.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(wheel_player_bet_record_bin_log, {Record#db_wheel_player_bet_record.row_key, Current, null})
    end;
save_bin_log({_EtsTable,wheel_player_bet_record, insert, NewRecord})->
    case ets:lookup(wheel_player_bet_record_bin_log, NewRecord#db_wheel_player_bet_record.row_key) of
        []->
            ets:insert(wheel_player_bet_record_bin_log, {NewRecord#db_wheel_player_bet_record.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(wheel_player_bet_record_bin_log, {NewRecord#db_wheel_player_bet_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,wheel_player_bet_record, update, NewRecord, OldRecord})->
    case ets:lookup(wheel_player_bet_record_bin_log, NewRecord#db_wheel_player_bet_record.row_key) of
	    []->
		     ets:insert(wheel_player_bet_record_bin_log, {NewRecord#db_wheel_player_bet_record.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(wheel_player_bet_record_bin_log, {NewRecord#db_wheel_player_bet_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,unique_id_data, delete, Record})->
    case ets:lookup(unique_id_data_bin_log, Record#db_unique_id_data.row_key) of
	    []->
		    ets:insert(unique_id_data_bin_log, {Record#db_unique_id_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(unique_id_data_bin_log, {Record#db_unique_id_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,unique_id_data, insert, NewRecord})->
    case ets:lookup(unique_id_data_bin_log, NewRecord#db_unique_id_data.row_key) of
        []->
            ets:insert(unique_id_data_bin_log, {NewRecord#db_unique_id_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(unique_id_data_bin_log, {NewRecord#db_unique_id_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,unique_id_data, update, NewRecord, OldRecord})->
    case ets:lookup(unique_id_data_bin_log, NewRecord#db_unique_id_data.row_key) of
	    []->
		     ets:insert(unique_id_data_bin_log, {NewRecord#db_unique_id_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(unique_id_data_bin_log, {NewRecord#db_unique_id_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,tongxingzheng_month_task, delete, Record})->
    case ets:lookup(tongxingzheng_month_task_bin_log, Record#db_tongxingzheng_month_task.row_key) of
	    []->
		    ets:insert(tongxingzheng_month_task_bin_log, {Record#db_tongxingzheng_month_task.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(tongxingzheng_month_task_bin_log, {Record#db_tongxingzheng_month_task.row_key, Current, null})
    end;
save_bin_log({_EtsTable,tongxingzheng_month_task, insert, NewRecord})->
    case ets:lookup(tongxingzheng_month_task_bin_log, NewRecord#db_tongxingzheng_month_task.row_key) of
        []->
            ets:insert(tongxingzheng_month_task_bin_log, {NewRecord#db_tongxingzheng_month_task.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(tongxingzheng_month_task_bin_log, {NewRecord#db_tongxingzheng_month_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,tongxingzheng_month_task, update, NewRecord, OldRecord})->
    case ets:lookup(tongxingzheng_month_task_bin_log, NewRecord#db_tongxingzheng_month_task.row_key) of
	    []->
		     ets:insert(tongxingzheng_month_task_bin_log, {NewRecord#db_tongxingzheng_month_task.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(tongxingzheng_month_task_bin_log, {NewRecord#db_tongxingzheng_month_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,tongxingzheng_daily_task, delete, Record})->
    case ets:lookup(tongxingzheng_daily_task_bin_log, Record#db_tongxingzheng_daily_task.row_key) of
	    []->
		    ets:insert(tongxingzheng_daily_task_bin_log, {Record#db_tongxingzheng_daily_task.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(tongxingzheng_daily_task_bin_log, {Record#db_tongxingzheng_daily_task.row_key, Current, null})
    end;
save_bin_log({_EtsTable,tongxingzheng_daily_task, insert, NewRecord})->
    case ets:lookup(tongxingzheng_daily_task_bin_log, NewRecord#db_tongxingzheng_daily_task.row_key) of
        []->
            ets:insert(tongxingzheng_daily_task_bin_log, {NewRecord#db_tongxingzheng_daily_task.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(tongxingzheng_daily_task_bin_log, {NewRecord#db_tongxingzheng_daily_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,tongxingzheng_daily_task, update, NewRecord, OldRecord})->
    case ets:lookup(tongxingzheng_daily_task_bin_log, NewRecord#db_tongxingzheng_daily_task.row_key) of
	    []->
		     ets:insert(tongxingzheng_daily_task_bin_log, {NewRecord#db_tongxingzheng_daily_task.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(tongxingzheng_daily_task_bin_log, {NewRecord#db_tongxingzheng_daily_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,timer_data, delete, Record})->
    case ets:lookup(timer_data_bin_log, Record#db_timer_data.row_key) of
	    []->
		    ets:insert(timer_data_bin_log, {Record#db_timer_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(timer_data_bin_log, {Record#db_timer_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,timer_data, insert, NewRecord})->
    case ets:lookup(timer_data_bin_log, NewRecord#db_timer_data.row_key) of
        []->
            ets:insert(timer_data_bin_log, {NewRecord#db_timer_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(timer_data_bin_log, {NewRecord#db_timer_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,timer_data, update, NewRecord, OldRecord})->
    case ets:lookup(timer_data_bin_log, NewRecord#db_timer_data.row_key) of
	    []->
		     ets:insert(timer_data_bin_log, {NewRecord#db_timer_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(timer_data_bin_log, {NewRecord#db_timer_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,test, delete, Record})->
    case ets:lookup(test_bin_log, Record#db_test.row_key) of
	    []->
		    ets:insert(test_bin_log, {Record#db_test.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(test_bin_log, {Record#db_test.row_key, Current, null})
    end;
save_bin_log({_EtsTable,test, insert, NewRecord})->
    case ets:lookup(test_bin_log, NewRecord#db_test.row_key) of
        []->
            ets:insert(test_bin_log, {NewRecord#db_test.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(test_bin_log, {NewRecord#db_test.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,test, update, NewRecord, OldRecord})->
    case ets:lookup(test_bin_log, NewRecord#db_test.row_key) of
	    []->
		     ets:insert(test_bin_log, {NewRecord#db_test.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(test_bin_log, {NewRecord#db_test.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,server_state, delete, Record})->
    case ets:lookup(server_state_bin_log, Record#db_server_state.row_key) of
	    []->
		    ets:insert(server_state_bin_log, {Record#db_server_state.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(server_state_bin_log, {Record#db_server_state.row_key, Current, null})
    end;
save_bin_log({_EtsTable,server_state, insert, NewRecord})->
    case ets:lookup(server_state_bin_log, NewRecord#db_server_state.row_key) of
        []->
            ets:insert(server_state_bin_log, {NewRecord#db_server_state.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(server_state_bin_log, {NewRecord#db_server_state.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,server_state, update, NewRecord, OldRecord})->
    case ets:lookup(server_state_bin_log, NewRecord#db_server_state.row_key) of
	    []->
		     ets:insert(server_state_bin_log, {NewRecord#db_server_state.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(server_state_bin_log, {NewRecord#db_server_state.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,server_player_fight_adjust, delete, Record})->
    case ets:lookup(server_player_fight_adjust_bin_log, Record#db_server_player_fight_adjust.row_key) of
	    []->
		    ets:insert(server_player_fight_adjust_bin_log, {Record#db_server_player_fight_adjust.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(server_player_fight_adjust_bin_log, {Record#db_server_player_fight_adjust.row_key, Current, null})
    end;
save_bin_log({_EtsTable,server_player_fight_adjust, insert, NewRecord})->
    case ets:lookup(server_player_fight_adjust_bin_log, NewRecord#db_server_player_fight_adjust.row_key) of
        []->
            ets:insert(server_player_fight_adjust_bin_log, {NewRecord#db_server_player_fight_adjust.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(server_player_fight_adjust_bin_log, {NewRecord#db_server_player_fight_adjust.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,server_player_fight_adjust, update, NewRecord, OldRecord})->
    case ets:lookup(server_player_fight_adjust_bin_log, NewRecord#db_server_player_fight_adjust.row_key) of
	    []->
		     ets:insert(server_player_fight_adjust_bin_log, {NewRecord#db_server_player_fight_adjust.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(server_player_fight_adjust_bin_log, {NewRecord#db_server_player_fight_adjust.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,server_game_config, delete, Record})->
    case ets:lookup(server_game_config_bin_log, Record#db_server_game_config.row_key) of
	    []->
		    ets:insert(server_game_config_bin_log, {Record#db_server_game_config.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(server_game_config_bin_log, {Record#db_server_game_config.row_key, Current, null})
    end;
save_bin_log({_EtsTable,server_game_config, insert, NewRecord})->
    case ets:lookup(server_game_config_bin_log, NewRecord#db_server_game_config.row_key) of
        []->
            ets:insert(server_game_config_bin_log, {NewRecord#db_server_game_config.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(server_game_config_bin_log, {NewRecord#db_server_game_config.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,server_game_config, update, NewRecord, OldRecord})->
    case ets:lookup(server_game_config_bin_log, NewRecord#db_server_game_config.row_key) of
	    []->
		     ets:insert(server_game_config_bin_log, {NewRecord#db_server_game_config.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(server_game_config_bin_log, {NewRecord#db_server_game_config.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,server_fight_adjust, delete, Record})->
    case ets:lookup(server_fight_adjust_bin_log, Record#db_server_fight_adjust.row_key) of
	    []->
		    ets:insert(server_fight_adjust_bin_log, {Record#db_server_fight_adjust.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(server_fight_adjust_bin_log, {Record#db_server_fight_adjust.row_key, Current, null})
    end;
save_bin_log({_EtsTable,server_fight_adjust, insert, NewRecord})->
    case ets:lookup(server_fight_adjust_bin_log, NewRecord#db_server_fight_adjust.row_key) of
        []->
            ets:insert(server_fight_adjust_bin_log, {NewRecord#db_server_fight_adjust.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(server_fight_adjust_bin_log, {NewRecord#db_server_fight_adjust.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,server_fight_adjust, update, NewRecord, OldRecord})->
    case ets:lookup(server_fight_adjust_bin_log, NewRecord#db_server_fight_adjust.row_key) of
	    []->
		     ets:insert(server_fight_adjust_bin_log, {NewRecord#db_server_fight_adjust.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(server_fight_adjust_bin_log, {NewRecord#db_server_fight_adjust.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,server_data, delete, Record})->
    case ets:lookup(server_data_bin_log, Record#db_server_data.row_key) of
	    []->
		    ets:insert(server_data_bin_log, {Record#db_server_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(server_data_bin_log, {Record#db_server_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,server_data, insert, NewRecord})->
    case ets:lookup(server_data_bin_log, NewRecord#db_server_data.row_key) of
        []->
            ets:insert(server_data_bin_log, {NewRecord#db_server_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(server_data_bin_log, {NewRecord#db_server_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,server_data, update, NewRecord, OldRecord})->
    case ets:lookup(server_data_bin_log, NewRecord#db_server_data.row_key) of
	    []->
		     ets:insert(server_data_bin_log, {NewRecord#db_server_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(server_data_bin_log, {NewRecord#db_server_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,scene_log, delete, Record})->
    case ets:lookup(scene_log_bin_log, Record#db_scene_log.row_key) of
	    []->
		    ets:insert(scene_log_bin_log, {Record#db_scene_log.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(scene_log_bin_log, {Record#db_scene_log.row_key, Current, null})
    end;
save_bin_log({_EtsTable,scene_log, insert, NewRecord})->
    case ets:lookup(scene_log_bin_log, NewRecord#db_scene_log.row_key) of
        []->
            ets:insert(scene_log_bin_log, {NewRecord#db_scene_log.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(scene_log_bin_log, {NewRecord#db_scene_log.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,scene_log, update, NewRecord, OldRecord})->
    case ets:lookup(scene_log_bin_log, NewRecord#db_scene_log.row_key) of
	    []->
		     ets:insert(scene_log_bin_log, {NewRecord#db_scene_log.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(scene_log_bin_log, {NewRecord#db_scene_log.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,scene_boss_adjust, delete, Record})->
    case ets:lookup(scene_boss_adjust_bin_log, Record#db_scene_boss_adjust.row_key) of
	    []->
		    ets:insert(scene_boss_adjust_bin_log, {Record#db_scene_boss_adjust.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(scene_boss_adjust_bin_log, {Record#db_scene_boss_adjust.row_key, Current, null})
    end;
save_bin_log({_EtsTable,scene_boss_adjust, insert, NewRecord})->
    case ets:lookup(scene_boss_adjust_bin_log, NewRecord#db_scene_boss_adjust.row_key) of
        []->
            ets:insert(scene_boss_adjust_bin_log, {NewRecord#db_scene_boss_adjust.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(scene_boss_adjust_bin_log, {NewRecord#db_scene_boss_adjust.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,scene_boss_adjust, update, NewRecord, OldRecord})->
    case ets:lookup(scene_boss_adjust_bin_log, NewRecord#db_scene_boss_adjust.row_key) of
	    []->
		     ets:insert(scene_boss_adjust_bin_log, {NewRecord#db_scene_boss_adjust.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(scene_boss_adjust_bin_log, {NewRecord#db_scene_boss_adjust.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,scene_adjust, delete, Record})->
    case ets:lookup(scene_adjust_bin_log, Record#db_scene_adjust.row_key) of
	    []->
		    ets:insert(scene_adjust_bin_log, {Record#db_scene_adjust.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(scene_adjust_bin_log, {Record#db_scene_adjust.row_key, Current, null})
    end;
save_bin_log({_EtsTable,scene_adjust, insert, NewRecord})->
    case ets:lookup(scene_adjust_bin_log, NewRecord#db_scene_adjust.row_key) of
        []->
            ets:insert(scene_adjust_bin_log, {NewRecord#db_scene_adjust.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(scene_adjust_bin_log, {NewRecord#db_scene_adjust.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,scene_adjust, update, NewRecord, OldRecord})->
    case ets:lookup(scene_adjust_bin_log, NewRecord#db_scene_adjust.row_key) of
	    []->
		     ets:insert(scene_adjust_bin_log, {NewRecord#db_scene_adjust.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(scene_adjust_bin_log, {NewRecord#db_scene_adjust.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,robot_player_scene_cache, delete, Record})->
    case ets:lookup(robot_player_scene_cache_bin_log, Record#db_robot_player_scene_cache.row_key) of
	    []->
		    ets:insert(robot_player_scene_cache_bin_log, {Record#db_robot_player_scene_cache.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(robot_player_scene_cache_bin_log, {Record#db_robot_player_scene_cache.row_key, Current, null})
    end;
save_bin_log({_EtsTable,robot_player_scene_cache, insert, NewRecord})->
    case ets:lookup(robot_player_scene_cache_bin_log, NewRecord#db_robot_player_scene_cache.row_key) of
        []->
            ets:insert(robot_player_scene_cache_bin_log, {NewRecord#db_robot_player_scene_cache.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(robot_player_scene_cache_bin_log, {NewRecord#db_robot_player_scene_cache.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,robot_player_scene_cache, update, NewRecord, OldRecord})->
    case ets:lookup(robot_player_scene_cache_bin_log, NewRecord#db_robot_player_scene_cache.row_key) of
	    []->
		     ets:insert(robot_player_scene_cache_bin_log, {NewRecord#db_robot_player_scene_cache.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(robot_player_scene_cache_bin_log, {NewRecord#db_robot_player_scene_cache.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,robot_player_data, delete, Record})->
    case ets:lookup(robot_player_data_bin_log, Record#db_robot_player_data.row_key) of
	    []->
		    ets:insert(robot_player_data_bin_log, {Record#db_robot_player_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(robot_player_data_bin_log, {Record#db_robot_player_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,robot_player_data, insert, NewRecord})->
    case ets:lookup(robot_player_data_bin_log, NewRecord#db_robot_player_data.row_key) of
        []->
            ets:insert(robot_player_data_bin_log, {NewRecord#db_robot_player_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(robot_player_data_bin_log, {NewRecord#db_robot_player_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,robot_player_data, update, NewRecord, OldRecord})->
    case ets:lookup(robot_player_data_bin_log, NewRecord#db_robot_player_data.row_key) of
	    []->
		     ets:insert(robot_player_data_bin_log, {NewRecord#db_robot_player_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(robot_player_data_bin_log, {NewRecord#db_robot_player_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,red_packet_condition, delete, Record})->
    case ets:lookup(red_packet_condition_bin_log, Record#db_red_packet_condition.row_key) of
	    []->
		    ets:insert(red_packet_condition_bin_log, {Record#db_red_packet_condition.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(red_packet_condition_bin_log, {Record#db_red_packet_condition.row_key, Current, null})
    end;
save_bin_log({_EtsTable,red_packet_condition, insert, NewRecord})->
    case ets:lookup(red_packet_condition_bin_log, NewRecord#db_red_packet_condition.row_key) of
        []->
            ets:insert(red_packet_condition_bin_log, {NewRecord#db_red_packet_condition.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(red_packet_condition_bin_log, {NewRecord#db_red_packet_condition.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,red_packet_condition, update, NewRecord, OldRecord})->
    case ets:lookup(red_packet_condition_bin_log, NewRecord#db_red_packet_condition.row_key) of
	    []->
		     ets:insert(red_packet_condition_bin_log, {NewRecord#db_red_packet_condition.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(red_packet_condition_bin_log, {NewRecord#db_red_packet_condition.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,rank_info, delete, Record})->
    case ets:lookup(rank_info_bin_log, Record#db_rank_info.row_key) of
	    []->
		    ets:insert(rank_info_bin_log, {Record#db_rank_info.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(rank_info_bin_log, {Record#db_rank_info.row_key, Current, null})
    end;
save_bin_log({_EtsTable,rank_info, insert, NewRecord})->
    case ets:lookup(rank_info_bin_log, NewRecord#db_rank_info.row_key) of
        []->
            ets:insert(rank_info_bin_log, {NewRecord#db_rank_info.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(rank_info_bin_log, {NewRecord#db_rank_info.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,rank_info, update, NewRecord, OldRecord})->
    case ets:lookup(rank_info_bin_log, NewRecord#db_rank_info.row_key) of
	    []->
		     ets:insert(rank_info_bin_log, {NewRecord#db_rank_info.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(rank_info_bin_log, {NewRecord#db_rank_info.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,promote_record, delete, Record})->
    case ets:lookup(promote_record_bin_log, Record#db_promote_record.row_key) of
	    []->
		    ets:insert(promote_record_bin_log, {Record#db_promote_record.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(promote_record_bin_log, {Record#db_promote_record.row_key, Current, null})
    end;
save_bin_log({_EtsTable,promote_record, insert, NewRecord})->
    case ets:lookup(promote_record_bin_log, NewRecord#db_promote_record.row_key) of
        []->
            ets:insert(promote_record_bin_log, {NewRecord#db_promote_record.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(promote_record_bin_log, {NewRecord#db_promote_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,promote_record, update, NewRecord, OldRecord})->
    case ets:lookup(promote_record_bin_log, NewRecord#db_promote_record.row_key) of
	    []->
		     ets:insert(promote_record_bin_log, {NewRecord#db_promote_record.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(promote_record_bin_log, {NewRecord#db_promote_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,promote_info, delete, Record})->
    case ets:lookup(promote_info_bin_log, Record#db_promote_info.row_key) of
	    []->
		    ets:insert(promote_info_bin_log, {Record#db_promote_info.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(promote_info_bin_log, {Record#db_promote_info.row_key, Current, null})
    end;
save_bin_log({_EtsTable,promote_info, insert, NewRecord})->
    case ets:lookup(promote_info_bin_log, NewRecord#db_promote_info.row_key) of
        []->
            ets:insert(promote_info_bin_log, {NewRecord#db_promote_info.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(promote_info_bin_log, {NewRecord#db_promote_info.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,promote_info, update, NewRecord, OldRecord})->
    case ets:lookup(promote_info_bin_log, NewRecord#db_promote_info.row_key) of
	    []->
		     ets:insert(promote_info_bin_log, {NewRecord#db_promote_info.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(promote_info_bin_log, {NewRecord#db_promote_info.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,promote, delete, Record})->
    case ets:lookup(promote_bin_log, Record#db_promote.row_key) of
	    []->
		    ets:insert(promote_bin_log, {Record#db_promote.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(promote_bin_log, {Record#db_promote.row_key, Current, null})
    end;
save_bin_log({_EtsTable,promote, insert, NewRecord})->
    case ets:lookup(promote_bin_log, NewRecord#db_promote.row_key) of
        []->
            ets:insert(promote_bin_log, {NewRecord#db_promote.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(promote_bin_log, {NewRecord#db_promote.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,promote, update, NewRecord, OldRecord})->
    case ets:lookup(promote_bin_log, NewRecord#db_promote.row_key) of
	    []->
		     ets:insert(promote_bin_log, {NewRecord#db_promote.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(promote_bin_log, {NewRecord#db_promote.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_vip_award, delete, Record})->
    case ets:lookup(player_vip_award_bin_log, Record#db_player_vip_award.row_key) of
	    []->
		    ets:insert(player_vip_award_bin_log, {Record#db_player_vip_award.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_vip_award_bin_log, {Record#db_player_vip_award.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_vip_award, insert, NewRecord})->
    case ets:lookup(player_vip_award_bin_log, NewRecord#db_player_vip_award.row_key) of
        []->
            ets:insert(player_vip_award_bin_log, {NewRecord#db_player_vip_award.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_vip_award_bin_log, {NewRecord#db_player_vip_award.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_vip_award, update, NewRecord, OldRecord})->
    case ets:lookup(player_vip_award_bin_log, NewRecord#db_player_vip_award.row_key) of
	    []->
		     ets:insert(player_vip_award_bin_log, {NewRecord#db_player_vip_award.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_vip_award_bin_log, {NewRecord#db_player_vip_award.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_vip, delete, Record})->
    case ets:lookup(player_vip_bin_log, Record#db_player_vip.row_key) of
	    []->
		    ets:insert(player_vip_bin_log, {Record#db_player_vip.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_vip_bin_log, {Record#db_player_vip.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_vip, insert, NewRecord})->
    case ets:lookup(player_vip_bin_log, NewRecord#db_player_vip.row_key) of
        []->
            ets:insert(player_vip_bin_log, {NewRecord#db_player_vip.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_vip_bin_log, {NewRecord#db_player_vip.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_vip, update, NewRecord, OldRecord})->
    case ets:lookup(player_vip_bin_log, NewRecord#db_player_vip.row_key) of
	    []->
		     ets:insert(player_vip_bin_log, {NewRecord#db_player_vip.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_vip_bin_log, {NewRecord#db_player_vip.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_title, delete, Record})->
    case ets:lookup(player_title_bin_log, Record#db_player_title.row_key) of
	    []->
		    ets:insert(player_title_bin_log, {Record#db_player_title.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_title_bin_log, {Record#db_player_title.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_title, insert, NewRecord})->
    case ets:lookup(player_title_bin_log, NewRecord#db_player_title.row_key) of
        []->
            ets:insert(player_title_bin_log, {NewRecord#db_player_title.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_title_bin_log, {NewRecord#db_player_title.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_title, update, NewRecord, OldRecord})->
    case ets:lookup(player_title_bin_log, NewRecord#db_player_title.row_key) of
	    []->
		     ets:insert(player_title_bin_log, {NewRecord#db_player_title.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_title_bin_log, {NewRecord#db_player_title.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_times_data, delete, Record})->
    case ets:lookup(player_times_data_bin_log, Record#db_player_times_data.row_key) of
	    []->
		    ets:insert(player_times_data_bin_log, {Record#db_player_times_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_times_data_bin_log, {Record#db_player_times_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_times_data, insert, NewRecord})->
    case ets:lookup(player_times_data_bin_log, NewRecord#db_player_times_data.row_key) of
        []->
            ets:insert(player_times_data_bin_log, {NewRecord#db_player_times_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_times_data_bin_log, {NewRecord#db_player_times_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_times_data, update, NewRecord, OldRecord})->
    case ets:lookup(player_times_data_bin_log, NewRecord#db_player_times_data.row_key) of
	    []->
		     ets:insert(player_times_data_bin_log, {NewRecord#db_player_times_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_times_data_bin_log, {NewRecord#db_player_times_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_task_share_award, delete, Record})->
    case ets:lookup(player_task_share_award_bin_log, Record#db_player_task_share_award.row_key) of
	    []->
		    ets:insert(player_task_share_award_bin_log, {Record#db_player_task_share_award.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_task_share_award_bin_log, {Record#db_player_task_share_award.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_task_share_award, insert, NewRecord})->
    case ets:lookup(player_task_share_award_bin_log, NewRecord#db_player_task_share_award.row_key) of
        []->
            ets:insert(player_task_share_award_bin_log, {NewRecord#db_player_task_share_award.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_task_share_award_bin_log, {NewRecord#db_player_task_share_award.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_task_share_award, update, NewRecord, OldRecord})->
    case ets:lookup(player_task_share_award_bin_log, NewRecord#db_player_task_share_award.row_key) of
	    []->
		     ets:insert(player_task_share_award_bin_log, {NewRecord#db_player_task_share_award.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_task_share_award_bin_log, {NewRecord#db_player_task_share_award.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_task, delete, Record})->
    case ets:lookup(player_task_bin_log, Record#db_player_task.row_key) of
	    []->
		    ets:insert(player_task_bin_log, {Record#db_player_task.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_task_bin_log, {Record#db_player_task.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_task, insert, NewRecord})->
    case ets:lookup(player_task_bin_log, NewRecord#db_player_task.row_key) of
        []->
            ets:insert(player_task_bin_log, {NewRecord#db_player_task.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_task_bin_log, {NewRecord#db_player_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_task, update, NewRecord, OldRecord})->
    case ets:lookup(player_task_bin_log, NewRecord#db_player_task.row_key) of
	    []->
		     ets:insert(player_task_bin_log, {NewRecord#db_player_task.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_task_bin_log, {NewRecord#db_player_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_sys_common, delete, Record})->
    case ets:lookup(player_sys_common_bin_log, Record#db_player_sys_common.row_key) of
	    []->
		    ets:insert(player_sys_common_bin_log, {Record#db_player_sys_common.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_sys_common_bin_log, {Record#db_player_sys_common.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_sys_common, insert, NewRecord})->
    case ets:lookup(player_sys_common_bin_log, NewRecord#db_player_sys_common.row_key) of
        []->
            ets:insert(player_sys_common_bin_log, {NewRecord#db_player_sys_common.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_sys_common_bin_log, {NewRecord#db_player_sys_common.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_sys_common, update, NewRecord, OldRecord})->
    case ets:lookup(player_sys_common_bin_log, NewRecord#db_player_sys_common.row_key) of
	    []->
		     ets:insert(player_sys_common_bin_log, {NewRecord#db_player_sys_common.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_sys_common_bin_log, {NewRecord#db_player_sys_common.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_sys_attr, delete, Record})->
    case ets:lookup(player_sys_attr_bin_log, Record#db_player_sys_attr.row_key) of
	    []->
		    ets:insert(player_sys_attr_bin_log, {Record#db_player_sys_attr.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_sys_attr_bin_log, {Record#db_player_sys_attr.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_sys_attr, insert, NewRecord})->
    case ets:lookup(player_sys_attr_bin_log, NewRecord#db_player_sys_attr.row_key) of
        []->
            ets:insert(player_sys_attr_bin_log, {NewRecord#db_player_sys_attr.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_sys_attr_bin_log, {NewRecord#db_player_sys_attr.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_sys_attr, update, NewRecord, OldRecord})->
    case ets:lookup(player_sys_attr_bin_log, NewRecord#db_player_sys_attr.row_key) of
	    []->
		     ets:insert(player_sys_attr_bin_log, {NewRecord#db_player_sys_attr.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_sys_attr_bin_log, {NewRecord#db_player_sys_attr.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_special_prop, delete, Record})->
    case ets:lookup(player_special_prop_bin_log, Record#db_player_special_prop.row_key) of
	    []->
		    ets:insert(player_special_prop_bin_log, {Record#db_player_special_prop.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_special_prop_bin_log, {Record#db_player_special_prop.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_special_prop, insert, NewRecord})->
    case ets:lookup(player_special_prop_bin_log, NewRecord#db_player_special_prop.row_key) of
        []->
            ets:insert(player_special_prop_bin_log, {NewRecord#db_player_special_prop.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_special_prop_bin_log, {NewRecord#db_player_special_prop.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_special_prop, update, NewRecord, OldRecord})->
    case ets:lookup(player_special_prop_bin_log, NewRecord#db_player_special_prop.row_key) of
	    []->
		     ets:insert(player_special_prop_bin_log, {NewRecord#db_player_special_prop.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_special_prop_bin_log, {NewRecord#db_player_special_prop.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_shop, delete, Record})->
    case ets:lookup(player_shop_bin_log, Record#db_player_shop.row_key) of
	    []->
		    ets:insert(player_shop_bin_log, {Record#db_player_shop.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_shop_bin_log, {Record#db_player_shop.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_shop, insert, NewRecord})->
    case ets:lookup(player_shop_bin_log, NewRecord#db_player_shop.row_key) of
        []->
            ets:insert(player_shop_bin_log, {NewRecord#db_player_shop.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_shop_bin_log, {NewRecord#db_player_shop.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_shop, update, NewRecord, OldRecord})->
    case ets:lookup(player_shop_bin_log, NewRecord#db_player_shop.row_key) of
	    []->
		     ets:insert(player_shop_bin_log, {NewRecord#db_player_shop.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_shop_bin_log, {NewRecord#db_player_shop.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_shen_long, delete, Record})->
    case ets:lookup(player_shen_long_bin_log, Record#db_player_shen_long.row_key) of
	    []->
		    ets:insert(player_shen_long_bin_log, {Record#db_player_shen_long.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_shen_long_bin_log, {Record#db_player_shen_long.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_shen_long, insert, NewRecord})->
    case ets:lookup(player_shen_long_bin_log, NewRecord#db_player_shen_long.row_key) of
        []->
            ets:insert(player_shen_long_bin_log, {NewRecord#db_player_shen_long.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_shen_long_bin_log, {NewRecord#db_player_shen_long.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_shen_long, update, NewRecord, OldRecord})->
    case ets:lookup(player_shen_long_bin_log, NewRecord#db_player_shen_long.row_key) of
	    []->
		     ets:insert(player_shen_long_bin_log, {NewRecord#db_player_shen_long.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_shen_long_bin_log, {NewRecord#db_player_shen_long.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_share_task_award, delete, Record})->
    case ets:lookup(player_share_task_award_bin_log, Record#db_player_share_task_award.row_key) of
	    []->
		    ets:insert(player_share_task_award_bin_log, {Record#db_player_share_task_award.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_share_task_award_bin_log, {Record#db_player_share_task_award.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_share_task_award, insert, NewRecord})->
    case ets:lookup(player_share_task_award_bin_log, NewRecord#db_player_share_task_award.row_key) of
        []->
            ets:insert(player_share_task_award_bin_log, {NewRecord#db_player_share_task_award.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_share_task_award_bin_log, {NewRecord#db_player_share_task_award.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_share_task_award, update, NewRecord, OldRecord})->
    case ets:lookup(player_share_task_award_bin_log, NewRecord#db_player_share_task_award.row_key) of
	    []->
		     ets:insert(player_share_task_award_bin_log, {NewRecord#db_player_share_task_award.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_share_task_award_bin_log, {NewRecord#db_player_share_task_award.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_share_task, delete, Record})->
    case ets:lookup(player_share_task_bin_log, Record#db_player_share_task.row_key) of
	    []->
		    ets:insert(player_share_task_bin_log, {Record#db_player_share_task.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_share_task_bin_log, {Record#db_player_share_task.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_share_task, insert, NewRecord})->
    case ets:lookup(player_share_task_bin_log, NewRecord#db_player_share_task.row_key) of
        []->
            ets:insert(player_share_task_bin_log, {NewRecord#db_player_share_task.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_share_task_bin_log, {NewRecord#db_player_share_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_share_task, update, NewRecord, OldRecord})->
    case ets:lookup(player_share_task_bin_log, NewRecord#db_player_share_task.row_key) of
	    []->
		     ets:insert(player_share_task_bin_log, {NewRecord#db_player_share_task.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_share_task_bin_log, {NewRecord#db_player_share_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_share_friend, delete, Record})->
    case ets:lookup(player_share_friend_bin_log, Record#db_player_share_friend.row_key) of
	    []->
		    ets:insert(player_share_friend_bin_log, {Record#db_player_share_friend.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_share_friend_bin_log, {Record#db_player_share_friend.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_share_friend, insert, NewRecord})->
    case ets:lookup(player_share_friend_bin_log, NewRecord#db_player_share_friend.row_key) of
        []->
            ets:insert(player_share_friend_bin_log, {NewRecord#db_player_share_friend.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_share_friend_bin_log, {NewRecord#db_player_share_friend.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_share_friend, update, NewRecord, OldRecord})->
    case ets:lookup(player_share_friend_bin_log, NewRecord#db_player_share_friend.row_key) of
	    []->
		     ets:insert(player_share_friend_bin_log, {NewRecord#db_player_share_friend.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_share_friend_bin_log, {NewRecord#db_player_share_friend.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_share, delete, Record})->
    case ets:lookup(player_share_bin_log, Record#db_player_share.row_key) of
	    []->
		    ets:insert(player_share_bin_log, {Record#db_player_share.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_share_bin_log, {Record#db_player_share.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_share, insert, NewRecord})->
    case ets:lookup(player_share_bin_log, NewRecord#db_player_share.row_key) of
        []->
            ets:insert(player_share_bin_log, {NewRecord#db_player_share.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_share_bin_log, {NewRecord#db_player_share.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_share, update, NewRecord, OldRecord})->
    case ets:lookup(player_share_bin_log, NewRecord#db_player_share.row_key) of
	    []->
		     ets:insert(player_share_bin_log, {NewRecord#db_player_share.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_share_bin_log, {NewRecord#db_player_share.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_seven_login, delete, Record})->
    case ets:lookup(player_seven_login_bin_log, Record#db_player_seven_login.row_key) of
	    []->
		    ets:insert(player_seven_login_bin_log, {Record#db_player_seven_login.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_seven_login_bin_log, {Record#db_player_seven_login.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_seven_login, insert, NewRecord})->
    case ets:lookup(player_seven_login_bin_log, NewRecord#db_player_seven_login.row_key) of
        []->
            ets:insert(player_seven_login_bin_log, {NewRecord#db_player_seven_login.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_seven_login_bin_log, {NewRecord#db_player_seven_login.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_seven_login, update, NewRecord, OldRecord})->
    case ets:lookup(player_seven_login_bin_log, NewRecord#db_player_seven_login.row_key) of
	    []->
		     ets:insert(player_seven_login_bin_log, {NewRecord#db_player_seven_login.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_seven_login_bin_log, {NewRecord#db_player_seven_login.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_server_data, delete, Record})->
    case ets:lookup(player_server_data_bin_log, Record#db_player_server_data.row_key) of
	    []->
		    ets:insert(player_server_data_bin_log, {Record#db_player_server_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_server_data_bin_log, {Record#db_player_server_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_server_data, insert, NewRecord})->
    case ets:lookup(player_server_data_bin_log, NewRecord#db_player_server_data.row_key) of
        []->
            ets:insert(player_server_data_bin_log, {NewRecord#db_player_server_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_server_data_bin_log, {NewRecord#db_player_server_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_server_data, update, NewRecord, OldRecord})->
    case ets:lookup(player_server_data_bin_log, NewRecord#db_player_server_data.row_key) of
	    []->
		     ets:insert(player_server_data_bin_log, {NewRecord#db_player_server_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_server_data_bin_log, {NewRecord#db_player_server_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_send_gamebar_msg, delete, Record})->
    case ets:lookup(player_send_gamebar_msg_bin_log, Record#db_player_send_gamebar_msg.row_key) of
	    []->
		    ets:insert(player_send_gamebar_msg_bin_log, {Record#db_player_send_gamebar_msg.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_send_gamebar_msg_bin_log, {Record#db_player_send_gamebar_msg.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_send_gamebar_msg, insert, NewRecord})->
    case ets:lookup(player_send_gamebar_msg_bin_log, NewRecord#db_player_send_gamebar_msg.row_key) of
        []->
            ets:insert(player_send_gamebar_msg_bin_log, {NewRecord#db_player_send_gamebar_msg.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_send_gamebar_msg_bin_log, {NewRecord#db_player_send_gamebar_msg.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_send_gamebar_msg, update, NewRecord, OldRecord})->
    case ets:lookup(player_send_gamebar_msg_bin_log, NewRecord#db_player_send_gamebar_msg.row_key) of
	    []->
		     ets:insert(player_send_gamebar_msg_bin_log, {NewRecord#db_player_send_gamebar_msg.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_send_gamebar_msg_bin_log, {NewRecord#db_player_send_gamebar_msg.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_prop, delete, Record})->
    case ets:lookup(player_prop_bin_log, Record#db_player_prop.row_key) of
	    []->
		    ets:insert(player_prop_bin_log, {Record#db_player_prop.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_prop_bin_log, {Record#db_player_prop.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_prop, insert, NewRecord})->
    case ets:lookup(player_prop_bin_log, NewRecord#db_player_prop.row_key) of
        []->
            ets:insert(player_prop_bin_log, {NewRecord#db_player_prop.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_prop_bin_log, {NewRecord#db_player_prop.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_prop, update, NewRecord, OldRecord})->
    case ets:lookup(player_prop_bin_log, NewRecord#db_player_prop.row_key) of
	    []->
		     ets:insert(player_prop_bin_log, {NewRecord#db_player_prop.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_prop_bin_log, {NewRecord#db_player_prop.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_prerogative_card, delete, Record})->
    case ets:lookup(player_prerogative_card_bin_log, Record#db_player_prerogative_card.row_key) of
	    []->
		    ets:insert(player_prerogative_card_bin_log, {Record#db_player_prerogative_card.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_prerogative_card_bin_log, {Record#db_player_prerogative_card.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_prerogative_card, insert, NewRecord})->
    case ets:lookup(player_prerogative_card_bin_log, NewRecord#db_player_prerogative_card.row_key) of
        []->
            ets:insert(player_prerogative_card_bin_log, {NewRecord#db_player_prerogative_card.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_prerogative_card_bin_log, {NewRecord#db_player_prerogative_card.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_prerogative_card, update, NewRecord, OldRecord})->
    case ets:lookup(player_prerogative_card_bin_log, NewRecord#db_player_prerogative_card.row_key) of
	    []->
		     ets:insert(player_prerogative_card_bin_log, {NewRecord#db_player_prerogative_card.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_prerogative_card_bin_log, {NewRecord#db_player_prerogative_card.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_platform_award, delete, Record})->
    case ets:lookup(player_platform_award_bin_log, Record#db_player_platform_award.row_key) of
	    []->
		    ets:insert(player_platform_award_bin_log, {Record#db_player_platform_award.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_platform_award_bin_log, {Record#db_player_platform_award.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_platform_award, insert, NewRecord})->
    case ets:lookup(player_platform_award_bin_log, NewRecord#db_player_platform_award.row_key) of
        []->
            ets:insert(player_platform_award_bin_log, {NewRecord#db_player_platform_award.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_platform_award_bin_log, {NewRecord#db_player_platform_award.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_platform_award, update, NewRecord, OldRecord})->
    case ets:lookup(player_platform_award_bin_log, NewRecord#db_player_platform_award.row_key) of
	    []->
		     ets:insert(player_platform_award_bin_log, {NewRecord#db_player_platform_award.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_platform_award_bin_log, {NewRecord#db_player_platform_award.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_passive_skill, delete, Record})->
    case ets:lookup(player_passive_skill_bin_log, Record#db_player_passive_skill.row_key) of
	    []->
		    ets:insert(player_passive_skill_bin_log, {Record#db_player_passive_skill.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_passive_skill_bin_log, {Record#db_player_passive_skill.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_passive_skill, insert, NewRecord})->
    case ets:lookup(player_passive_skill_bin_log, NewRecord#db_player_passive_skill.row_key) of
        []->
            ets:insert(player_passive_skill_bin_log, {NewRecord#db_player_passive_skill.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_passive_skill_bin_log, {NewRecord#db_player_passive_skill.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_passive_skill, update, NewRecord, OldRecord})->
    case ets:lookup(player_passive_skill_bin_log, NewRecord#db_player_passive_skill.row_key) of
	    []->
		     ets:insert(player_passive_skill_bin_log, {NewRecord#db_player_passive_skill.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_passive_skill_bin_log, {NewRecord#db_player_passive_skill.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_online_info, delete, Record})->
    case ets:lookup(player_online_info_bin_log, Record#db_player_online_info.row_key) of
	    []->
		    ets:insert(player_online_info_bin_log, {Record#db_player_online_info.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_online_info_bin_log, {Record#db_player_online_info.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_online_info, insert, NewRecord})->
    case ets:lookup(player_online_info_bin_log, NewRecord#db_player_online_info.row_key) of
        []->
            ets:insert(player_online_info_bin_log, {NewRecord#db_player_online_info.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_online_info_bin_log, {NewRecord#db_player_online_info.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_online_info, update, NewRecord, OldRecord})->
    case ets:lookup(player_online_info_bin_log, NewRecord#db_player_online_info.row_key) of
	    []->
		     ets:insert(player_online_info_bin_log, {NewRecord#db_player_online_info.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_online_info_bin_log, {NewRecord#db_player_online_info.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_online_award, delete, Record})->
    case ets:lookup(player_online_award_bin_log, Record#db_player_online_award.row_key) of
	    []->
		    ets:insert(player_online_award_bin_log, {Record#db_player_online_award.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_online_award_bin_log, {Record#db_player_online_award.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_online_award, insert, NewRecord})->
    case ets:lookup(player_online_award_bin_log, NewRecord#db_player_online_award.row_key) of
        []->
            ets:insert(player_online_award_bin_log, {NewRecord#db_player_online_award.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_online_award_bin_log, {NewRecord#db_player_online_award.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_online_award, update, NewRecord, OldRecord})->
    case ets:lookup(player_online_award_bin_log, NewRecord#db_player_online_award.row_key) of
	    []->
		     ets:insert(player_online_award_bin_log, {NewRecord#db_player_online_award.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_online_award_bin_log, {NewRecord#db_player_online_award.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_offline_apply, delete, Record})->
    case ets:lookup(player_offline_apply_bin_log, Record#db_player_offline_apply.row_key) of
	    []->
		    ets:insert(player_offline_apply_bin_log, {Record#db_player_offline_apply.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_offline_apply_bin_log, {Record#db_player_offline_apply.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_offline_apply, insert, NewRecord})->
    case ets:lookup(player_offline_apply_bin_log, NewRecord#db_player_offline_apply.row_key) of
        []->
            ets:insert(player_offline_apply_bin_log, {NewRecord#db_player_offline_apply.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_offline_apply_bin_log, {NewRecord#db_player_offline_apply.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_offline_apply, update, NewRecord, OldRecord})->
    case ets:lookup(player_offline_apply_bin_log, NewRecord#db_player_offline_apply.row_key) of
	    []->
		     ets:insert(player_offline_apply_bin_log, {NewRecord#db_player_offline_apply.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_offline_apply_bin_log, {NewRecord#db_player_offline_apply.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_mission_data, delete, Record})->
    case ets:lookup(player_mission_data_bin_log, Record#db_player_mission_data.row_key) of
	    []->
		    ets:insert(player_mission_data_bin_log, {Record#db_player_mission_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_mission_data_bin_log, {Record#db_player_mission_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_mission_data, insert, NewRecord})->
    case ets:lookup(player_mission_data_bin_log, NewRecord#db_player_mission_data.row_key) of
        []->
            ets:insert(player_mission_data_bin_log, {NewRecord#db_player_mission_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_mission_data_bin_log, {NewRecord#db_player_mission_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_mission_data, update, NewRecord, OldRecord})->
    case ets:lookup(player_mission_data_bin_log, NewRecord#db_player_mission_data.row_key) of
	    []->
		     ets:insert(player_mission_data_bin_log, {NewRecord#db_player_mission_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_mission_data_bin_log, {NewRecord#db_player_mission_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_mail, delete, Record})->
    case ets:lookup(player_mail_bin_log, Record#db_player_mail.row_key) of
	    []->
		    ets:insert(player_mail_bin_log, {Record#db_player_mail.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_mail_bin_log, {Record#db_player_mail.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_mail, insert, NewRecord})->
    case ets:lookup(player_mail_bin_log, NewRecord#db_player_mail.row_key) of
        []->
            ets:insert(player_mail_bin_log, {NewRecord#db_player_mail.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_mail_bin_log, {NewRecord#db_player_mail.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_mail, update, NewRecord, OldRecord})->
    case ets:lookup(player_mail_bin_log, NewRecord#db_player_mail.row_key) of
	    []->
		     ets:insert(player_mail_bin_log, {NewRecord#db_player_mail.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_mail_bin_log, {NewRecord#db_player_mail.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_leichong, delete, Record})->
    case ets:lookup(player_leichong_bin_log, Record#db_player_leichong.row_key) of
	    []->
		    ets:insert(player_leichong_bin_log, {Record#db_player_leichong.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_leichong_bin_log, {Record#db_player_leichong.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_leichong, insert, NewRecord})->
    case ets:lookup(player_leichong_bin_log, NewRecord#db_player_leichong.row_key) of
        []->
            ets:insert(player_leichong_bin_log, {NewRecord#db_player_leichong.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_leichong_bin_log, {NewRecord#db_player_leichong.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_leichong, update, NewRecord, OldRecord})->
    case ets:lookup(player_leichong_bin_log, NewRecord#db_player_leichong.row_key) of
	    []->
		     ets:insert(player_leichong_bin_log, {NewRecord#db_player_leichong.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_leichong_bin_log, {NewRecord#db_player_leichong.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_laba_data, delete, Record})->
    case ets:lookup(player_laba_data_bin_log, Record#db_player_laba_data.row_key) of
	    []->
		    ets:insert(player_laba_data_bin_log, {Record#db_player_laba_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_laba_data_bin_log, {Record#db_player_laba_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_laba_data, insert, NewRecord})->
    case ets:lookup(player_laba_data_bin_log, NewRecord#db_player_laba_data.row_key) of
        []->
            ets:insert(player_laba_data_bin_log, {NewRecord#db_player_laba_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_laba_data_bin_log, {NewRecord#db_player_laba_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_laba_data, update, NewRecord, OldRecord})->
    case ets:lookup(player_laba_data_bin_log, NewRecord#db_player_laba_data.row_key) of
	    []->
		     ets:insert(player_laba_data_bin_log, {NewRecord#db_player_laba_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_laba_data_bin_log, {NewRecord#db_player_laba_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_jiangjinchi, delete, Record})->
    case ets:lookup(player_jiangjinchi_bin_log, Record#db_player_jiangjinchi.row_key) of
	    []->
		    ets:insert(player_jiangjinchi_bin_log, {Record#db_player_jiangjinchi.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_jiangjinchi_bin_log, {Record#db_player_jiangjinchi.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_jiangjinchi, insert, NewRecord})->
    case ets:lookup(player_jiangjinchi_bin_log, NewRecord#db_player_jiangjinchi.row_key) of
        []->
            ets:insert(player_jiangjinchi_bin_log, {NewRecord#db_player_jiangjinchi.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_jiangjinchi_bin_log, {NewRecord#db_player_jiangjinchi.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_jiangjinchi, update, NewRecord, OldRecord})->
    case ets:lookup(player_jiangjinchi_bin_log, NewRecord#db_player_jiangjinchi.row_key) of
	    []->
		     ets:insert(player_jiangjinchi_bin_log, {NewRecord#db_player_jiangjinchi.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_jiangjinchi_bin_log, {NewRecord#db_player_jiangjinchi.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_invite_friend_log, delete, Record})->
    case ets:lookup(player_invite_friend_log_bin_log, Record#db_player_invite_friend_log.row_key) of
	    []->
		    ets:insert(player_invite_friend_log_bin_log, {Record#db_player_invite_friend_log.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_invite_friend_log_bin_log, {Record#db_player_invite_friend_log.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_invite_friend_log, insert, NewRecord})->
    case ets:lookup(player_invite_friend_log_bin_log, NewRecord#db_player_invite_friend_log.row_key) of
        []->
            ets:insert(player_invite_friend_log_bin_log, {NewRecord#db_player_invite_friend_log.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_invite_friend_log_bin_log, {NewRecord#db_player_invite_friend_log.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_invite_friend_log, update, NewRecord, OldRecord})->
    case ets:lookup(player_invite_friend_log_bin_log, NewRecord#db_player_invite_friend_log.row_key) of
	    []->
		     ets:insert(player_invite_friend_log_bin_log, {NewRecord#db_player_invite_friend_log.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_invite_friend_log_bin_log, {NewRecord#db_player_invite_friend_log.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_invite_friend, delete, Record})->
    case ets:lookup(player_invite_friend_bin_log, Record#db_player_invite_friend.row_key) of
	    []->
		    ets:insert(player_invite_friend_bin_log, {Record#db_player_invite_friend.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_invite_friend_bin_log, {Record#db_player_invite_friend.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_invite_friend, insert, NewRecord})->
    case ets:lookup(player_invite_friend_bin_log, NewRecord#db_player_invite_friend.row_key) of
        []->
            ets:insert(player_invite_friend_bin_log, {NewRecord#db_player_invite_friend.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_invite_friend_bin_log, {NewRecord#db_player_invite_friend.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_invite_friend, update, NewRecord, OldRecord})->
    case ets:lookup(player_invite_friend_bin_log, NewRecord#db_player_invite_friend.row_key) of
	    []->
		     ets:insert(player_invite_friend_bin_log, {NewRecord#db_player_invite_friend.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_invite_friend_bin_log, {NewRecord#db_player_invite_friend.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_invest_type, delete, Record})->
    case ets:lookup(player_invest_type_bin_log, Record#db_player_invest_type.row_key) of
	    []->
		    ets:insert(player_invest_type_bin_log, {Record#db_player_invest_type.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_invest_type_bin_log, {Record#db_player_invest_type.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_invest_type, insert, NewRecord})->
    case ets:lookup(player_invest_type_bin_log, NewRecord#db_player_invest_type.row_key) of
        []->
            ets:insert(player_invest_type_bin_log, {NewRecord#db_player_invest_type.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_invest_type_bin_log, {NewRecord#db_player_invest_type.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_invest_type, update, NewRecord, OldRecord})->
    case ets:lookup(player_invest_type_bin_log, NewRecord#db_player_invest_type.row_key) of
	    []->
		     ets:insert(player_invest_type_bin_log, {NewRecord#db_player_invest_type.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_invest_type_bin_log, {NewRecord#db_player_invest_type.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_invest, delete, Record})->
    case ets:lookup(player_invest_bin_log, Record#db_player_invest.row_key) of
	    []->
		    ets:insert(player_invest_bin_log, {Record#db_player_invest.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_invest_bin_log, {Record#db_player_invest.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_invest, insert, NewRecord})->
    case ets:lookup(player_invest_bin_log, NewRecord#db_player_invest.row_key) of
        []->
            ets:insert(player_invest_bin_log, {NewRecord#db_player_invest.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_invest_bin_log, {NewRecord#db_player_invest.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_invest, update, NewRecord, OldRecord})->
    case ets:lookup(player_invest_bin_log, NewRecord#db_player_invest.row_key) of
	    []->
		     ets:insert(player_invest_bin_log, {NewRecord#db_player_invest.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_invest_bin_log, {NewRecord#db_player_invest.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_hero_use, delete, Record})->
    case ets:lookup(player_hero_use_bin_log, Record#db_player_hero_use.row_key) of
	    []->
		    ets:insert(player_hero_use_bin_log, {Record#db_player_hero_use.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_hero_use_bin_log, {Record#db_player_hero_use.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_hero_use, insert, NewRecord})->
    case ets:lookup(player_hero_use_bin_log, NewRecord#db_player_hero_use.row_key) of
        []->
            ets:insert(player_hero_use_bin_log, {NewRecord#db_player_hero_use.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_hero_use_bin_log, {NewRecord#db_player_hero_use.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_hero_use, update, NewRecord, OldRecord})->
    case ets:lookup(player_hero_use_bin_log, NewRecord#db_player_hero_use.row_key) of
	    []->
		     ets:insert(player_hero_use_bin_log, {NewRecord#db_player_hero_use.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_hero_use_bin_log, {NewRecord#db_player_hero_use.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_hero_parts, delete, Record})->
    case ets:lookup(player_hero_parts_bin_log, Record#db_player_hero_parts.row_key) of
	    []->
		    ets:insert(player_hero_parts_bin_log, {Record#db_player_hero_parts.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_hero_parts_bin_log, {Record#db_player_hero_parts.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_hero_parts, insert, NewRecord})->
    case ets:lookup(player_hero_parts_bin_log, NewRecord#db_player_hero_parts.row_key) of
        []->
            ets:insert(player_hero_parts_bin_log, {NewRecord#db_player_hero_parts.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_hero_parts_bin_log, {NewRecord#db_player_hero_parts.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_hero_parts, update, NewRecord, OldRecord})->
    case ets:lookup(player_hero_parts_bin_log, NewRecord#db_player_hero_parts.row_key) of
	    []->
		     ets:insert(player_hero_parts_bin_log, {NewRecord#db_player_hero_parts.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_hero_parts_bin_log, {NewRecord#db_player_hero_parts.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_hero, delete, Record})->
    case ets:lookup(player_hero_bin_log, Record#db_player_hero.row_key) of
	    []->
		    ets:insert(player_hero_bin_log, {Record#db_player_hero.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_hero_bin_log, {Record#db_player_hero.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_hero, insert, NewRecord})->
    case ets:lookup(player_hero_bin_log, NewRecord#db_player_hero.row_key) of
        []->
            ets:insert(player_hero_bin_log, {NewRecord#db_player_hero.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_hero_bin_log, {NewRecord#db_player_hero.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_hero, update, NewRecord, OldRecord})->
    case ets:lookup(player_hero_bin_log, NewRecord#db_player_hero.row_key) of
	    []->
		     ets:insert(player_hero_bin_log, {NewRecord#db_player_hero.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_hero_bin_log, {NewRecord#db_player_hero.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_gift_mail_log, delete, Record})->
    case ets:lookup(player_gift_mail_log_bin_log, Record#db_player_gift_mail_log.row_key) of
	    []->
		    ets:insert(player_gift_mail_log_bin_log, {Record#db_player_gift_mail_log.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_gift_mail_log_bin_log, {Record#db_player_gift_mail_log.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_gift_mail_log, insert, NewRecord})->
    case ets:lookup(player_gift_mail_log_bin_log, NewRecord#db_player_gift_mail_log.row_key) of
        []->
            ets:insert(player_gift_mail_log_bin_log, {NewRecord#db_player_gift_mail_log.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_gift_mail_log_bin_log, {NewRecord#db_player_gift_mail_log.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_gift_mail_log, update, NewRecord, OldRecord})->
    case ets:lookup(player_gift_mail_log_bin_log, NewRecord#db_player_gift_mail_log.row_key) of
	    []->
		     ets:insert(player_gift_mail_log_bin_log, {NewRecord#db_player_gift_mail_log.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_gift_mail_log_bin_log, {NewRecord#db_player_gift_mail_log.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_gift_mail, delete, Record})->
    case ets:lookup(player_gift_mail_bin_log, Record#db_player_gift_mail.row_key) of
	    []->
		    ets:insert(player_gift_mail_bin_log, {Record#db_player_gift_mail.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_gift_mail_bin_log, {Record#db_player_gift_mail.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_gift_mail, insert, NewRecord})->
    case ets:lookup(player_gift_mail_bin_log, NewRecord#db_player_gift_mail.row_key) of
        []->
            ets:insert(player_gift_mail_bin_log, {NewRecord#db_player_gift_mail.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_gift_mail_bin_log, {NewRecord#db_player_gift_mail.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_gift_mail, update, NewRecord, OldRecord})->
    case ets:lookup(player_gift_mail_bin_log, NewRecord#db_player_gift_mail.row_key) of
	    []->
		     ets:insert(player_gift_mail_bin_log, {NewRecord#db_player_gift_mail.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_gift_mail_bin_log, {NewRecord#db_player_gift_mail.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_gift_code, delete, Record})->
    case ets:lookup(player_gift_code_bin_log, Record#db_player_gift_code.row_key) of
	    []->
		    ets:insert(player_gift_code_bin_log, {Record#db_player_gift_code.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_gift_code_bin_log, {Record#db_player_gift_code.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_gift_code, insert, NewRecord})->
    case ets:lookup(player_gift_code_bin_log, NewRecord#db_player_gift_code.row_key) of
        []->
            ets:insert(player_gift_code_bin_log, {NewRecord#db_player_gift_code.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_gift_code_bin_log, {NewRecord#db_player_gift_code.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_gift_code, update, NewRecord, OldRecord})->
    case ets:lookup(player_gift_code_bin_log, NewRecord#db_player_gift_code.row_key) of
	    []->
		     ets:insert(player_gift_code_bin_log, {NewRecord#db_player_gift_code.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_gift_code_bin_log, {NewRecord#db_player_gift_code.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_game_data, delete, Record})->
    case ets:lookup(player_game_data_bin_log, Record#db_player_game_data.row_key) of
	    []->
		    ets:insert(player_game_data_bin_log, {Record#db_player_game_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_game_data_bin_log, {Record#db_player_game_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_game_data, insert, NewRecord})->
    case ets:lookup(player_game_data_bin_log, NewRecord#db_player_game_data.row_key) of
        []->
            ets:insert(player_game_data_bin_log, {NewRecord#db_player_game_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_game_data_bin_log, {NewRecord#db_player_game_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_game_data, update, NewRecord, OldRecord})->
    case ets:lookup(player_game_data_bin_log, NewRecord#db_player_game_data.row_key) of
	    []->
		     ets:insert(player_game_data_bin_log, {NewRecord#db_player_game_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_game_data_bin_log, {NewRecord#db_player_game_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_game_config, delete, Record})->
    case ets:lookup(player_game_config_bin_log, Record#db_player_game_config.row_key) of
	    []->
		    ets:insert(player_game_config_bin_log, {Record#db_player_game_config.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_game_config_bin_log, {Record#db_player_game_config.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_game_config, insert, NewRecord})->
    case ets:lookup(player_game_config_bin_log, NewRecord#db_player_game_config.row_key) of
        []->
            ets:insert(player_game_config_bin_log, {NewRecord#db_player_game_config.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_game_config_bin_log, {NewRecord#db_player_game_config.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_game_config, update, NewRecord, OldRecord})->
    case ets:lookup(player_game_config_bin_log, NewRecord#db_player_game_config.row_key) of
	    []->
		     ets:insert(player_game_config_bin_log, {NewRecord#db_player_game_config.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_game_config_bin_log, {NewRecord#db_player_game_config.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_function, delete, Record})->
    case ets:lookup(player_function_bin_log, Record#db_player_function.row_key) of
	    []->
		    ets:insert(player_function_bin_log, {Record#db_player_function.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_function_bin_log, {Record#db_player_function.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_function, insert, NewRecord})->
    case ets:lookup(player_function_bin_log, NewRecord#db_player_function.row_key) of
        []->
            ets:insert(player_function_bin_log, {NewRecord#db_player_function.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_function_bin_log, {NewRecord#db_player_function.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_function, update, NewRecord, OldRecord})->
    case ets:lookup(player_function_bin_log, NewRecord#db_player_function.row_key) of
	    []->
		     ets:insert(player_function_bin_log, {NewRecord#db_player_function.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_function_bin_log, {NewRecord#db_player_function.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_first_charge_day, delete, Record})->
    case ets:lookup(player_first_charge_day_bin_log, Record#db_player_first_charge_day.row_key) of
	    []->
		    ets:insert(player_first_charge_day_bin_log, {Record#db_player_first_charge_day.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_first_charge_day_bin_log, {Record#db_player_first_charge_day.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_first_charge_day, insert, NewRecord})->
    case ets:lookup(player_first_charge_day_bin_log, NewRecord#db_player_first_charge_day.row_key) of
        []->
            ets:insert(player_first_charge_day_bin_log, {NewRecord#db_player_first_charge_day.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_first_charge_day_bin_log, {NewRecord#db_player_first_charge_day.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_first_charge_day, update, NewRecord, OldRecord})->
    case ets:lookup(player_first_charge_day_bin_log, NewRecord#db_player_first_charge_day.row_key) of
	    []->
		     ets:insert(player_first_charge_day_bin_log, {NewRecord#db_player_first_charge_day.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_first_charge_day_bin_log, {NewRecord#db_player_first_charge_day.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_first_charge, delete, Record})->
    case ets:lookup(player_first_charge_bin_log, Record#db_player_first_charge.row_key) of
	    []->
		    ets:insert(player_first_charge_bin_log, {Record#db_player_first_charge.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_first_charge_bin_log, {Record#db_player_first_charge.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_first_charge, insert, NewRecord})->
    case ets:lookup(player_first_charge_bin_log, NewRecord#db_player_first_charge.row_key) of
        []->
            ets:insert(player_first_charge_bin_log, {NewRecord#db_player_first_charge.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_first_charge_bin_log, {NewRecord#db_player_first_charge.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_first_charge, update, NewRecord, OldRecord})->
    case ets:lookup(player_first_charge_bin_log, NewRecord#db_player_first_charge.row_key) of
	    []->
		     ets:insert(player_first_charge_bin_log, {NewRecord#db_player_first_charge.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_first_charge_bin_log, {NewRecord#db_player_first_charge.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_finish_share_task, delete, Record})->
    case ets:lookup(player_finish_share_task_bin_log, Record#db_player_finish_share_task.row_key) of
	    []->
		    ets:insert(player_finish_share_task_bin_log, {Record#db_player_finish_share_task.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_finish_share_task_bin_log, {Record#db_player_finish_share_task.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_finish_share_task, insert, NewRecord})->
    case ets:lookup(player_finish_share_task_bin_log, NewRecord#db_player_finish_share_task.row_key) of
        []->
            ets:insert(player_finish_share_task_bin_log, {NewRecord#db_player_finish_share_task.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_finish_share_task_bin_log, {NewRecord#db_player_finish_share_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_finish_share_task, update, NewRecord, OldRecord})->
    case ets:lookup(player_finish_share_task_bin_log, NewRecord#db_player_finish_share_task.row_key) of
	    []->
		     ets:insert(player_finish_share_task_bin_log, {NewRecord#db_player_finish_share_task.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_finish_share_task_bin_log, {NewRecord#db_player_finish_share_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_fight_adjust, delete, Record})->
    case ets:lookup(player_fight_adjust_bin_log, Record#db_player_fight_adjust.row_key) of
	    []->
		    ets:insert(player_fight_adjust_bin_log, {Record#db_player_fight_adjust.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_fight_adjust_bin_log, {Record#db_player_fight_adjust.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_fight_adjust, insert, NewRecord})->
    case ets:lookup(player_fight_adjust_bin_log, NewRecord#db_player_fight_adjust.row_key) of
        []->
            ets:insert(player_fight_adjust_bin_log, {NewRecord#db_player_fight_adjust.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_fight_adjust_bin_log, {NewRecord#db_player_fight_adjust.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_fight_adjust, update, NewRecord, OldRecord})->
    case ets:lookup(player_fight_adjust_bin_log, NewRecord#db_player_fight_adjust.row_key) of
	    []->
		     ets:insert(player_fight_adjust_bin_log, {NewRecord#db_player_fight_adjust.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_fight_adjust_bin_log, {NewRecord#db_player_fight_adjust.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_everyday_sign, delete, Record})->
    case ets:lookup(player_everyday_sign_bin_log, Record#db_player_everyday_sign.row_key) of
	    []->
		    ets:insert(player_everyday_sign_bin_log, {Record#db_player_everyday_sign.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_everyday_sign_bin_log, {Record#db_player_everyday_sign.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_everyday_sign, insert, NewRecord})->
    case ets:lookup(player_everyday_sign_bin_log, NewRecord#db_player_everyday_sign.row_key) of
        []->
            ets:insert(player_everyday_sign_bin_log, {NewRecord#db_player_everyday_sign.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_everyday_sign_bin_log, {NewRecord#db_player_everyday_sign.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_everyday_sign, update, NewRecord, OldRecord})->
    case ets:lookup(player_everyday_sign_bin_log, NewRecord#db_player_everyday_sign.row_key) of
	    []->
		     ets:insert(player_everyday_sign_bin_log, {NewRecord#db_player_everyday_sign.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_everyday_sign_bin_log, {NewRecord#db_player_everyday_sign.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_everyday_charge, delete, Record})->
    case ets:lookup(player_everyday_charge_bin_log, Record#db_player_everyday_charge.row_key) of
	    []->
		    ets:insert(player_everyday_charge_bin_log, {Record#db_player_everyday_charge.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_everyday_charge_bin_log, {Record#db_player_everyday_charge.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_everyday_charge, insert, NewRecord})->
    case ets:lookup(player_everyday_charge_bin_log, NewRecord#db_player_everyday_charge.row_key) of
        []->
            ets:insert(player_everyday_charge_bin_log, {NewRecord#db_player_everyday_charge.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_everyday_charge_bin_log, {NewRecord#db_player_everyday_charge.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_everyday_charge, update, NewRecord, OldRecord})->
    case ets:lookup(player_everyday_charge_bin_log, NewRecord#db_player_everyday_charge.row_key) of
	    []->
		     ets:insert(player_everyday_charge_bin_log, {NewRecord#db_player_everyday_charge.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_everyday_charge_bin_log, {NewRecord#db_player_everyday_charge.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_data, delete, Record})->
    case ets:lookup(player_data_bin_log, Record#db_player_data.row_key) of
	    []->
		    ets:insert(player_data_bin_log, {Record#db_player_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_data_bin_log, {Record#db_player_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_data, insert, NewRecord})->
    case ets:lookup(player_data_bin_log, NewRecord#db_player_data.row_key) of
        []->
            ets:insert(player_data_bin_log, {NewRecord#db_player_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_data_bin_log, {NewRecord#db_player_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_data, update, NewRecord, OldRecord})->
    case ets:lookup(player_data_bin_log, NewRecord#db_player_data.row_key) of
	    []->
		     ets:insert(player_data_bin_log, {NewRecord#db_player_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_data_bin_log, {NewRecord#db_player_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_daily_task, delete, Record})->
    case ets:lookup(player_daily_task_bin_log, Record#db_player_daily_task.row_key) of
	    []->
		    ets:insert(player_daily_task_bin_log, {Record#db_player_daily_task.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_daily_task_bin_log, {Record#db_player_daily_task.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_daily_task, insert, NewRecord})->
    case ets:lookup(player_daily_task_bin_log, NewRecord#db_player_daily_task.row_key) of
        []->
            ets:insert(player_daily_task_bin_log, {NewRecord#db_player_daily_task.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_daily_task_bin_log, {NewRecord#db_player_daily_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_daily_task, update, NewRecord, OldRecord})->
    case ets:lookup(player_daily_task_bin_log, NewRecord#db_player_daily_task.row_key) of
	    []->
		     ets:insert(player_daily_task_bin_log, {NewRecord#db_player_daily_task.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_daily_task_bin_log, {NewRecord#db_player_daily_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_daily_points, delete, Record})->
    case ets:lookup(player_daily_points_bin_log, Record#db_player_daily_points.row_key) of
	    []->
		    ets:insert(player_daily_points_bin_log, {Record#db_player_daily_points.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_daily_points_bin_log, {Record#db_player_daily_points.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_daily_points, insert, NewRecord})->
    case ets:lookup(player_daily_points_bin_log, NewRecord#db_player_daily_points.row_key) of
        []->
            ets:insert(player_daily_points_bin_log, {NewRecord#db_player_daily_points.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_daily_points_bin_log, {NewRecord#db_player_daily_points.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_daily_points, update, NewRecord, OldRecord})->
    case ets:lookup(player_daily_points_bin_log, NewRecord#db_player_daily_points.row_key) of
	    []->
		     ets:insert(player_daily_points_bin_log, {NewRecord#db_player_daily_points.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_daily_points_bin_log, {NewRecord#db_player_daily_points.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_conditions_data, delete, Record})->
    case ets:lookup(player_conditions_data_bin_log, Record#db_player_conditions_data.row_key) of
	    []->
		    ets:insert(player_conditions_data_bin_log, {Record#db_player_conditions_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_conditions_data_bin_log, {Record#db_player_conditions_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_conditions_data, insert, NewRecord})->
    case ets:lookup(player_conditions_data_bin_log, NewRecord#db_player_conditions_data.row_key) of
        []->
            ets:insert(player_conditions_data_bin_log, {NewRecord#db_player_conditions_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_conditions_data_bin_log, {NewRecord#db_player_conditions_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_conditions_data, update, NewRecord, OldRecord})->
    case ets:lookup(player_conditions_data_bin_log, NewRecord#db_player_conditions_data.row_key) of
	    []->
		     ets:insert(player_conditions_data_bin_log, {NewRecord#db_player_conditions_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_conditions_data_bin_log, {NewRecord#db_player_conditions_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_condition_activity, delete, Record})->
    case ets:lookup(player_condition_activity_bin_log, Record#db_player_condition_activity.row_key) of
	    []->
		    ets:insert(player_condition_activity_bin_log, {Record#db_player_condition_activity.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_condition_activity_bin_log, {Record#db_player_condition_activity.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_condition_activity, insert, NewRecord})->
    case ets:lookup(player_condition_activity_bin_log, NewRecord#db_player_condition_activity.row_key) of
        []->
            ets:insert(player_condition_activity_bin_log, {NewRecord#db_player_condition_activity.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_condition_activity_bin_log, {NewRecord#db_player_condition_activity.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_condition_activity, update, NewRecord, OldRecord})->
    case ets:lookup(player_condition_activity_bin_log, NewRecord#db_player_condition_activity.row_key) of
	    []->
		     ets:insert(player_condition_activity_bin_log, {NewRecord#db_player_condition_activity.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_condition_activity_bin_log, {NewRecord#db_player_condition_activity.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_client_data, delete, Record})->
    case ets:lookup(player_client_data_bin_log, Record#db_player_client_data.row_key) of
	    []->
		    ets:insert(player_client_data_bin_log, {Record#db_player_client_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_client_data_bin_log, {Record#db_player_client_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_client_data, insert, NewRecord})->
    case ets:lookup(player_client_data_bin_log, NewRecord#db_player_client_data.row_key) of
        []->
            ets:insert(player_client_data_bin_log, {NewRecord#db_player_client_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_client_data_bin_log, {NewRecord#db_player_client_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_client_data, update, NewRecord, OldRecord})->
    case ets:lookup(player_client_data_bin_log, NewRecord#db_player_client_data.row_key) of
	    []->
		     ets:insert(player_client_data_bin_log, {NewRecord#db_player_client_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_client_data_bin_log, {NewRecord#db_player_client_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_chat_data, delete, Record})->
    case ets:lookup(player_chat_data_bin_log, Record#db_player_chat_data.row_key) of
	    []->
		    ets:insert(player_chat_data_bin_log, {Record#db_player_chat_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_chat_data_bin_log, {Record#db_player_chat_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_chat_data, insert, NewRecord})->
    case ets:lookup(player_chat_data_bin_log, NewRecord#db_player_chat_data.row_key) of
        []->
            ets:insert(player_chat_data_bin_log, {NewRecord#db_player_chat_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_chat_data_bin_log, {NewRecord#db_player_chat_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_chat_data, update, NewRecord, OldRecord})->
    case ets:lookup(player_chat_data_bin_log, NewRecord#db_player_chat_data.row_key) of
	    []->
		     ets:insert(player_chat_data_bin_log, {NewRecord#db_player_chat_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_chat_data_bin_log, {NewRecord#db_player_chat_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_charge_shop, delete, Record})->
    case ets:lookup(player_charge_shop_bin_log, Record#db_player_charge_shop.row_key) of
	    []->
		    ets:insert(player_charge_shop_bin_log, {Record#db_player_charge_shop.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_charge_shop_bin_log, {Record#db_player_charge_shop.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_charge_shop, insert, NewRecord})->
    case ets:lookup(player_charge_shop_bin_log, NewRecord#db_player_charge_shop.row_key) of
        []->
            ets:insert(player_charge_shop_bin_log, {NewRecord#db_player_charge_shop.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_charge_shop_bin_log, {NewRecord#db_player_charge_shop.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_charge_shop, update, NewRecord, OldRecord})->
    case ets:lookup(player_charge_shop_bin_log, NewRecord#db_player_charge_shop.row_key) of
	    []->
		     ets:insert(player_charge_shop_bin_log, {NewRecord#db_player_charge_shop.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_charge_shop_bin_log, {NewRecord#db_player_charge_shop.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_charge_record, delete, Record})->
    case ets:lookup(player_charge_record_bin_log, Record#db_player_charge_record.row_key) of
	    []->
		    ets:insert(player_charge_record_bin_log, {Record#db_player_charge_record.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_charge_record_bin_log, {Record#db_player_charge_record.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_charge_record, insert, NewRecord})->
    case ets:lookup(player_charge_record_bin_log, NewRecord#db_player_charge_record.row_key) of
        []->
            ets:insert(player_charge_record_bin_log, {NewRecord#db_player_charge_record.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_charge_record_bin_log, {NewRecord#db_player_charge_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_charge_record, update, NewRecord, OldRecord})->
    case ets:lookup(player_charge_record_bin_log, NewRecord#db_player_charge_record.row_key) of
	    []->
		     ets:insert(player_charge_record_bin_log, {NewRecord#db_player_charge_record.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_charge_record_bin_log, {NewRecord#db_player_charge_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_charge_info_record, delete, Record})->
    case ets:lookup(player_charge_info_record_bin_log, Record#db_player_charge_info_record.row_key) of
	    []->
		    ets:insert(player_charge_info_record_bin_log, {Record#db_player_charge_info_record.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_charge_info_record_bin_log, {Record#db_player_charge_info_record.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_charge_info_record, insert, NewRecord})->
    case ets:lookup(player_charge_info_record_bin_log, NewRecord#db_player_charge_info_record.row_key) of
        []->
            ets:insert(player_charge_info_record_bin_log, {NewRecord#db_player_charge_info_record.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_charge_info_record_bin_log, {NewRecord#db_player_charge_info_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_charge_info_record, update, NewRecord, OldRecord})->
    case ets:lookup(player_charge_info_record_bin_log, NewRecord#db_player_charge_info_record.row_key) of
	    []->
		     ets:insert(player_charge_info_record_bin_log, {NewRecord#db_player_charge_info_record.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_charge_info_record_bin_log, {NewRecord#db_player_charge_info_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_charge_activity, delete, Record})->
    case ets:lookup(player_charge_activity_bin_log, Record#db_player_charge_activity.row_key) of
	    []->
		    ets:insert(player_charge_activity_bin_log, {Record#db_player_charge_activity.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_charge_activity_bin_log, {Record#db_player_charge_activity.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_charge_activity, insert, NewRecord})->
    case ets:lookup(player_charge_activity_bin_log, NewRecord#db_player_charge_activity.row_key) of
        []->
            ets:insert(player_charge_activity_bin_log, {NewRecord#db_player_charge_activity.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_charge_activity_bin_log, {NewRecord#db_player_charge_activity.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_charge_activity, update, NewRecord, OldRecord})->
    case ets:lookup(player_charge_activity_bin_log, NewRecord#db_player_charge_activity.row_key) of
	    []->
		     ets:insert(player_charge_activity_bin_log, {NewRecord#db_player_charge_activity.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_charge_activity_bin_log, {NewRecord#db_player_charge_activity.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_card_title, delete, Record})->
    case ets:lookup(player_card_title_bin_log, Record#db_player_card_title.row_key) of
	    []->
		    ets:insert(player_card_title_bin_log, {Record#db_player_card_title.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_card_title_bin_log, {Record#db_player_card_title.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_card_title, insert, NewRecord})->
    case ets:lookup(player_card_title_bin_log, NewRecord#db_player_card_title.row_key) of
        []->
            ets:insert(player_card_title_bin_log, {NewRecord#db_player_card_title.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_card_title_bin_log, {NewRecord#db_player_card_title.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_card_title, update, NewRecord, OldRecord})->
    case ets:lookup(player_card_title_bin_log, NewRecord#db_player_card_title.row_key) of
	    []->
		     ets:insert(player_card_title_bin_log, {NewRecord#db_player_card_title.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_card_title_bin_log, {NewRecord#db_player_card_title.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_card_summon, delete, Record})->
    case ets:lookup(player_card_summon_bin_log, Record#db_player_card_summon.row_key) of
	    []->
		    ets:insert(player_card_summon_bin_log, {Record#db_player_card_summon.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_card_summon_bin_log, {Record#db_player_card_summon.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_card_summon, insert, NewRecord})->
    case ets:lookup(player_card_summon_bin_log, NewRecord#db_player_card_summon.row_key) of
        []->
            ets:insert(player_card_summon_bin_log, {NewRecord#db_player_card_summon.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_card_summon_bin_log, {NewRecord#db_player_card_summon.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_card_summon, update, NewRecord, OldRecord})->
    case ets:lookup(player_card_summon_bin_log, NewRecord#db_player_card_summon.row_key) of
	    []->
		     ets:insert(player_card_summon_bin_log, {NewRecord#db_player_card_summon.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_card_summon_bin_log, {NewRecord#db_player_card_summon.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_card_book, delete, Record})->
    case ets:lookup(player_card_book_bin_log, Record#db_player_card_book.row_key) of
	    []->
		    ets:insert(player_card_book_bin_log, {Record#db_player_card_book.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_card_book_bin_log, {Record#db_player_card_book.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_card_book, insert, NewRecord})->
    case ets:lookup(player_card_book_bin_log, NewRecord#db_player_card_book.row_key) of
        []->
            ets:insert(player_card_book_bin_log, {NewRecord#db_player_card_book.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_card_book_bin_log, {NewRecord#db_player_card_book.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_card_book, update, NewRecord, OldRecord})->
    case ets:lookup(player_card_book_bin_log, NewRecord#db_player_card_book.row_key) of
	    []->
		     ets:insert(player_card_book_bin_log, {NewRecord#db_player_card_book.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_card_book_bin_log, {NewRecord#db_player_card_book.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_card, delete, Record})->
    case ets:lookup(player_card_bin_log, Record#db_player_card.row_key) of
	    []->
		    ets:insert(player_card_bin_log, {Record#db_player_card.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_card_bin_log, {Record#db_player_card.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_card, insert, NewRecord})->
    case ets:lookup(player_card_bin_log, NewRecord#db_player_card.row_key) of
        []->
            ets:insert(player_card_bin_log, {NewRecord#db_player_card.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_card_bin_log, {NewRecord#db_player_card.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_card, update, NewRecord, OldRecord})->
    case ets:lookup(player_card_bin_log, NewRecord#db_player_card.row_key) of
	    []->
		     ets:insert(player_card_bin_log, {NewRecord#db_player_card.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_card_bin_log, {NewRecord#db_player_card.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_bounty_task, delete, Record})->
    case ets:lookup(player_bounty_task_bin_log, Record#db_player_bounty_task.row_key) of
	    []->
		    ets:insert(player_bounty_task_bin_log, {Record#db_player_bounty_task.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_bounty_task_bin_log, {Record#db_player_bounty_task.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_bounty_task, insert, NewRecord})->
    case ets:lookup(player_bounty_task_bin_log, NewRecord#db_player_bounty_task.row_key) of
        []->
            ets:insert(player_bounty_task_bin_log, {NewRecord#db_player_bounty_task.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_bounty_task_bin_log, {NewRecord#db_player_bounty_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_bounty_task, update, NewRecord, OldRecord})->
    case ets:lookup(player_bounty_task_bin_log, NewRecord#db_player_bounty_task.row_key) of
	    []->
		     ets:insert(player_bounty_task_bin_log, {NewRecord#db_player_bounty_task.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_bounty_task_bin_log, {NewRecord#db_player_bounty_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_adjust_rebound, delete, Record})->
    case ets:lookup(player_adjust_rebound_bin_log, Record#db_player_adjust_rebound.row_key) of
	    []->
		    ets:insert(player_adjust_rebound_bin_log, {Record#db_player_adjust_rebound.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_adjust_rebound_bin_log, {Record#db_player_adjust_rebound.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_adjust_rebound, insert, NewRecord})->
    case ets:lookup(player_adjust_rebound_bin_log, NewRecord#db_player_adjust_rebound.row_key) of
        []->
            ets:insert(player_adjust_rebound_bin_log, {NewRecord#db_player_adjust_rebound.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_adjust_rebound_bin_log, {NewRecord#db_player_adjust_rebound.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_adjust_rebound, update, NewRecord, OldRecord})->
    case ets:lookup(player_adjust_rebound_bin_log, NewRecord#db_player_adjust_rebound.row_key) of
	    []->
		     ets:insert(player_adjust_rebound_bin_log, {NewRecord#db_player_adjust_rebound.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_adjust_rebound_bin_log, {NewRecord#db_player_adjust_rebound.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_activity_task, delete, Record})->
    case ets:lookup(player_activity_task_bin_log, Record#db_player_activity_task.row_key) of
	    []->
		    ets:insert(player_activity_task_bin_log, {Record#db_player_activity_task.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_activity_task_bin_log, {Record#db_player_activity_task.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_activity_task, insert, NewRecord})->
    case ets:lookup(player_activity_task_bin_log, NewRecord#db_player_activity_task.row_key) of
        []->
            ets:insert(player_activity_task_bin_log, {NewRecord#db_player_activity_task.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_activity_task_bin_log, {NewRecord#db_player_activity_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_activity_task, update, NewRecord, OldRecord})->
    case ets:lookup(player_activity_task_bin_log, NewRecord#db_player_activity_task.row_key) of
	    []->
		     ets:insert(player_activity_task_bin_log, {NewRecord#db_player_activity_task.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_activity_task_bin_log, {NewRecord#db_player_activity_task.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_activity_info, delete, Record})->
    case ets:lookup(player_activity_info_bin_log, Record#db_player_activity_info.row_key) of
	    []->
		    ets:insert(player_activity_info_bin_log, {Record#db_player_activity_info.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_activity_info_bin_log, {Record#db_player_activity_info.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_activity_info, insert, NewRecord})->
    case ets:lookup(player_activity_info_bin_log, NewRecord#db_player_activity_info.row_key) of
        []->
            ets:insert(player_activity_info_bin_log, {NewRecord#db_player_activity_info.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_activity_info_bin_log, {NewRecord#db_player_activity_info.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_activity_info, update, NewRecord, OldRecord})->
    case ets:lookup(player_activity_info_bin_log, NewRecord#db_player_activity_info.row_key) of
	    []->
		     ets:insert(player_activity_info_bin_log, {NewRecord#db_player_activity_info.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_activity_info_bin_log, {NewRecord#db_player_activity_info.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_activity_game_info, delete, Record})->
    case ets:lookup(player_activity_game_info_bin_log, Record#db_player_activity_game_info.row_key) of
	    []->
		    ets:insert(player_activity_game_info_bin_log, {Record#db_player_activity_game_info.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_activity_game_info_bin_log, {Record#db_player_activity_game_info.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_activity_game_info, insert, NewRecord})->
    case ets:lookup(player_activity_game_info_bin_log, NewRecord#db_player_activity_game_info.row_key) of
        []->
            ets:insert(player_activity_game_info_bin_log, {NewRecord#db_player_activity_game_info.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_activity_game_info_bin_log, {NewRecord#db_player_activity_game_info.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_activity_game_info, update, NewRecord, OldRecord})->
    case ets:lookup(player_activity_game_info_bin_log, NewRecord#db_player_activity_game_info.row_key) of
	    []->
		     ets:insert(player_activity_game_info_bin_log, {NewRecord#db_player_activity_game_info.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_activity_game_info_bin_log, {NewRecord#db_player_activity_game_info.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_activity_game, delete, Record})->
    case ets:lookup(player_activity_game_bin_log, Record#db_player_activity_game.row_key) of
	    []->
		    ets:insert(player_activity_game_bin_log, {Record#db_player_activity_game.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_activity_game_bin_log, {Record#db_player_activity_game.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_activity_game, insert, NewRecord})->
    case ets:lookup(player_activity_game_bin_log, NewRecord#db_player_activity_game.row_key) of
        []->
            ets:insert(player_activity_game_bin_log, {NewRecord#db_player_activity_game.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_activity_game_bin_log, {NewRecord#db_player_activity_game.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_activity_game, update, NewRecord, OldRecord})->
    case ets:lookup(player_activity_game_bin_log, NewRecord#db_player_activity_game.row_key) of
	    []->
		     ets:insert(player_activity_game_bin_log, {NewRecord#db_player_activity_game.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_activity_game_bin_log, {NewRecord#db_player_activity_game.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_activity_condition, delete, Record})->
    case ets:lookup(player_activity_condition_bin_log, Record#db_player_activity_condition.row_key) of
	    []->
		    ets:insert(player_activity_condition_bin_log, {Record#db_player_activity_condition.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_activity_condition_bin_log, {Record#db_player_activity_condition.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_activity_condition, insert, NewRecord})->
    case ets:lookup(player_activity_condition_bin_log, NewRecord#db_player_activity_condition.row_key) of
        []->
            ets:insert(player_activity_condition_bin_log, {NewRecord#db_player_activity_condition.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_activity_condition_bin_log, {NewRecord#db_player_activity_condition.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_activity_condition, update, NewRecord, OldRecord})->
    case ets:lookup(player_activity_condition_bin_log, NewRecord#db_player_activity_condition.row_key) of
	    []->
		     ets:insert(player_activity_condition_bin_log, {NewRecord#db_player_activity_condition.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_activity_condition_bin_log, {NewRecord#db_player_activity_condition.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_achievement, delete, Record})->
    case ets:lookup(player_achievement_bin_log, Record#db_player_achievement.row_key) of
	    []->
		    ets:insert(player_achievement_bin_log, {Record#db_player_achievement.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_achievement_bin_log, {Record#db_player_achievement.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player_achievement, insert, NewRecord})->
    case ets:lookup(player_achievement_bin_log, NewRecord#db_player_achievement.row_key) of
        []->
            ets:insert(player_achievement_bin_log, {NewRecord#db_player_achievement.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_achievement_bin_log, {NewRecord#db_player_achievement.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player_achievement, update, NewRecord, OldRecord})->
    case ets:lookup(player_achievement_bin_log, NewRecord#db_player_achievement.row_key) of
	    []->
		     ets:insert(player_achievement_bin_log, {NewRecord#db_player_achievement.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_achievement_bin_log, {NewRecord#db_player_achievement.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player, delete, Record})->
    case ets:lookup(player_bin_log, Record#db_player.row_key) of
	    []->
		    ets:insert(player_bin_log, {Record#db_player.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(player_bin_log, {Record#db_player.row_key, Current, null})
    end;
save_bin_log({_EtsTable,player, insert, NewRecord})->
    case ets:lookup(player_bin_log, NewRecord#db_player.row_key) of
        []->
            ets:insert(player_bin_log, {NewRecord#db_player.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(player_bin_log, {NewRecord#db_player.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,player, update, NewRecord, OldRecord})->
    case ets:lookup(player_bin_log, NewRecord#db_player.row_key) of
	    []->
		     ets:insert(player_bin_log, {NewRecord#db_player.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(player_bin_log, {NewRecord#db_player.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,one_vs_one_rank_data, delete, Record})->
    case ets:lookup(one_vs_one_rank_data_bin_log, Record#db_one_vs_one_rank_data.row_key) of
	    []->
		    ets:insert(one_vs_one_rank_data_bin_log, {Record#db_one_vs_one_rank_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(one_vs_one_rank_data_bin_log, {Record#db_one_vs_one_rank_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,one_vs_one_rank_data, insert, NewRecord})->
    case ets:lookup(one_vs_one_rank_data_bin_log, NewRecord#db_one_vs_one_rank_data.row_key) of
        []->
            ets:insert(one_vs_one_rank_data_bin_log, {NewRecord#db_one_vs_one_rank_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(one_vs_one_rank_data_bin_log, {NewRecord#db_one_vs_one_rank_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,one_vs_one_rank_data, update, NewRecord, OldRecord})->
    case ets:lookup(one_vs_one_rank_data_bin_log, NewRecord#db_one_vs_one_rank_data.row_key) of
	    []->
		     ets:insert(one_vs_one_rank_data_bin_log, {NewRecord#db_one_vs_one_rank_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(one_vs_one_rank_data_bin_log, {NewRecord#db_one_vs_one_rank_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,oauth_order_log, delete, Record})->
    case ets:lookup(oauth_order_log_bin_log, Record#db_oauth_order_log.row_key) of
	    []->
		    ets:insert(oauth_order_log_bin_log, {Record#db_oauth_order_log.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(oauth_order_log_bin_log, {Record#db_oauth_order_log.row_key, Current, null})
    end;
save_bin_log({_EtsTable,oauth_order_log, insert, NewRecord})->
    case ets:lookup(oauth_order_log_bin_log, NewRecord#db_oauth_order_log.row_key) of
        []->
            ets:insert(oauth_order_log_bin_log, {NewRecord#db_oauth_order_log.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(oauth_order_log_bin_log, {NewRecord#db_oauth_order_log.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,oauth_order_log, update, NewRecord, OldRecord})->
    case ets:lookup(oauth_order_log_bin_log, NewRecord#db_oauth_order_log.row_key) of
	    []->
		     ets:insert(oauth_order_log_bin_log, {NewRecord#db_oauth_order_log.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(oauth_order_log_bin_log, {NewRecord#db_oauth_order_log.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,mission_ranking, delete, Record})->
    case ets:lookup(mission_ranking_bin_log, Record#db_mission_ranking.row_key) of
	    []->
		    ets:insert(mission_ranking_bin_log, {Record#db_mission_ranking.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(mission_ranking_bin_log, {Record#db_mission_ranking.row_key, Current, null})
    end;
save_bin_log({_EtsTable,mission_ranking, insert, NewRecord})->
    case ets:lookup(mission_ranking_bin_log, NewRecord#db_mission_ranking.row_key) of
        []->
            ets:insert(mission_ranking_bin_log, {NewRecord#db_mission_ranking.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(mission_ranking_bin_log, {NewRecord#db_mission_ranking.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,mission_ranking, update, NewRecord, OldRecord})->
    case ets:lookup(mission_ranking_bin_log, NewRecord#db_mission_ranking.row_key) of
	    []->
		     ets:insert(mission_ranking_bin_log, {NewRecord#db_mission_ranking.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(mission_ranking_bin_log, {NewRecord#db_mission_ranking.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,mission_guess_boss, delete, Record})->
    case ets:lookup(mission_guess_boss_bin_log, Record#db_mission_guess_boss.row_key) of
	    []->
		    ets:insert(mission_guess_boss_bin_log, {Record#db_mission_guess_boss.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(mission_guess_boss_bin_log, {Record#db_mission_guess_boss.row_key, Current, null})
    end;
save_bin_log({_EtsTable,mission_guess_boss, insert, NewRecord})->
    case ets:lookup(mission_guess_boss_bin_log, NewRecord#db_mission_guess_boss.row_key) of
        []->
            ets:insert(mission_guess_boss_bin_log, {NewRecord#db_mission_guess_boss.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(mission_guess_boss_bin_log, {NewRecord#db_mission_guess_boss.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,mission_guess_boss, update, NewRecord, OldRecord})->
    case ets:lookup(mission_guess_boss_bin_log, NewRecord#db_mission_guess_boss.row_key) of
	    []->
		     ets:insert(mission_guess_boss_bin_log, {NewRecord#db_mission_guess_boss.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(mission_guess_boss_bin_log, {NewRecord#db_mission_guess_boss.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,match_scene_data, delete, Record})->
    case ets:lookup(match_scene_data_bin_log, Record#db_match_scene_data.row_key) of
	    []->
		    ets:insert(match_scene_data_bin_log, {Record#db_match_scene_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(match_scene_data_bin_log, {Record#db_match_scene_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,match_scene_data, insert, NewRecord})->
    case ets:lookup(match_scene_data_bin_log, NewRecord#db_match_scene_data.row_key) of
        []->
            ets:insert(match_scene_data_bin_log, {NewRecord#db_match_scene_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(match_scene_data_bin_log, {NewRecord#db_match_scene_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,match_scene_data, update, NewRecord, OldRecord})->
    case ets:lookup(match_scene_data_bin_log, NewRecord#db_match_scene_data.row_key) of
	    []->
		     ets:insert(match_scene_data_bin_log, {NewRecord#db_match_scene_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(match_scene_data_bin_log, {NewRecord#db_match_scene_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,login_notice, delete, Record})->
    case ets:lookup(login_notice_bin_log, Record#db_login_notice.row_key) of
	    []->
		    ets:insert(login_notice_bin_log, {Record#db_login_notice.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(login_notice_bin_log, {Record#db_login_notice.row_key, Current, null})
    end;
save_bin_log({_EtsTable,login_notice, insert, NewRecord})->
    case ets:lookup(login_notice_bin_log, NewRecord#db_login_notice.row_key) of
        []->
            ets:insert(login_notice_bin_log, {NewRecord#db_login_notice.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(login_notice_bin_log, {NewRecord#db_login_notice.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,login_notice, update, NewRecord, OldRecord})->
    case ets:lookup(login_notice_bin_log, NewRecord#db_login_notice.row_key) of
	    []->
		     ets:insert(login_notice_bin_log, {NewRecord#db_login_notice.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(login_notice_bin_log, {NewRecord#db_login_notice.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,laba_adjust, delete, Record})->
    case ets:lookup(laba_adjust_bin_log, Record#db_laba_adjust.row_key) of
	    []->
		    ets:insert(laba_adjust_bin_log, {Record#db_laba_adjust.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(laba_adjust_bin_log, {Record#db_laba_adjust.row_key, Current, null})
    end;
save_bin_log({_EtsTable,laba_adjust, insert, NewRecord})->
    case ets:lookup(laba_adjust_bin_log, NewRecord#db_laba_adjust.row_key) of
        []->
            ets:insert(laba_adjust_bin_log, {NewRecord#db_laba_adjust.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(laba_adjust_bin_log, {NewRecord#db_laba_adjust.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,laba_adjust, update, NewRecord, OldRecord})->
    case ets:lookup(laba_adjust_bin_log, NewRecord#db_laba_adjust.row_key) of
	    []->
		     ets:insert(laba_adjust_bin_log, {NewRecord#db_laba_adjust.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(laba_adjust_bin_log, {NewRecord#db_laba_adjust.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,jiangjinchi, delete, Record})->
    case ets:lookup(jiangjinchi_bin_log, Record#db_jiangjinchi.row_key) of
	    []->
		    ets:insert(jiangjinchi_bin_log, {Record#db_jiangjinchi.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(jiangjinchi_bin_log, {Record#db_jiangjinchi.row_key, Current, null})
    end;
save_bin_log({_EtsTable,jiangjinchi, insert, NewRecord})->
    case ets:lookup(jiangjinchi_bin_log, NewRecord#db_jiangjinchi.row_key) of
        []->
            ets:insert(jiangjinchi_bin_log, {NewRecord#db_jiangjinchi.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(jiangjinchi_bin_log, {NewRecord#db_jiangjinchi.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,jiangjinchi, update, NewRecord, OldRecord})->
    case ets:lookup(jiangjinchi_bin_log, NewRecord#db_jiangjinchi.row_key) of
	    []->
		     ets:insert(jiangjinchi_bin_log, {NewRecord#db_jiangjinchi.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(jiangjinchi_bin_log, {NewRecord#db_jiangjinchi.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,gift_code_type, delete, Record})->
    case ets:lookup(gift_code_type_bin_log, Record#db_gift_code_type.row_key) of
	    []->
		    ets:insert(gift_code_type_bin_log, {Record#db_gift_code_type.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(gift_code_type_bin_log, {Record#db_gift_code_type.row_key, Current, null})
    end;
save_bin_log({_EtsTable,gift_code_type, insert, NewRecord})->
    case ets:lookup(gift_code_type_bin_log, NewRecord#db_gift_code_type.row_key) of
        []->
            ets:insert(gift_code_type_bin_log, {NewRecord#db_gift_code_type.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(gift_code_type_bin_log, {NewRecord#db_gift_code_type.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,gift_code_type, update, NewRecord, OldRecord})->
    case ets:lookup(gift_code_type_bin_log, NewRecord#db_gift_code_type.row_key) of
	    []->
		     ets:insert(gift_code_type_bin_log, {NewRecord#db_gift_code_type.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(gift_code_type_bin_log, {NewRecord#db_gift_code_type.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,gift_code, delete, Record})->
    case ets:lookup(gift_code_bin_log, Record#db_gift_code.row_key) of
	    []->
		    ets:insert(gift_code_bin_log, {Record#db_gift_code.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(gift_code_bin_log, {Record#db_gift_code.row_key, Current, null})
    end;
save_bin_log({_EtsTable,gift_code, insert, NewRecord})->
    case ets:lookup(gift_code_bin_log, NewRecord#db_gift_code.row_key) of
        []->
            ets:insert(gift_code_bin_log, {NewRecord#db_gift_code.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(gift_code_bin_log, {NewRecord#db_gift_code.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,gift_code, update, NewRecord, OldRecord})->
    case ets:lookup(gift_code_bin_log, NewRecord#db_gift_code.row_key) of
	    []->
		     ets:insert(gift_code_bin_log, {NewRecord#db_gift_code.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(gift_code_bin_log, {NewRecord#db_gift_code.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,consume_statistics, delete, Record})->
    case ets:lookup(consume_statistics_bin_log, Record#db_consume_statistics.row_key) of
	    []->
		    ets:insert(consume_statistics_bin_log, {Record#db_consume_statistics.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(consume_statistics_bin_log, {Record#db_consume_statistics.row_key, Current, null})
    end;
save_bin_log({_EtsTable,consume_statistics, insert, NewRecord})->
    case ets:lookup(consume_statistics_bin_log, NewRecord#db_consume_statistics.row_key) of
        []->
            ets:insert(consume_statistics_bin_log, {NewRecord#db_consume_statistics.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(consume_statistics_bin_log, {NewRecord#db_consume_statistics.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,consume_statistics, update, NewRecord, OldRecord})->
    case ets:lookup(consume_statistics_bin_log, NewRecord#db_consume_statistics.row_key) of
	    []->
		     ets:insert(consume_statistics_bin_log, {NewRecord#db_consume_statistics.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(consume_statistics_bin_log, {NewRecord#db_consume_statistics.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,client_versin, delete, Record})->
    case ets:lookup(client_versin_bin_log, Record#db_client_versin.row_key) of
	    []->
		    ets:insert(client_versin_bin_log, {Record#db_client_versin.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(client_versin_bin_log, {Record#db_client_versin.row_key, Current, null})
    end;
save_bin_log({_EtsTable,client_versin, insert, NewRecord})->
    case ets:lookup(client_versin_bin_log, NewRecord#db_client_versin.row_key) of
        []->
            ets:insert(client_versin_bin_log, {NewRecord#db_client_versin.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(client_versin_bin_log, {NewRecord#db_client_versin.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,client_versin, update, NewRecord, OldRecord})->
    case ets:lookup(client_versin_bin_log, NewRecord#db_client_versin.row_key) of
	    []->
		     ets:insert(client_versin_bin_log, {NewRecord#db_client_versin.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(client_versin_bin_log, {NewRecord#db_client_versin.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,charge_order_request_record, delete, Record})->
    case ets:lookup(charge_order_request_record_bin_log, Record#db_charge_order_request_record.row_key) of
	    []->
		    ets:insert(charge_order_request_record_bin_log, {Record#db_charge_order_request_record.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(charge_order_request_record_bin_log, {Record#db_charge_order_request_record.row_key, Current, null})
    end;
save_bin_log({_EtsTable,charge_order_request_record, insert, NewRecord})->
    case ets:lookup(charge_order_request_record_bin_log, NewRecord#db_charge_order_request_record.row_key) of
        []->
            ets:insert(charge_order_request_record_bin_log, {NewRecord#db_charge_order_request_record.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(charge_order_request_record_bin_log, {NewRecord#db_charge_order_request_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,charge_order_request_record, update, NewRecord, OldRecord})->
    case ets:lookup(charge_order_request_record_bin_log, NewRecord#db_charge_order_request_record.row_key) of
	    []->
		     ets:insert(charge_order_request_record_bin_log, {NewRecord#db_charge_order_request_record.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(charge_order_request_record_bin_log, {NewRecord#db_charge_order_request_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,charge_ip_white_record, delete, Record})->
    case ets:lookup(charge_ip_white_record_bin_log, Record#db_charge_ip_white_record.row_key) of
	    []->
		    ets:insert(charge_ip_white_record_bin_log, {Record#db_charge_ip_white_record.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(charge_ip_white_record_bin_log, {Record#db_charge_ip_white_record.row_key, Current, null})
    end;
save_bin_log({_EtsTable,charge_ip_white_record, insert, NewRecord})->
    case ets:lookup(charge_ip_white_record_bin_log, NewRecord#db_charge_ip_white_record.row_key) of
        []->
            ets:insert(charge_ip_white_record_bin_log, {NewRecord#db_charge_ip_white_record.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(charge_ip_white_record_bin_log, {NewRecord#db_charge_ip_white_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,charge_ip_white_record, update, NewRecord, OldRecord})->
    case ets:lookup(charge_ip_white_record_bin_log, NewRecord#db_charge_ip_white_record.row_key) of
	    []->
		     ets:insert(charge_ip_white_record_bin_log, {NewRecord#db_charge_ip_white_record.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(charge_ip_white_record_bin_log, {NewRecord#db_charge_ip_white_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,charge_info_record, delete, Record})->
    case ets:lookup(charge_info_record_bin_log, Record#db_charge_info_record.row_key) of
	    []->
		    ets:insert(charge_info_record_bin_log, {Record#db_charge_info_record.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(charge_info_record_bin_log, {Record#db_charge_info_record.row_key, Current, null})
    end;
save_bin_log({_EtsTable,charge_info_record, insert, NewRecord})->
    case ets:lookup(charge_info_record_bin_log, NewRecord#db_charge_info_record.row_key) of
        []->
            ets:insert(charge_info_record_bin_log, {NewRecord#db_charge_info_record.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(charge_info_record_bin_log, {NewRecord#db_charge_info_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,charge_info_record, update, NewRecord, OldRecord})->
    case ets:lookup(charge_info_record_bin_log, NewRecord#db_charge_info_record.row_key) of
	    []->
		     ets:insert(charge_info_record_bin_log, {NewRecord#db_charge_info_record.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(charge_info_record_bin_log, {NewRecord#db_charge_info_record.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,c_server_node, delete, Record})->
    case ets:lookup(c_server_node_bin_log, Record#db_c_server_node.row_key) of
	    []->
		    ets:insert(c_server_node_bin_log, {Record#db_c_server_node.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(c_server_node_bin_log, {Record#db_c_server_node.row_key, Current, null})
    end;
save_bin_log({_EtsTable,c_server_node, insert, NewRecord})->
    case ets:lookup(c_server_node_bin_log, NewRecord#db_c_server_node.row_key) of
        []->
            ets:insert(c_server_node_bin_log, {NewRecord#db_c_server_node.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(c_server_node_bin_log, {NewRecord#db_c_server_node.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,c_server_node, update, NewRecord, OldRecord})->
    case ets:lookup(c_server_node_bin_log, NewRecord#db_c_server_node.row_key) of
	    []->
		     ets:insert(c_server_node_bin_log, {NewRecord#db_c_server_node.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(c_server_node_bin_log, {NewRecord#db_c_server_node.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,c_game_server, delete, Record})->
    case ets:lookup(c_game_server_bin_log, Record#db_c_game_server.row_key) of
	    []->
		    ets:insert(c_game_server_bin_log, {Record#db_c_game_server.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(c_game_server_bin_log, {Record#db_c_game_server.row_key, Current, null})
    end;
save_bin_log({_EtsTable,c_game_server, insert, NewRecord})->
    case ets:lookup(c_game_server_bin_log, NewRecord#db_c_game_server.row_key) of
        []->
            ets:insert(c_game_server_bin_log, {NewRecord#db_c_game_server.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(c_game_server_bin_log, {NewRecord#db_c_game_server.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,c_game_server, update, NewRecord, OldRecord})->
    case ets:lookup(c_game_server_bin_log, NewRecord#db_c_game_server.row_key) of
	    []->
		     ets:insert(c_game_server_bin_log, {NewRecord#db_c_game_server.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(c_game_server_bin_log, {NewRecord#db_c_game_server.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,brave_one, delete, Record})->
    case ets:lookup(brave_one_bin_log, Record#db_brave_one.row_key) of
	    []->
		    ets:insert(brave_one_bin_log, {Record#db_brave_one.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(brave_one_bin_log, {Record#db_brave_one.row_key, Current, null})
    end;
save_bin_log({_EtsTable,brave_one, insert, NewRecord})->
    case ets:lookup(brave_one_bin_log, NewRecord#db_brave_one.row_key) of
        []->
            ets:insert(brave_one_bin_log, {NewRecord#db_brave_one.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(brave_one_bin_log, {NewRecord#db_brave_one.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,brave_one, update, NewRecord, OldRecord})->
    case ets:lookup(brave_one_bin_log, NewRecord#db_brave_one.row_key) of
	    []->
		     ets:insert(brave_one_bin_log, {NewRecord#db_brave_one.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(brave_one_bin_log, {NewRecord#db_brave_one.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,boss_one_on_one, delete, Record})->
    case ets:lookup(boss_one_on_one_bin_log, Record#db_boss_one_on_one.row_key) of
	    []->
		    ets:insert(boss_one_on_one_bin_log, {Record#db_boss_one_on_one.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(boss_one_on_one_bin_log, {Record#db_boss_one_on_one.row_key, Current, null})
    end;
save_bin_log({_EtsTable,boss_one_on_one, insert, NewRecord})->
    case ets:lookup(boss_one_on_one_bin_log, NewRecord#db_boss_one_on_one.row_key) of
        []->
            ets:insert(boss_one_on_one_bin_log, {NewRecord#db_boss_one_on_one.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(boss_one_on_one_bin_log, {NewRecord#db_boss_one_on_one.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,boss_one_on_one, update, NewRecord, OldRecord})->
    case ets:lookup(boss_one_on_one_bin_log, NewRecord#db_boss_one_on_one.row_key) of
	    []->
		     ets:insert(boss_one_on_one_bin_log, {NewRecord#db_boss_one_on_one.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(boss_one_on_one_bin_log, {NewRecord#db_boss_one_on_one.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,activity_info, delete, Record})->
    case ets:lookup(activity_info_bin_log, Record#db_activity_info.row_key) of
	    []->
		    ets:insert(activity_info_bin_log, {Record#db_activity_info.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(activity_info_bin_log, {Record#db_activity_info.row_key, Current, null})
    end;
save_bin_log({_EtsTable,activity_info, insert, NewRecord})->
    case ets:lookup(activity_info_bin_log, NewRecord#db_activity_info.row_key) of
        []->
            ets:insert(activity_info_bin_log, {NewRecord#db_activity_info.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(activity_info_bin_log, {NewRecord#db_activity_info.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,activity_info, update, NewRecord, OldRecord})->
    case ets:lookup(activity_info_bin_log, NewRecord#db_activity_info.row_key) of
	    []->
		     ets:insert(activity_info_bin_log, {NewRecord#db_activity_info.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(activity_info_bin_log, {NewRecord#db_activity_info.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,activity_award, delete, Record})->
    case ets:lookup(activity_award_bin_log, Record#db_activity_award.row_key) of
	    []->
		    ets:insert(activity_award_bin_log, {Record#db_activity_award.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(activity_award_bin_log, {Record#db_activity_award.row_key, Current, null})
    end;
save_bin_log({_EtsTable,activity_award, insert, NewRecord})->
    case ets:lookup(activity_award_bin_log, NewRecord#db_activity_award.row_key) of
        []->
            ets:insert(activity_award_bin_log, {NewRecord#db_activity_award.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(activity_award_bin_log, {NewRecord#db_activity_award.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,activity_award, update, NewRecord, OldRecord})->
    case ets:lookup(activity_award_bin_log, NewRecord#db_activity_award.row_key) of
	    []->
		     ets:insert(activity_award_bin_log, {NewRecord#db_activity_award.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(activity_award_bin_log, {NewRecord#db_activity_award.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,account_share_data, delete, Record})->
    case ets:lookup(account_share_data_bin_log, Record#db_account_share_data.row_key) of
	    []->
		    ets:insert(account_share_data_bin_log, {Record#db_account_share_data.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(account_share_data_bin_log, {Record#db_account_share_data.row_key, Current, null})
    end;
save_bin_log({_EtsTable,account_share_data, insert, NewRecord})->
    case ets:lookup(account_share_data_bin_log, NewRecord#db_account_share_data.row_key) of
        []->
            ets:insert(account_share_data_bin_log, {NewRecord#db_account_share_data.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(account_share_data_bin_log, {NewRecord#db_account_share_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,account_share_data, update, NewRecord, OldRecord})->
    case ets:lookup(account_share_data_bin_log, NewRecord#db_account_share_data.row_key) of
	    []->
		     ets:insert(account_share_data_bin_log, {NewRecord#db_account_share_data.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(account_share_data_bin_log, {NewRecord#db_account_share_data.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,account_charge_white, delete, Record})->
    case ets:lookup(account_charge_white_bin_log, Record#db_account_charge_white.row_key) of
	    []->
		    ets:insert(account_charge_white_bin_log, {Record#db_account_charge_white.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(account_charge_white_bin_log, {Record#db_account_charge_white.row_key, Current, null})
    end;
save_bin_log({_EtsTable,account_charge_white, insert, NewRecord})->
    case ets:lookup(account_charge_white_bin_log, NewRecord#db_account_charge_white.row_key) of
        []->
            ets:insert(account_charge_white_bin_log, {NewRecord#db_account_charge_white.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(account_charge_white_bin_log, {NewRecord#db_account_charge_white.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,account_charge_white, update, NewRecord, OldRecord})->
    case ets:lookup(account_charge_white_bin_log, NewRecord#db_account_charge_white.row_key) of
	    []->
		     ets:insert(account_charge_white_bin_log, {NewRecord#db_account_charge_white.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(account_charge_white_bin_log, {NewRecord#db_account_charge_white.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,account, delete, Record})->
    case ets:lookup(account_bin_log, Record#db_account.row_key) of
	    []->
		    ets:insert(account_bin_log, {Record#db_account.row_key, Record, null});
	    [{_, Current, _Last}] ->
		    ets:insert(account_bin_log, {Record#db_account.row_key, Current, null})
    end;
save_bin_log({_EtsTable,account, insert, NewRecord})->
    case ets:lookup(account_bin_log, NewRecord#db_account.row_key) of
        []->
            ets:insert(account_bin_log, {NewRecord#db_account.row_key, null, NewRecord});
        [{_, Current, null}] ->
            ets:insert(account_bin_log, {NewRecord#db_account.row_key, Current, NewRecord})
    end;
save_bin_log({_EtsTable,account, update, NewRecord, OldRecord})->
    case ets:lookup(account_bin_log, NewRecord#db_account.row_key) of
	    []->
		     ets:insert(account_bin_log, {NewRecord#db_account.row_key, OldRecord, NewRecord});
	    [{_, Current, _Last}] ->
		    ets:insert(account_bin_log, {NewRecord#db_account.row_key, Current, NewRecord})
    end.

tran_to_sql ({_EtsTable,wheel_result_record_accumulate, insert, Record}) ->
    Type = int_to_bin(Record#db_wheel_result_record_accumulate.type),
    UId = int_to_bin(Record#db_wheel_result_record_accumulate.u_id),
    RecordType = int_to_bin(Record#db_wheel_result_record_accumulate.record_type),
    Id = int_to_bin(Record#db_wheel_result_record_accumulate.id),
    Num = int_to_bin(Record#db_wheel_result_record_accumulate.num),
    Time = int_to_bin(Record#db_wheel_result_record_accumulate.time),
    <<
        "INSERT INTO `wheel_result_record_accumulate` SET "
        " `type` = ", Type/binary,
        " ,`u_id` = ", UId/binary,
        " ,`record_type` = ", RecordType/binary,
        " ,`id` = ", Id/binary,
        " ,`num` = ", Num/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, wheel_result_record_accumulate, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, wheel_result_record_accumulate , update, NewRecord, OldRecord, get_changes(8, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, wheel_result_record_accumulate, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, wheel_result_record_accumulate, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(wheel_result_record_accumulate, NewRecord, Changes, [<< "UPDATE `wheel_result_record_accumulate` SET ">>])));
tran_to_sql ({_EtsTable, wheel_result_record_accumulate, delete, Record}) ->
    Type = int_to_bin(Record#db_wheel_result_record_accumulate.type),
    UId = int_to_bin(Record#db_wheel_result_record_accumulate.u_id),
    RecordType = int_to_bin(Record#db_wheel_result_record_accumulate.record_type),
    Id = int_to_bin(Record#db_wheel_result_record_accumulate.id),
    <<
        "DELETE FROM `wheel_result_record_accumulate` WHERE "
        "`type` = ", Type/binary,
        " and `u_id` = ", UId/binary,
        " and `record_type` = ", RecordType/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, wheel_result_record_accumulate, delete_all, _Record}) ->
    <<
        "DELETE FROM `wheel_result_record_accumulate`;\n"
    >>;
tran_to_sql ({_EtsTable,wheel_result_record, insert, Record}) ->
    Type = int_to_bin(Record#db_wheel_result_record.type),
    Id = int_to_bin(Record#db_wheel_result_record.id),
    ResultId = int_to_bin(Record#db_wheel_result_record.result_id),
    Time = int_to_bin(Record#db_wheel_result_record.time),
    <<
        "INSERT INTO `wheel_result_record` SET "
        " `type` = ", Type/binary,
        " ,`id` = ", Id/binary,
        " ,`result_id` = ", ResultId/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, wheel_result_record, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, wheel_result_record , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, wheel_result_record, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, wheel_result_record, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(wheel_result_record, NewRecord, Changes, [<< "UPDATE `wheel_result_record` SET ">>])));
tran_to_sql ({_EtsTable, wheel_result_record, delete, Record}) ->
    Type = int_to_bin(Record#db_wheel_result_record.type),
    Id = int_to_bin(Record#db_wheel_result_record.id),
    <<
        "DELETE FROM `wheel_result_record` WHERE "
        "`type` = ", Type/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, wheel_result_record, delete_all, _Record}) ->
    <<
        "DELETE FROM `wheel_result_record`;\n"
    >>;
tran_to_sql ({_EtsTable,wheel_pool, insert, Record}) ->
    Type = int_to_bin(Record#db_wheel_pool.type),
    Value = int_to_bin(Record#db_wheel_pool.value),
    Id = int_to_bin(Record#db_wheel_pool.id),
    <<
        "INSERT INTO `wheel_pool` SET "
        " `type` = ", Type/binary,
        " ,`value` = ", Value/binary,
        " ,`id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, wheel_pool, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, wheel_pool , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, wheel_pool, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, wheel_pool, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(wheel_pool, NewRecord, Changes, [<< "UPDATE `wheel_pool` SET ">>])));
tran_to_sql ({_EtsTable, wheel_pool, delete, Record}) ->
    Type = int_to_bin(Record#db_wheel_pool.type),
    <<
        "DELETE FROM `wheel_pool` WHERE "
        "`type` = ", Type/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, wheel_pool, delete_all, _Record}) ->
    <<
        "DELETE FROM `wheel_pool`;\n"
    >>;
tran_to_sql ({_EtsTable,wheel_player_bet_record_today, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_wheel_player_bet_record_today.player_id),
    Type = int_to_bin(Record#db_wheel_player_bet_record_today.type),
    Id = int_to_bin(Record#db_wheel_player_bet_record_today.id),
    BetNum = int_to_bin(Record#db_wheel_player_bet_record_today.bet_num),
    AwardNum = int_to_bin(Record#db_wheel_player_bet_record_today.award_num),
    Time = int_to_bin(Record#db_wheel_player_bet_record_today.time),
    <<
        "INSERT INTO `wheel_player_bet_record_today` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`type` = ", Type/binary,
        " ,`id` = ", Id/binary,
        " ,`bet_num` = ", BetNum/binary,
        " ,`award_num` = ", AwardNum/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, wheel_player_bet_record_today, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, wheel_player_bet_record_today , update, NewRecord, OldRecord, get_changes(8, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, wheel_player_bet_record_today, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, wheel_player_bet_record_today, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(wheel_player_bet_record_today, NewRecord, Changes, [<< "UPDATE `wheel_player_bet_record_today` SET ">>])));
tran_to_sql ({_EtsTable, wheel_player_bet_record_today, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_wheel_player_bet_record_today.player_id),
    Type = int_to_bin(Record#db_wheel_player_bet_record_today.type),
    Id = int_to_bin(Record#db_wheel_player_bet_record_today.id),
    <<
        "DELETE FROM `wheel_player_bet_record_today` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `type` = ", Type/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, wheel_player_bet_record_today, delete_all, _Record}) ->
    <<
        "DELETE FROM `wheel_player_bet_record_today`;\n"
    >>;
tran_to_sql ({_EtsTable,wheel_player_bet_record, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_wheel_player_bet_record.player_id),
    Type = int_to_bin(Record#db_wheel_player_bet_record.type),
    Id = int_to_bin(Record#db_wheel_player_bet_record.id),
    BetNum = int_to_bin(Record#db_wheel_player_bet_record.bet_num),
    AwardNum = int_to_bin(Record#db_wheel_player_bet_record.award_num),
    Time = int_to_bin(Record#db_wheel_player_bet_record.time),
    <<
        "INSERT INTO `wheel_player_bet_record` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`type` = ", Type/binary,
        " ,`id` = ", Id/binary,
        " ,`bet_num` = ", BetNum/binary,
        " ,`award_num` = ", AwardNum/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, wheel_player_bet_record, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, wheel_player_bet_record , update, NewRecord, OldRecord, get_changes(8, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, wheel_player_bet_record, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, wheel_player_bet_record, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(wheel_player_bet_record, NewRecord, Changes, [<< "UPDATE `wheel_player_bet_record` SET ">>])));
tran_to_sql ({_EtsTable, wheel_player_bet_record, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_wheel_player_bet_record.player_id),
    Type = int_to_bin(Record#db_wheel_player_bet_record.type),
    Id = int_to_bin(Record#db_wheel_player_bet_record.id),
    <<
        "DELETE FROM `wheel_player_bet_record` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `type` = ", Type/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, wheel_player_bet_record, delete_all, _Record}) ->
    <<
        "DELETE FROM `wheel_player_bet_record`;\n"
    >>;
tran_to_sql ({_EtsTable,unique_id_data, insert, Record}) ->
    Type = int_to_bin(Record#db_unique_id_data.type),
    Id = int_to_bin(Record#db_unique_id_data.id),
    <<
        "INSERT INTO `unique_id_data` SET "
        " `type` = ", Type/binary,
        " ,`id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, unique_id_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, unique_id_data , update, NewRecord, OldRecord, get_changes(4, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, unique_id_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, unique_id_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(unique_id_data, NewRecord, Changes, [<< "UPDATE `unique_id_data` SET ">>])));
tran_to_sql ({_EtsTable, unique_id_data, delete, Record}) ->
    Type = int_to_bin(Record#db_unique_id_data.type),
    <<
        "DELETE FROM `unique_id_data` WHERE "
        "`type` = ", Type/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, unique_id_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `unique_id_data`;\n"
    >>;
tran_to_sql ({_EtsTable,tongxingzheng_month_task, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_tongxingzheng_month_task.player_id),
    TaskList = list_to_bin(Record#db_tongxingzheng_month_task.task_list),
    <<
        "INSERT INTO `tongxingzheng_month_task` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`task_list` = ", TaskList/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, tongxingzheng_month_task, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, tongxingzheng_month_task , update, NewRecord, OldRecord, get_changes(4, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, tongxingzheng_month_task, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, tongxingzheng_month_task, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(tongxingzheng_month_task, NewRecord, Changes, [<< "UPDATE `tongxingzheng_month_task` SET ">>])));
tran_to_sql ({_EtsTable, tongxingzheng_month_task, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_tongxingzheng_month_task.player_id),
    <<
        "DELETE FROM `tongxingzheng_month_task` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, tongxingzheng_month_task, delete_all, _Record}) ->
    <<
        "DELETE FROM `tongxingzheng_month_task`;\n"
    >>;
tran_to_sql ({_EtsTable,tongxingzheng_daily_task, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_tongxingzheng_daily_task.player_id),
    TaskList = list_to_bin(Record#db_tongxingzheng_daily_task.task_list),
    <<
        "INSERT INTO `tongxingzheng_daily_task` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`task_list` = ", TaskList/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, tongxingzheng_daily_task, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, tongxingzheng_daily_task , update, NewRecord, OldRecord, get_changes(4, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, tongxingzheng_daily_task, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, tongxingzheng_daily_task, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(tongxingzheng_daily_task, NewRecord, Changes, [<< "UPDATE `tongxingzheng_daily_task` SET ">>])));
tran_to_sql ({_EtsTable, tongxingzheng_daily_task, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_tongxingzheng_daily_task.player_id),
    <<
        "DELETE FROM `tongxingzheng_daily_task` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, tongxingzheng_daily_task, delete_all, _Record}) ->
    <<
        "DELETE FROM `tongxingzheng_daily_task`;\n"
    >>;
tran_to_sql ({_EtsTable,timer_data, insert, Record}) ->
    TimerId = int_to_bin(Record#db_timer_data.timer_id),
    LastTime = int_to_bin(Record#db_timer_data.last_time),
    <<
        "INSERT INTO `timer_data` SET "
        " `timer_id` = ", TimerId/binary,
        " ,`last_time` = ", LastTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, timer_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, timer_data , update, NewRecord, OldRecord, get_changes(4, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, timer_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, timer_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(timer_data, NewRecord, Changes, [<< "UPDATE `timer_data` SET ">>])));
tran_to_sql ({_EtsTable, timer_data, delete, Record}) ->
    TimerId = int_to_bin(Record#db_timer_data.timer_id),
    <<
        "DELETE FROM `timer_data` WHERE "
        "`timer_id` = ", TimerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, timer_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `timer_data`;\n"
    >>;
tran_to_sql ({_EtsTable,test, insert, Record}) ->
    Id = int_to_bin(Record#db_test.id),
    Num = int_to_bin(Record#db_test.num),
    Str = list_to_bin(Record#db_test.str),
    <<
        "INSERT INTO `test` SET "
        " `id` = ", Id/binary,
        " ,`num` = ", Num/binary,
        " ,`str` = ", Str/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, test, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, test , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, test, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, test, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(test, NewRecord, Changes, [<< "UPDATE `test` SET ">>])));
tran_to_sql ({_EtsTable, test, delete, Record}) ->
    Id = int_to_bin(Record#db_test.id),
    <<
        "DELETE FROM `test` WHERE "
        "`id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, test, delete_all, _Record}) ->
    <<
        "DELETE FROM `test`;\n"
    >>;
tran_to_sql ({_EtsTable,server_state, insert, Record}) ->
    Time = int_to_bin(Record#db_server_state.time),
    CreateCount = int_to_bin(Record#db_server_state.create_count),
    LoginCount = int_to_bin(Record#db_server_state.login_count),
    OnlineCount = int_to_bin(Record#db_server_state.online_count),
    ErrorCount = int_to_bin(Record#db_server_state.error_count),
    DbErrorCount = int_to_bin(Record#db_server_state.db_error_count),
    <<
        "INSERT INTO `server_state` SET "
        " `time` = ", Time/binary,
        " ,`create_count` = ", CreateCount/binary,
        " ,`login_count` = ", LoginCount/binary,
        " ,`online_count` = ", OnlineCount/binary,
        " ,`error_count` = ", ErrorCount/binary,
        " ,`db_error_count` = ", DbErrorCount/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, server_state, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, server_state , update, NewRecord, OldRecord, get_changes(8, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, server_state, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, server_state, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(server_state, NewRecord, Changes, [<< "UPDATE `server_state` SET ">>])));
tran_to_sql ({_EtsTable, server_state, delete, Record}) ->
    Time = int_to_bin(Record#db_server_state.time),
    <<
        "DELETE FROM `server_state` WHERE "
        "`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, server_state, delete_all, _Record}) ->
    <<
        "DELETE FROM `server_state`;\n"
    >>;
tran_to_sql ({_EtsTable,server_player_fight_adjust, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_server_player_fight_adjust.player_id),
    PropId = int_to_bin(Record#db_server_player_fight_adjust.prop_id),
    Id = int_to_bin(Record#db_server_player_fight_adjust.id),
    Times = int_to_bin(Record#db_server_player_fight_adjust.times),
    BottomTimes = int_to_bin(Record#db_server_player_fight_adjust.bottom_times),
    BottomTimesTime = int_to_bin(Record#db_server_player_fight_adjust.bottom_times_time),
    <<
        "INSERT INTO `server_player_fight_adjust` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`prop_id` = ", PropId/binary,
        " ,`id` = ", Id/binary,
        " ,`times` = ", Times/binary,
        " ,`bottom_times` = ", BottomTimes/binary,
        " ,`bottom_times_time` = ", BottomTimesTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, server_player_fight_adjust, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, server_player_fight_adjust , update, NewRecord, OldRecord, get_changes(8, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, server_player_fight_adjust, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, server_player_fight_adjust, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(server_player_fight_adjust, NewRecord, Changes, [<< "UPDATE `server_player_fight_adjust` SET ">>])));
tran_to_sql ({_EtsTable, server_player_fight_adjust, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_server_player_fight_adjust.player_id),
    PropId = int_to_bin(Record#db_server_player_fight_adjust.prop_id),
    <<
        "DELETE FROM `server_player_fight_adjust` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `prop_id` = ", PropId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, server_player_fight_adjust, delete_all, _Record}) ->
    <<
        "DELETE FROM `server_player_fight_adjust`;\n"
    >>;
tran_to_sql ({_EtsTable,server_game_config, insert, Record}) ->
    ConfigId = int_to_bin(Record#db_server_game_config.config_id),
    IntData = int_to_bin(Record#db_server_game_config.int_data),
    StrData = list_to_bin(Record#db_server_game_config.str_data),
    ChangeTime = int_to_bin(Record#db_server_game_config.change_time),
    <<
        "INSERT INTO `server_game_config` SET "
        " `config_id` = ", ConfigId/binary,
        " ,`int_data` = ", IntData/binary,
        " ,`str_data` = ", StrData/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, server_game_config, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, server_game_config , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, server_game_config, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, server_game_config, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(server_game_config, NewRecord, Changes, [<< "UPDATE `server_game_config` SET ">>])));
tran_to_sql ({_EtsTable, server_game_config, delete, Record}) ->
    ConfigId = int_to_bin(Record#db_server_game_config.config_id),
    <<
        "DELETE FROM `server_game_config` WHERE "
        "`config_id` = ", ConfigId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, server_game_config, delete_all, _Record}) ->
    <<
        "DELETE FROM `server_game_config`;\n"
    >>;
tran_to_sql ({_EtsTable,server_fight_adjust, insert, Record}) ->
    PropId = int_to_bin(Record#db_server_fight_adjust.prop_id),
    PoolValue = int_to_bin(Record#db_server_fight_adjust.pool_value),
    Cost = int_to_bin(Record#db_server_fight_adjust.cost),
    Award = int_to_bin(Record#db_server_fight_adjust.award),
    <<
        "INSERT INTO `server_fight_adjust` SET "
        " `prop_id` = ", PropId/binary,
        " ,`pool_value` = ", PoolValue/binary,
        " ,`cost` = ", Cost/binary,
        " ,`award` = ", Award/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, server_fight_adjust, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, server_fight_adjust , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, server_fight_adjust, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, server_fight_adjust, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(server_fight_adjust, NewRecord, Changes, [<< "UPDATE `server_fight_adjust` SET ">>])));
tran_to_sql ({_EtsTable, server_fight_adjust, delete, Record}) ->
    PropId = int_to_bin(Record#db_server_fight_adjust.prop_id),
    <<
        "DELETE FROM `server_fight_adjust` WHERE "
        "`prop_id` = ", PropId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, server_fight_adjust, delete_all, _Record}) ->
    <<
        "DELETE FROM `server_fight_adjust`;\n"
    >>;
tran_to_sql ({_EtsTable,server_data, insert, Record}) ->
    Id = int_to_bin(Record#db_server_data.id),
    Key2 = int_to_bin(Record#db_server_data.key2),
    IntData = int_to_bin(Record#db_server_data.int_data),
    StrData = list_to_bin(Record#db_server_data.str_data),
    ChangeTime = int_to_bin(Record#db_server_data.change_time),
    <<
        "INSERT INTO `server_data` SET "
        " `id` = ", Id/binary,
        " ,`key2` = ", Key2/binary,
        " ,`int_data` = ", IntData/binary,
        " ,`str_data` = ", StrData/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, server_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, server_data , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, server_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, server_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(server_data, NewRecord, Changes, [<< "UPDATE `server_data` SET ">>])));
tran_to_sql ({_EtsTable, server_data, delete, Record}) ->
    Id = int_to_bin(Record#db_server_data.id),
    Key2 = int_to_bin(Record#db_server_data.key2),
    <<
        "DELETE FROM `server_data` WHERE "
        "`id` = ", Id/binary,
        " and `key2` = ", Key2/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, server_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `server_data`;\n"
    >>;
tran_to_sql ({_EtsTable,scene_log, insert, Record}) ->
    SceneId = int_to_bin(Record#db_scene_log.scene_id),
    CostList = list_to_bin(Record#db_scene_log.cost_list),
    AwardList = list_to_bin(Record#db_scene_log.award_list),
    Times = int_to_bin(Record#db_scene_log.times),
    CostTime = int_to_bin(Record#db_scene_log.cost_time),
    <<
        "INSERT INTO `scene_log` SET "
        " `scene_id` = ", SceneId/binary,
        " ,`cost_list` = ", CostList/binary,
        " ,`award_list` = ", AwardList/binary,
        " ,`times` = ", Times/binary,
        " ,`cost_time` = ", CostTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, scene_log, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, scene_log , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, scene_log, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, scene_log, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(scene_log, NewRecord, Changes, [<< "UPDATE `scene_log` SET ">>])));
tran_to_sql ({_EtsTable, scene_log, delete, Record}) ->
    SceneId = int_to_bin(Record#db_scene_log.scene_id),
    <<
        "DELETE FROM `scene_log` WHERE "
        "`scene_id` = ", SceneId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, scene_log, delete_all, _Record}) ->
    <<
        "DELETE FROM `scene_log`;\n"
    >>;
tran_to_sql ({_EtsTable,scene_boss_adjust, insert, Record}) ->
    SceneId = int_to_bin(Record#db_scene_boss_adjust.scene_id),
    PoolValue = int_to_bin(Record#db_scene_boss_adjust.pool_value),
    <<
        "INSERT INTO `scene_boss_adjust` SET "
        " `scene_id` = ", SceneId/binary,
        " ,`pool_value` = ", PoolValue/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, scene_boss_adjust, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, scene_boss_adjust , update, NewRecord, OldRecord, get_changes(4, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, scene_boss_adjust, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, scene_boss_adjust, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(scene_boss_adjust, NewRecord, Changes, [<< "UPDATE `scene_boss_adjust` SET ">>])));
tran_to_sql ({_EtsTable, scene_boss_adjust, delete, Record}) ->
    SceneId = int_to_bin(Record#db_scene_boss_adjust.scene_id),
    <<
        "DELETE FROM `scene_boss_adjust` WHERE "
        "`scene_id` = ", SceneId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, scene_boss_adjust, delete_all, _Record}) ->
    <<
        "DELETE FROM `scene_boss_adjust`;\n"
    >>;
tran_to_sql ({_EtsTable,scene_adjust, insert, Record}) ->
    SceneId = int_to_bin(Record#db_scene_adjust.scene_id),
    PoolValue = int_to_bin(Record#db_scene_adjust.pool_value),
    <<
        "INSERT INTO `scene_adjust` SET "
        " `scene_id` = ", SceneId/binary,
        " ,`pool_value` = ", PoolValue/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, scene_adjust, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, scene_adjust , update, NewRecord, OldRecord, get_changes(4, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, scene_adjust, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, scene_adjust, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(scene_adjust, NewRecord, Changes, [<< "UPDATE `scene_adjust` SET ">>])));
tran_to_sql ({_EtsTable, scene_adjust, delete, Record}) ->
    SceneId = int_to_bin(Record#db_scene_adjust.scene_id),
    <<
        "DELETE FROM `scene_adjust` WHERE "
        "`scene_id` = ", SceneId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, scene_adjust, delete_all, _Record}) ->
    <<
        "DELETE FROM `scene_adjust`;\n"
    >>;
tran_to_sql ({_EtsTable,robot_player_scene_cache, insert, Record}) ->
    Id = int_to_bin(Record#db_robot_player_scene_cache.id),
    PlayerId = int_to_bin(Record#db_robot_player_scene_cache.player_id),
    ServerId = list_to_bin(Record#db_robot_player_scene_cache.server_id),
    Level = int_to_bin(Record#db_robot_player_scene_cache.level),
    ClotheId = int_to_bin(Record#db_robot_player_scene_cache.clothe_id),
    TitleId = int_to_bin(Record#db_robot_player_scene_cache.title_id),
    MagicWeaponId = int_to_bin(Record#db_robot_player_scene_cache.magic_weapon_id),
    WeaponId = int_to_bin(Record#db_robot_player_scene_cache.weapon_id),
    WingsId = int_to_bin(Record#db_robot_player_scene_cache.wings_id),
    ShenLongType = int_to_bin(Record#db_robot_player_scene_cache.shen_long_type),
    <<
        "INSERT INTO `robot_player_scene_cache` SET "
        " `id` = ", Id/binary,
        " ,`player_id` = ", PlayerId/binary,
        " ,`server_id` = ", ServerId/binary,
        " ,`level` = ", Level/binary,
        " ,`clothe_id` = ", ClotheId/binary,
        " ,`title_id` = ", TitleId/binary,
        " ,`magic_weapon_id` = ", MagicWeaponId/binary,
        " ,`weapon_id` = ", WeaponId/binary,
        " ,`wings_id` = ", WingsId/binary,
        " ,`shen_long_type` = ", ShenLongType/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, robot_player_scene_cache, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, robot_player_scene_cache , update, NewRecord, OldRecord, get_changes(12, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, robot_player_scene_cache, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, robot_player_scene_cache, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(robot_player_scene_cache, NewRecord, Changes, [<< "UPDATE `robot_player_scene_cache` SET ">>])));
tran_to_sql ({_EtsTable, robot_player_scene_cache, delete, Record}) ->
    Id = int_to_bin(Record#db_robot_player_scene_cache.id),
    <<
        "DELETE FROM `robot_player_scene_cache` WHERE "
        "`id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, robot_player_scene_cache, delete_all, _Record}) ->
    <<
        "DELETE FROM `robot_player_scene_cache`;\n"
    >>;
tran_to_sql ({_EtsTable,robot_player_data, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_robot_player_data.player_id),
    Nickname = list_to_bin(Record#db_robot_player_data.nickname),
    ServerId = list_to_bin(Record#db_robot_player_data.server_id),
    Sex = int_to_bin(Record#db_robot_player_data.sex),
    <<
        "INSERT INTO `robot_player_data` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`nickname` = ", Nickname/binary,
        " ,`server_id` = ", ServerId/binary,
        " ,`sex` = ", Sex/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, robot_player_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, robot_player_data , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, robot_player_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, robot_player_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(robot_player_data, NewRecord, Changes, [<< "UPDATE `robot_player_data` SET ">>])));
tran_to_sql ({_EtsTable, robot_player_data, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_robot_player_data.player_id),
    <<
        "DELETE FROM `robot_player_data` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, robot_player_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `robot_player_data`;\n"
    >>;
tran_to_sql ({_EtsTable,red_packet_condition, insert, Record}) ->
    Id = int_to_bin(Record#db_red_packet_condition.id),
    Value = int_to_bin(Record#db_red_packet_condition.value),
    ChangeTime = int_to_bin(Record#db_red_packet_condition.change_time),
    <<
        "INSERT INTO `red_packet_condition` SET "
        " `id` = ", Id/binary,
        " ,`value` = ", Value/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, red_packet_condition, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, red_packet_condition , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, red_packet_condition, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, red_packet_condition, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(red_packet_condition, NewRecord, Changes, [<< "UPDATE `red_packet_condition` SET ">>])));
tran_to_sql ({_EtsTable, red_packet_condition, delete, Record}) ->
    Id = int_to_bin(Record#db_red_packet_condition.id),
    <<
        "DELETE FROM `red_packet_condition` WHERE "
        "`id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, red_packet_condition, delete_all, _Record}) ->
    <<
        "DELETE FROM `red_packet_condition`;\n"
    >>;
tran_to_sql ({_EtsTable,rank_info, insert, Record}) ->
    RankId = int_to_bin(Record#db_rank_info.rank_id),
    PlayerId = int_to_bin(Record#db_rank_info.player_id),
    Rank = int_to_bin(Record#db_rank_info.rank),
    OldRank = int_to_bin(Record#db_rank_info.old_rank),
    Value = int_to_bin(Record#db_rank_info.value),
    OldValue = int_to_bin(Record#db_rank_info.old_value),
    ChangeTime = int_to_bin(Record#db_rank_info.change_time),
    <<
        "INSERT INTO `rank_info` SET "
        " `rank_id` = ", RankId/binary,
        " ,`player_id` = ", PlayerId/binary,
        " ,`rank` = ", Rank/binary,
        " ,`old_rank` = ", OldRank/binary,
        " ,`value` = ", Value/binary,
        " ,`old_value` = ", OldValue/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, rank_info, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, rank_info , update, NewRecord, OldRecord, get_changes(9, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, rank_info, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, rank_info, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(rank_info, NewRecord, Changes, [<< "UPDATE `rank_info` SET ">>])));
tran_to_sql ({_EtsTable, rank_info, delete, Record}) ->
    RankId = int_to_bin(Record#db_rank_info.rank_id),
    PlayerId = int_to_bin(Record#db_rank_info.player_id),
    <<
        "DELETE FROM `rank_info` WHERE "
        "`rank_id` = ", RankId/binary,
        " and `player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, rank_info, delete_all, _Record}) ->
    <<
        "DELETE FROM `rank_info`;\n"
    >>;
tran_to_sql ({_EtsTable,promote_record, insert, Record}) ->
    RealId = int_to_bin(Record#db_promote_record.real_id),
    PlatformId = list_to_bin(Record#db_promote_record.platform_id),
    AccId = list_to_bin(Record#db_promote_record.acc_id),
    Id = int_to_bin(Record#db_promote_record.id),
    Param = list_to_bin(Record#db_promote_record.param),
    Time = int_to_bin(Record#db_promote_record.time),
    <<
        "INSERT INTO `promote_record` SET "
        " `real_id` = ", RealId/binary,
        " ,`platform_id` = ", PlatformId/binary,
        " ,`acc_id` = ", AccId/binary,
        " ,`id` = ", Id/binary,
        " ,`param` = ", Param/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, promote_record, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, promote_record , update, NewRecord, OldRecord, get_changes(8, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, promote_record, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, promote_record, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(promote_record, NewRecord, Changes, [<< "UPDATE `promote_record` SET ">>])));
tran_to_sql ({_EtsTable, promote_record, delete, Record}) ->
    RealId = int_to_bin(Record#db_promote_record.real_id),
    <<
        "DELETE FROM `promote_record` WHERE "
        "`real_id` = ", RealId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, promote_record, delete_all, _Record}) ->
    <<
        "DELETE FROM `promote_record`;\n"
    >>;
tran_to_sql ({_EtsTable,promote_info, insert, Record}) ->
    PlatformId = list_to_bin(Record#db_promote_info.platform_id),
    AccId = list_to_bin(Record#db_promote_info.acc_id),
    Level = int_to_bin(Record#db_promote_info.level),
    Number = int_to_bin(Record#db_promote_info.number),
    Mana = int_to_bin(Record#db_promote_info.mana),
    VipExp = int_to_bin(Record#db_promote_info.vip_exp),
    Time = int_to_bin(Record#db_promote_info.time),
    <<
        "INSERT INTO `promote_info` SET "
        " `platform_id` = ", PlatformId/binary,
        " ,`acc_id` = ", AccId/binary,
        " ,`level` = ", Level/binary,
        " ,`number` = ", Number/binary,
        " ,`mana` = ", Mana/binary,
        " ,`vip_exp` = ", VipExp/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, promote_info, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, promote_info , update, NewRecord, OldRecord, get_changes(9, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, promote_info, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, promote_info, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(promote_info, NewRecord, Changes, [<< "UPDATE `promote_info` SET ">>])));
tran_to_sql ({_EtsTable, promote_info, delete, Record}) ->
    PlatformId = list_to_bin(Record#db_promote_info.platform_id),
    AccId = list_to_bin(Record#db_promote_info.acc_id),
    Level = int_to_bin(Record#db_promote_info.level),
    <<
        "DELETE FROM `promote_info` WHERE "
        "`platform_id` = ", PlatformId/binary,
        " and `acc_id` = ", AccId/binary,
        " and `level` = ", Level/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, promote_info, delete_all, _Record}) ->
    <<
        "DELETE FROM `promote_info`;\n"
    >>;
tran_to_sql ({_EtsTable,promote, insert, Record}) ->
    PlatformId = list_to_bin(Record#db_promote.platform_id),
    AccId = list_to_bin(Record#db_promote.acc_id),
    InvitePlayerId = int_to_bin(Record#db_promote.invite_player_id),
    UseTimes = int_to_bin(Record#db_promote.use_times),
    TimesTime = int_to_bin(Record#db_promote.times_time),
    IsRed = int_to_bin(Record#db_promote.is_red),
    <<
        "INSERT INTO `promote` SET "
        " `platform_id` = ", PlatformId/binary,
        " ,`acc_id` = ", AccId/binary,
        " ,`invite_player_id` = ", InvitePlayerId/binary,
        " ,`use_times` = ", UseTimes/binary,
        " ,`times_time` = ", TimesTime/binary,
        " ,`is_red` = ", IsRed/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, promote, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, promote , update, NewRecord, OldRecord, get_changes(8, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, promote, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, promote, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(promote, NewRecord, Changes, [<< "UPDATE `promote` SET ">>])));
tran_to_sql ({_EtsTable, promote, delete, Record}) ->
    PlatformId = list_to_bin(Record#db_promote.platform_id),
    AccId = list_to_bin(Record#db_promote.acc_id),
    <<
        "DELETE FROM `promote` WHERE "
        "`platform_id` = ", PlatformId/binary,
        " and `acc_id` = ", AccId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, promote, delete_all, _Record}) ->
    <<
        "DELETE FROM `promote`;\n"
    >>;
tran_to_sql ({_EtsTable,player_vip_award, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_vip_award.player_id),
    Level = int_to_bin(Record#db_player_vip_award.level),
    State = int_to_bin(Record#db_player_vip_award.state),
    ChangeTime = int_to_bin(Record#db_player_vip_award.change_time),
    <<
        "INSERT INTO `player_vip_award` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`level` = ", Level/binary,
        " ,`state` = ", State/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_vip_award, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_vip_award , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_vip_award, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_vip_award, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_vip_award, NewRecord, Changes, [<< "UPDATE `player_vip_award` SET ">>])));
tran_to_sql ({_EtsTable, player_vip_award, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_vip_award.player_id),
    Level = int_to_bin(Record#db_player_vip_award.level),
    <<
        "DELETE FROM `player_vip_award` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `level` = ", Level/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_vip_award, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_vip_award`;\n"
    >>;
tran_to_sql ({_EtsTable,player_vip, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_vip.player_id),
    Level = int_to_bin(Record#db_player_vip.level),
    Exp = int_to_bin(Record#db_player_vip.exp),
    ChangeTime = int_to_bin(Record#db_player_vip.change_time),
    <<
        "INSERT INTO `player_vip` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`level` = ", Level/binary,
        " ,`exp` = ", Exp/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_vip, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_vip , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_vip, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_vip, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_vip, NewRecord, Changes, [<< "UPDATE `player_vip` SET ">>])));
tran_to_sql ({_EtsTable, player_vip, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_vip.player_id),
    <<
        "DELETE FROM `player_vip` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_vip, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_vip`;\n"
    >>;
tran_to_sql ({_EtsTable,player_title, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_title.player_id),
    TitleId = int_to_bin(Record#db_player_title.title_id),
    TitleLevel = int_to_bin(Record#db_player_title.title_level),
    State = int_to_bin(Record#db_player_title.state),
    CreateTime = int_to_bin(Record#db_player_title.create_time),
    <<
        "INSERT INTO `player_title` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`title_id` = ", TitleId/binary,
        " ,`title_level` = ", TitleLevel/binary,
        " ,`state` = ", State/binary,
        " ,`create_time` = ", CreateTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_title, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_title , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_title, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_title, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_title, NewRecord, Changes, [<< "UPDATE `player_title` SET ">>])));
tran_to_sql ({_EtsTable, player_title, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_title.player_id),
    TitleId = int_to_bin(Record#db_player_title.title_id),
    <<
        "DELETE FROM `player_title` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `title_id` = ", TitleId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_title, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_title`;\n"
    >>;
tran_to_sql ({_EtsTable,player_times_data, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_times_data.player_id),
    TimesId = int_to_bin(Record#db_player_times_data.times_id),
    UseTimes = int_to_bin(Record#db_player_times_data.use_times),
    LeftTimes = int_to_bin(Record#db_player_times_data.left_times),
    BuyTimes = int_to_bin(Record#db_player_times_data.buy_times),
    UpdateTime = int_to_bin(Record#db_player_times_data.update_time),
    LastRecoverTime = int_to_bin(Record#db_player_times_data.last_recover_time),
    <<
        "INSERT INTO `player_times_data` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`times_id` = ", TimesId/binary,
        " ,`use_times` = ", UseTimes/binary,
        " ,`left_times` = ", LeftTimes/binary,
        " ,`buy_times` = ", BuyTimes/binary,
        " ,`update_time` = ", UpdateTime/binary,
        " ,`last_recover_time` = ", LastRecoverTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_times_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_times_data , update, NewRecord, OldRecord, get_changes(9, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_times_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_times_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_times_data, NewRecord, Changes, [<< "UPDATE `player_times_data` SET ">>])));
tran_to_sql ({_EtsTable, player_times_data, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_times_data.player_id),
    TimesId = int_to_bin(Record#db_player_times_data.times_id),
    <<
        "DELETE FROM `player_times_data` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `times_id` = ", TimesId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_times_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_times_data`;\n"
    >>;
tran_to_sql ({_EtsTable,player_task_share_award, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_task_share_award.player_id),
    TaskId = int_to_bin(Record#db_player_task_share_award.task_id),
    Type = int_to_bin(Record#db_player_task_share_award.type),
    ChangeTime = int_to_bin(Record#db_player_task_share_award.change_time),
    <<
        "INSERT INTO `player_task_share_award` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`task_id` = ", TaskId/binary,
        " ,`type` = ", Type/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_task_share_award, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_task_share_award , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_task_share_award, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_task_share_award, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_task_share_award, NewRecord, Changes, [<< "UPDATE `player_task_share_award` SET ">>])));
tran_to_sql ({_EtsTable, player_task_share_award, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_task_share_award.player_id),
    TaskId = int_to_bin(Record#db_player_task_share_award.task_id),
    <<
        "DELETE FROM `player_task_share_award` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `task_id` = ", TaskId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_task_share_award, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_task_share_award`;\n"
    >>;
tran_to_sql ({_EtsTable,player_task, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_task.player_id),
    TaskId = int_to_bin(Record#db_player_task.task_id),
    Status = int_to_bin(Record#db_player_task.status),
    Num = int_to_bin(Record#db_player_task.num),
    UpdateTime = int_to_bin(Record#db_player_task.update_time),
    <<
        "INSERT INTO `player_task` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`task_id` = ", TaskId/binary,
        " ,`status` = ", Status/binary,
        " ,`num` = ", Num/binary,
        " ,`update_time` = ", UpdateTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_task, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_task , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_task, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_task, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_task, NewRecord, Changes, [<< "UPDATE `player_task` SET ">>])));
tran_to_sql ({_EtsTable, player_task, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_task.player_id),
    <<
        "DELETE FROM `player_task` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_task, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_task`;\n"
    >>;
tran_to_sql ({_EtsTable,player_sys_common, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_sys_common.player_id),
    Id = int_to_bin(Record#db_player_sys_common.id),
    State = int_to_bin(Record#db_player_sys_common.state),
    <<
        "INSERT INTO `player_sys_common` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`id` = ", Id/binary,
        " ,`state` = ", State/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_sys_common, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_sys_common , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_sys_common, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_sys_common, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_sys_common, NewRecord, Changes, [<< "UPDATE `player_sys_common` SET ">>])));
tran_to_sql ({_EtsTable, player_sys_common, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_sys_common.player_id),
    Id = int_to_bin(Record#db_player_sys_common.id),
    <<
        "DELETE FROM `player_sys_common` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_sys_common, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_sys_common`;\n"
    >>;
tran_to_sql ({_EtsTable,player_sys_attr, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_sys_attr.player_id),
    FunId = int_to_bin(Record#db_player_sys_attr.fun_id),
    Power = int_to_bin(Record#db_player_sys_attr.power),
    Hp = int_to_bin(Record#db_player_sys_attr.hp),
    Attack = int_to_bin(Record#db_player_sys_attr.attack),
    Defense = int_to_bin(Record#db_player_sys_attr.defense),
    Hit = int_to_bin(Record#db_player_sys_attr.hit),
    Dodge = int_to_bin(Record#db_player_sys_attr.dodge),
    Critical = int_to_bin(Record#db_player_sys_attr.critical),
    Tenacity = int_to_bin(Record#db_player_sys_attr.tenacity),
    Speed = int_to_bin(Record#db_player_sys_attr.speed),
    CritTime = int_to_bin(Record#db_player_sys_attr.crit_time),
    HurtAdd = int_to_bin(Record#db_player_sys_attr.hurt_add),
    HurtReduce = int_to_bin(Record#db_player_sys_attr.hurt_reduce),
    CritHurtAdd = int_to_bin(Record#db_player_sys_attr.crit_hurt_add),
    CritHurtReduce = int_to_bin(Record#db_player_sys_attr.crit_hurt_reduce),
    HpReflex = int_to_bin(Record#db_player_sys_attr.hp_reflex),
    RateResistBlock = int_to_bin(Record#db_player_sys_attr.rate_resist_block),
    RateBlock = int_to_bin(Record#db_player_sys_attr.rate_block),
    ChangeTime = int_to_bin(Record#db_player_sys_attr.change_time),
    <<
        "INSERT INTO `player_sys_attr` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`fun_id` = ", FunId/binary,
        " ,`power` = ", Power/binary,
        " ,`hp` = ", Hp/binary,
        " ,`attack` = ", Attack/binary,
        " ,`defense` = ", Defense/binary,
        " ,`hit` = ", Hit/binary,
        " ,`dodge` = ", Dodge/binary,
        " ,`critical` = ", Critical/binary,
        " ,`tenacity` = ", Tenacity/binary,
        " ,`speed` = ", Speed/binary,
        " ,`crit_time` = ", CritTime/binary,
        " ,`hurt_add` = ", HurtAdd/binary,
        " ,`hurt_reduce` = ", HurtReduce/binary,
        " ,`crit_hurt_add` = ", CritHurtAdd/binary,
        " ,`crit_hurt_reduce` = ", CritHurtReduce/binary,
        " ,`hp_reflex` = ", HpReflex/binary,
        " ,`rate_resist_block` = ", RateResistBlock/binary,
        " ,`rate_block` = ", RateBlock/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_sys_attr, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_sys_attr , update, NewRecord, OldRecord, get_changes(22, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_sys_attr, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_sys_attr, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_sys_attr, NewRecord, Changes, [<< "UPDATE `player_sys_attr` SET ">>])));
tran_to_sql ({_EtsTable, player_sys_attr, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_sys_attr.player_id),
    FunId = int_to_bin(Record#db_player_sys_attr.fun_id),
    <<
        "DELETE FROM `player_sys_attr` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `fun_id` = ", FunId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_sys_attr, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_sys_attr`;\n"
    >>;
tran_to_sql ({_EtsTable,player_special_prop, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_special_prop.player_id),
    PropObjId = int_to_bin(Record#db_player_special_prop.prop_obj_id),
    PropId = int_to_bin(Record#db_player_special_prop.prop_id),
    ExpireTime = int_to_bin(Record#db_player_special_prop.expire_time),
    <<
        "INSERT INTO `player_special_prop` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`prop_obj_id` = ", PropObjId/binary,
        " ,`prop_id` = ", PropId/binary,
        " ,`expire_time` = ", ExpireTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_special_prop, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_special_prop , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_special_prop, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_special_prop, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_special_prop, NewRecord, Changes, [<< "UPDATE `player_special_prop` SET ">>])));
tran_to_sql ({_EtsTable, player_special_prop, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_special_prop.player_id),
    PropObjId = int_to_bin(Record#db_player_special_prop.prop_obj_id),
    <<
        "DELETE FROM `player_special_prop` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `prop_obj_id` = ", PropObjId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_special_prop, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_special_prop`;\n"
    >>;
tran_to_sql ({_EtsTable,player_shop, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_shop.player_id),
    Id = int_to_bin(Record#db_player_shop.id),
    LimitType = int_to_bin(Record#db_player_shop.limit_type),
    BuyCount = int_to_bin(Record#db_player_shop.buy_count),
    AwardState = int_to_bin(Record#db_player_shop.award_state),
    ChangeTime = int_to_bin(Record#db_player_shop.change_time),
    <<
        "INSERT INTO `player_shop` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`id` = ", Id/binary,
        " ,`limit_type` = ", LimitType/binary,
        " ,`buy_count` = ", BuyCount/binary,
        " ,`award_state` = ", AwardState/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_shop, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_shop , update, NewRecord, OldRecord, get_changes(8, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_shop, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_shop, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_shop, NewRecord, Changes, [<< "UPDATE `player_shop` SET ">>])));
tran_to_sql ({_EtsTable, player_shop, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_shop.player_id),
    Id = int_to_bin(Record#db_player_shop.id),
    <<
        "DELETE FROM `player_shop` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_shop, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_shop`;\n"
    >>;
tran_to_sql ({_EtsTable,player_shen_long, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_shen_long.player_id),
    Type = int_to_bin(Record#db_player_shen_long.type),
    Time = int_to_bin(Record#db_player_shen_long.time),
    <<
        "INSERT INTO `player_shen_long` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`type` = ", Type/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_shen_long, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_shen_long , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_shen_long, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_shen_long, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_shen_long, NewRecord, Changes, [<< "UPDATE `player_shen_long` SET ">>])));
tran_to_sql ({_EtsTable, player_shen_long, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_shen_long.player_id),
    <<
        "DELETE FROM `player_shen_long` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_shen_long, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_shen_long`;\n"
    >>;
tran_to_sql ({_EtsTable,player_share_task_award, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_share_task_award.player_id),
    TaskType = int_to_bin(Record#db_player_share_task_award.task_type),
    TaskId = int_to_bin(Record#db_player_share_task_award.task_id),
    State = int_to_bin(Record#db_player_share_task_award.state),
    <<
        "INSERT INTO `player_share_task_award` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`task_type` = ", TaskType/binary,
        " ,`task_id` = ", TaskId/binary,
        " ,`state` = ", State/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_share_task_award, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_share_task_award , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_share_task_award, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_share_task_award, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_share_task_award, NewRecord, Changes, [<< "UPDATE `player_share_task_award` SET ">>])));
tran_to_sql ({_EtsTable, player_share_task_award, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_share_task_award.player_id),
    TaskType = int_to_bin(Record#db_player_share_task_award.task_type),
    TaskId = int_to_bin(Record#db_player_share_task_award.task_id),
    <<
        "DELETE FROM `player_share_task_award` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `task_type` = ", TaskType/binary,
        " and `task_id` = ", TaskId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_share_task_award, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_share_task_award`;\n"
    >>;
tran_to_sql ({_EtsTable,player_share_task, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_share_task.player_id),
    TaskType = int_to_bin(Record#db_player_share_task.task_type),
    Value = int_to_bin(Record#db_player_share_task.value),
    State = int_to_bin(Record#db_player_share_task.state),
    <<
        "INSERT INTO `player_share_task` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`task_type` = ", TaskType/binary,
        " ,`value` = ", Value/binary,
        " ,`state` = ", State/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_share_task, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_share_task , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_share_task, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_share_task, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_share_task, NewRecord, Changes, [<< "UPDATE `player_share_task` SET ">>])));
tran_to_sql ({_EtsTable, player_share_task, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_share_task.player_id),
    TaskType = int_to_bin(Record#db_player_share_task.task_type),
    <<
        "DELETE FROM `player_share_task` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `task_type` = ", TaskType/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_share_task, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_share_task`;\n"
    >>;
tran_to_sql ({_EtsTable,player_share_friend, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_share_friend.player_id),
    Id = int_to_bin(Record#db_player_share_friend.id),
    State = int_to_bin(Record#db_player_share_friend.state),
    ChangeTime = int_to_bin(Record#db_player_share_friend.change_time),
    <<
        "INSERT INTO `player_share_friend` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`id` = ", Id/binary,
        " ,`state` = ", State/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_share_friend, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_share_friend , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_share_friend, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_share_friend, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_share_friend, NewRecord, Changes, [<< "UPDATE `player_share_friend` SET ">>])));
tran_to_sql ({_EtsTable, player_share_friend, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_share_friend.player_id),
    Id = int_to_bin(Record#db_player_share_friend.id),
    <<
        "DELETE FROM `player_share_friend` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_share_friend, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_share_friend`;\n"
    >>;
tran_to_sql ({_EtsTable,player_share, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_share.player_id),
    Count = int_to_bin(Record#db_player_share.count),
    ChangeTime = int_to_bin(Record#db_player_share.change_time),
    <<
        "INSERT INTO `player_share` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`count` = ", Count/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_share, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_share , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_share, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_share, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_share, NewRecord, Changes, [<< "UPDATE `player_share` SET ">>])));
tran_to_sql ({_EtsTable, player_share, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_share.player_id),
    <<
        "DELETE FROM `player_share` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_share, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_share`;\n"
    >>;
tran_to_sql ({_EtsTable,player_seven_login, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_seven_login.player_id),
    GiveAwardValue = int_to_bin(Record#db_player_seven_login.give_award_value),
    <<
        "INSERT INTO `player_seven_login` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`give_award_value` = ", GiveAwardValue/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_seven_login, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_seven_login , update, NewRecord, OldRecord, get_changes(4, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_seven_login, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_seven_login, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_seven_login, NewRecord, Changes, [<< "UPDATE `player_seven_login` SET ">>])));
tran_to_sql ({_EtsTable, player_seven_login, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_seven_login.player_id),
    <<
        "DELETE FROM `player_seven_login` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_seven_login, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_seven_login`;\n"
    >>;
tran_to_sql ({_EtsTable,player_server_data, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_server_data.player_id),
    PlatformId = list_to_bin(Record#db_player_server_data.platform_id),
    ServerId = list_to_bin(Record#db_player_server_data.server_id),
    <<
        "INSERT INTO `player_server_data` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`platform_id` = ", PlatformId/binary,
        " ,`server_id` = ", ServerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_server_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_server_data , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_server_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_server_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_server_data, NewRecord, Changes, [<< "UPDATE `player_server_data` SET ">>])));
tran_to_sql ({_EtsTable, player_server_data, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_server_data.player_id),
    <<
        "DELETE FROM `player_server_data` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_server_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_server_data`;\n"
    >>;
tran_to_sql ({_EtsTable,player_send_gamebar_msg, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_send_gamebar_msg.player_id),
    MsgType = int_to_bin(Record#db_player_send_gamebar_msg.msg_type),
    MsgId = int_to_bin(Record#db_player_send_gamebar_msg.msg_id),
    ChangeTime = int_to_bin(Record#db_player_send_gamebar_msg.change_time),
    <<
        "INSERT INTO `player_send_gamebar_msg` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`msg_type` = ", MsgType/binary,
        " ,`msg_id` = ", MsgId/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_send_gamebar_msg, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_send_gamebar_msg , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_send_gamebar_msg, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_send_gamebar_msg, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_send_gamebar_msg, NewRecord, Changes, [<< "UPDATE `player_send_gamebar_msg` SET ">>])));
tran_to_sql ({_EtsTable, player_send_gamebar_msg, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_send_gamebar_msg.player_id),
    MsgType = int_to_bin(Record#db_player_send_gamebar_msg.msg_type),
    <<
        "DELETE FROM `player_send_gamebar_msg` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `msg_type` = ", MsgType/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_send_gamebar_msg, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_send_gamebar_msg`;\n"
    >>;
tran_to_sql({player_prop_log , insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_prop_log.player_id),
    PropId = int_to_bin(Record#db_player_prop_log.prop_id),
    OpType = int_to_bin(Record#db_player_prop_log.op_type),
    OpTime = int_to_bin(Record#db_player_prop_log.op_time),
    ChangeValue = int_to_bin(Record#db_player_prop_log.change_value),
    NewValue = int_to_bin(Record#db_player_prop_log.new_value),
    <<
        "INSERT INTO `player_prop_log` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`prop_id` = ", PropId/binary,
        " ,`op_type` = ", OpType/binary,
        " ,`op_time` = ", OpTime/binary,
        " ,`change_value` = ", ChangeValue/binary,
        " ,`new_value` = ", NewValue/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable,player_prop, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_prop.player_id),
    PropId = int_to_bin(Record#db_player_prop.prop_id),
    Num = int_to_bin(Record#db_player_prop.num),
    ExpireTime = int_to_bin(Record#db_player_prop.expire_time),
    <<
        "INSERT INTO `player_prop` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`prop_id` = ", PropId/binary,
        " ,`num` = ", Num/binary,
        " ,`expire_time` = ", ExpireTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_prop, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_prop , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_prop, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_prop, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_prop, NewRecord, Changes, [<< "UPDATE `player_prop` SET ">>])));
tran_to_sql ({_EtsTable, player_prop, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_prop.player_id),
    PropId = int_to_bin(Record#db_player_prop.prop_id),
    <<
        "DELETE FROM `player_prop` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `prop_id` = ", PropId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_prop, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_prop`;\n"
    >>;
tran_to_sql ({_EtsTable,player_prerogative_card, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_prerogative_card.player_id),
    Type = int_to_bin(Record#db_player_prerogative_card.type),
    State = int_to_bin(Record#db_player_prerogative_card.state),
    ChangeTime = int_to_bin(Record#db_player_prerogative_card.change_time),
    <<
        "INSERT INTO `player_prerogative_card` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`type` = ", Type/binary,
        " ,`state` = ", State/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_prerogative_card, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_prerogative_card , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_prerogative_card, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_prerogative_card, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_prerogative_card, NewRecord, Changes, [<< "UPDATE `player_prerogative_card` SET ">>])));
tran_to_sql ({_EtsTable, player_prerogative_card, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_prerogative_card.player_id),
    Type = int_to_bin(Record#db_player_prerogative_card.type),
    <<
        "DELETE FROM `player_prerogative_card` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `type` = ", Type/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_prerogative_card, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_prerogative_card`;\n"
    >>;
tran_to_sql ({_EtsTable,player_platform_award, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_platform_award.player_id),
    Id = int_to_bin(Record#db_player_platform_award.id),
    State = int_to_bin(Record#db_player_platform_award.state),
    ChangeTime = int_to_bin(Record#db_player_platform_award.change_time),
    <<
        "INSERT INTO `player_platform_award` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`id` = ", Id/binary,
        " ,`state` = ", State/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_platform_award, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_platform_award , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_platform_award, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_platform_award, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_platform_award, NewRecord, Changes, [<< "UPDATE `player_platform_award` SET ">>])));
tran_to_sql ({_EtsTable, player_platform_award, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_platform_award.player_id),
    Id = int_to_bin(Record#db_player_platform_award.id),
    <<
        "DELETE FROM `player_platform_award` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_platform_award, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_platform_award`;\n"
    >>;
tran_to_sql ({_EtsTable,player_passive_skill, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_passive_skill.player_id),
    PassiveSkillId = int_to_bin(Record#db_player_passive_skill.passive_skill_id),
    Level = int_to_bin(Record#db_player_passive_skill.level),
    IsEquip = int_to_bin(Record#db_player_passive_skill.is_equip),
    LastTime = int_to_bin(Record#db_player_passive_skill.last_time),
    <<
        "INSERT INTO `player_passive_skill` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`passive_skill_id` = ", PassiveSkillId/binary,
        " ,`level` = ", Level/binary,
        " ,`is_equip` = ", IsEquip/binary,
        " ,`last_time` = ", LastTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_passive_skill, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_passive_skill , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_passive_skill, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_passive_skill, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_passive_skill, NewRecord, Changes, [<< "UPDATE `player_passive_skill` SET ">>])));
tran_to_sql ({_EtsTable, player_passive_skill, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_passive_skill.player_id),
    PassiveSkillId = int_to_bin(Record#db_player_passive_skill.passive_skill_id),
    <<
        "DELETE FROM `player_passive_skill` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `passive_skill_id` = ", PassiveSkillId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_passive_skill, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_passive_skill`;\n"
    >>;
tran_to_sql({player_online_log , insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_online_log.player_id),
    LoginTime = int_to_bin(Record#db_player_online_log.login_time),
    OfflineTime = int_to_bin(Record#db_player_online_log.offline_time),
    OnlineTime = int_to_bin(Record#db_player_online_log.online_time),
    <<
        "INSERT INTO `player_online_log` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`login_time` = ", LoginTime/binary,
        " ,`offline_time` = ", OfflineTime/binary,
        " ,`online_time` = ", OnlineTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable,player_online_info, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_online_info.player_id),
    TotalHoursOnlineToday = int_to_bin(Record#db_player_online_info.total_hours_online_today),
    RecordOnlineTimestamps = int_to_bin(Record#db_player_online_info.record_online_timestamps),
    <<
        "INSERT INTO `player_online_info` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`total_hours_online_today` = ", TotalHoursOnlineToday/binary,
        " ,`record_online_timestamps` = ", RecordOnlineTimestamps/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_online_info, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_online_info , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_online_info, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_online_info, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_online_info, NewRecord, Changes, [<< "UPDATE `player_online_info` SET ">>])));
tran_to_sql ({_EtsTable, player_online_info, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_online_info.player_id),
    <<
        "DELETE FROM `player_online_info` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_online_info, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_online_info`;\n"
    >>;
tran_to_sql ({_EtsTable,player_online_award, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_online_award.player_id),
    Id = int_to_bin(Record#db_player_online_award.id),
    State = int_to_bin(Record#db_player_online_award.state),
    ChangeTime = int_to_bin(Record#db_player_online_award.change_time),
    <<
        "INSERT INTO `player_online_award` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`id` = ", Id/binary,
        " ,`state` = ", State/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_online_award, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_online_award , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_online_award, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_online_award, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_online_award, NewRecord, Changes, [<< "UPDATE `player_online_award` SET ">>])));
tran_to_sql ({_EtsTable, player_online_award, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_online_award.player_id),
    Id = int_to_bin(Record#db_player_online_award.id),
    <<
        "DELETE FROM `player_online_award` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_online_award, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_online_award`;\n"
    >>;
tran_to_sql ({_EtsTable,player_offline_apply, insert, Record}) ->
    Id = int_to_bin(Record#db_player_offline_apply.id),
    PlayerId = int_to_bin(Record#db_player_offline_apply.player_id),
    Module = list_to_bin(Record#db_player_offline_apply.module),
    Function = list_to_bin(Record#db_player_offline_apply.function),
    Args = list_to_bin(Record#db_player_offline_apply.args),
    Timestamp = int_to_bin(Record#db_player_offline_apply.timestamp),
    <<
        "INSERT INTO `player_offline_apply` SET "
        " `id` = ", Id/binary,
        " ,`player_id` = ", PlayerId/binary,
        " ,`module` = ", Module/binary,
        " ,`function` = ", Function/binary,
        " ,`args` = ", Args/binary,
        " ,`timestamp` = ", Timestamp/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_offline_apply, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_offline_apply , update, NewRecord, OldRecord, get_changes(8, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_offline_apply, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_offline_apply, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_offline_apply, NewRecord, Changes, [<< "UPDATE `player_offline_apply` SET ">>])));
tran_to_sql ({_EtsTable, player_offline_apply, delete, Record}) ->
    Id = int_to_bin(Record#db_player_offline_apply.id),
    <<
        "DELETE FROM `player_offline_apply` WHERE "
        "`id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_offline_apply, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_offline_apply`;\n"
    >>;
tran_to_sql ({_EtsTable,player_mission_data, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_mission_data.player_id),
    MissionType = int_to_bin(Record#db_player_mission_data.mission_type),
    MissionId = int_to_bin(Record#db_player_mission_data.mission_id),
    Time = int_to_bin(Record#db_player_mission_data.time),
    <<
        "INSERT INTO `player_mission_data` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`mission_type` = ", MissionType/binary,
        " ,`mission_id` = ", MissionId/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_mission_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_mission_data , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_mission_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_mission_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_mission_data, NewRecord, Changes, [<< "UPDATE `player_mission_data` SET ">>])));
tran_to_sql ({_EtsTable, player_mission_data, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_mission_data.player_id),
    MissionType = int_to_bin(Record#db_player_mission_data.mission_type),
    <<
        "DELETE FROM `player_mission_data` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `mission_type` = ", MissionType/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_mission_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_mission_data`;\n"
    >>;
tran_to_sql ({_EtsTable,player_mail, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_mail.player_id),
    MailRealId = int_to_bin(Record#db_player_mail.mail_real_id),
    MailId = int_to_bin(Record#db_player_mail.mail_id),
    WeightValue = int_to_bin(Record#db_player_mail.weight_value),
    State = int_to_bin(Record#db_player_mail.state),
    TitleName = list_to_bin(Record#db_player_mail.title_name),
    Content = list_to_bin(Record#db_player_mail.content),
    Param = list_to_bin(Record#db_player_mail.param),
    ItemList = list_to_bin(Record#db_player_mail.item_list),
    LogType = int_to_bin(Record#db_player_mail.log_type),
    ValidTime = int_to_bin(Record#db_player_mail.valid_time),
    CreateTime = int_to_bin(Record#db_player_mail.create_time),
    <<
        "INSERT INTO `player_mail` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`mail_real_id` = ", MailRealId/binary,
        " ,`mail_id` = ", MailId/binary,
        " ,`weight_value` = ", WeightValue/binary,
        " ,`state` = ", State/binary,
        " ,`title_name` = ", TitleName/binary,
        " ,`content` = ", Content/binary,
        " ,`param` = ", Param/binary,
        " ,`item_list` = ", ItemList/binary,
        " ,`log_type` = ", LogType/binary,
        " ,`valid_time` = ", ValidTime/binary,
        " ,`create_time` = ", CreateTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_mail, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_mail , update, NewRecord, OldRecord, get_changes(14, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_mail, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_mail, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_mail, NewRecord, Changes, [<< "UPDATE `player_mail` SET ">>])));
tran_to_sql ({_EtsTable, player_mail, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_mail.player_id),
    MailRealId = int_to_bin(Record#db_player_mail.mail_real_id),
    <<
        "DELETE FROM `player_mail` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `mail_real_id` = ", MailRealId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_mail, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_mail`;\n"
    >>;
tran_to_sql({player_login_log , insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_login_log.player_id),
    Ip = list_to_bin(Record#db_player_login_log.ip),
    Timestamp = int_to_bin(Record#db_player_login_log.timestamp),
    <<
        "INSERT INTO `player_login_log` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`ip` = ", Ip/binary,
        " ,`timestamp` = ", Timestamp/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable,player_leichong, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_leichong.player_id),
    ActivityId = int_to_bin(Record#db_player_leichong.activity_id),
    TaskId = int_to_bin(Record#db_player_leichong.task_id),
    Done = int_to_bin(Record#db_player_leichong.done),
    State = int_to_bin(Record#db_player_leichong.state),
    <<
        "INSERT INTO `player_leichong` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`activity_id` = ", ActivityId/binary,
        " ,`task_id` = ", TaskId/binary,
        " ,`done` = ", Done/binary,
        " ,`state` = ", State/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_leichong, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_leichong , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_leichong, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_leichong, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_leichong, NewRecord, Changes, [<< "UPDATE `player_leichong` SET ">>])));
tran_to_sql ({_EtsTable, player_leichong, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_leichong.player_id),
    ActivityId = int_to_bin(Record#db_player_leichong.activity_id),
    TaskId = int_to_bin(Record#db_player_leichong.task_id),
    <<
        "DELETE FROM `player_leichong` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `activity_id` = ", ActivityId/binary,
        " and `task_id` = ", TaskId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_leichong, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_leichong`;\n"
    >>;
tran_to_sql ({_EtsTable,player_laba_data, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_laba_data.player_id),
    LabaId = int_to_bin(Record#db_player_laba_data.laba_id),
    CostRate = int_to_bin(Record#db_player_laba_data.cost_rate),
    MissedTimes = int_to_bin(Record#db_player_laba_data.missed_times),
    <<
        "INSERT INTO `player_laba_data` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`laba_id` = ", LabaId/binary,
        " ,`cost_rate` = ", CostRate/binary,
        " ,`missed_times` = ", MissedTimes/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_laba_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_laba_data , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_laba_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_laba_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_laba_data, NewRecord, Changes, [<< "UPDATE `player_laba_data` SET ">>])));
tran_to_sql ({_EtsTable, player_laba_data, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_laba_data.player_id),
    LabaId = int_to_bin(Record#db_player_laba_data.laba_id),
    CostRate = int_to_bin(Record#db_player_laba_data.cost_rate),
    <<
        "DELETE FROM `player_laba_data` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `laba_id` = ", LabaId/binary,
        " and `cost_rate` = ", CostRate/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_laba_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_laba_data`;\n"
    >>;
tran_to_sql ({_EtsTable,player_jiangjinchi, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_jiangjinchi.player_id),
    SceneId = int_to_bin(Record#db_player_jiangjinchi.scene_id),
    AtkCost = int_to_bin(Record#db_player_jiangjinchi.atk_cost),
    AtkTimes = int_to_bin(Record#db_player_jiangjinchi.atk_times),
    State = int_to_bin(Record#db_player_jiangjinchi.state),
    AwardNum = int_to_bin(Record#db_player_jiangjinchi.award_num),
    ExtraAwardNum = int_to_bin(Record#db_player_jiangjinchi.extra_award_num),
    DoubledTimes = int_to_bin(Record#db_player_jiangjinchi.doubled_times),
    ChangeTime = int_to_bin(Record#db_player_jiangjinchi.change_time),
    InitAwardNum = int_to_bin(Record#db_player_jiangjinchi.init_award_num),
    <<
        "INSERT INTO `player_jiangjinchi` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`scene_id` = ", SceneId/binary,
        " ,`atk_cost` = ", AtkCost/binary,
        " ,`atk_times` = ", AtkTimes/binary,
        " ,`state` = ", State/binary,
        " ,`award_num` = ", AwardNum/binary,
        " ,`extra_award_num` = ", ExtraAwardNum/binary,
        " ,`doubled_times` = ", DoubledTimes/binary,
        " ,`change_time` = ", ChangeTime/binary,
        " ,`init_award_num` = ", InitAwardNum/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_jiangjinchi, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_jiangjinchi , update, NewRecord, OldRecord, get_changes(12, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_jiangjinchi, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_jiangjinchi, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_jiangjinchi, NewRecord, Changes, [<< "UPDATE `player_jiangjinchi` SET ">>])));
tran_to_sql ({_EtsTable, player_jiangjinchi, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_jiangjinchi.player_id),
    SceneId = int_to_bin(Record#db_player_jiangjinchi.scene_id),
    <<
        "DELETE FROM `player_jiangjinchi` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `scene_id` = ", SceneId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_jiangjinchi, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_jiangjinchi`;\n"
    >>;
tran_to_sql ({_EtsTable,player_invite_friend_log, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_invite_friend_log.player_id),
    AccId = list_to_bin(Record#db_player_invite_friend_log.acc_id),
    Type = int_to_bin(Record#db_player_invite_friend_log.type),
    ServerId = list_to_bin(Record#db_player_invite_friend_log.server_id),
    SharePlayerId = int_to_bin(Record#db_player_invite_friend_log.share_player_id),
    ChangeTime = int_to_bin(Record#db_player_invite_friend_log.change_time),
    <<
        "INSERT INTO `player_invite_friend_log` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`acc_id` = ", AccId/binary,
        " ,`type` = ", Type/binary,
        " ,`server_id` = ", ServerId/binary,
        " ,`share_player_id` = ", SharePlayerId/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_invite_friend_log, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_invite_friend_log , update, NewRecord, OldRecord, get_changes(8, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_invite_friend_log, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_invite_friend_log, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_invite_friend_log, NewRecord, Changes, [<< "UPDATE `player_invite_friend_log` SET ">>])));
tran_to_sql ({_EtsTable, player_invite_friend_log, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_invite_friend_log.player_id),
    AccId = list_to_bin(Record#db_player_invite_friend_log.acc_id),
    <<
        "DELETE FROM `player_invite_friend_log` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `acc_id` = ", AccId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_invite_friend_log, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_invite_friend_log`;\n"
    >>;
tran_to_sql ({_EtsTable,player_invite_friend, insert, Record}) ->
    AccId = list_to_bin(Record#db_player_invite_friend.acc_id),
    PlayerId = int_to_bin(Record#db_player_invite_friend.player_id),
    <<
        "INSERT INTO `player_invite_friend` SET "
        " `acc_id` = ", AccId/binary,
        " ,`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_invite_friend, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_invite_friend , update, NewRecord, OldRecord, get_changes(4, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_invite_friend, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_invite_friend, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_invite_friend, NewRecord, Changes, [<< "UPDATE `player_invite_friend` SET ">>])));
tran_to_sql ({_EtsTable, player_invite_friend, delete, Record}) ->
    AccId = list_to_bin(Record#db_player_invite_friend.acc_id),
    PlayerId = int_to_bin(Record#db_player_invite_friend.player_id),
    <<
        "DELETE FROM `player_invite_friend` WHERE "
        "`acc_id` = ", AccId/binary,
        " and `player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_invite_friend, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_invite_friend`;\n"
    >>;
tran_to_sql ({_EtsTable,player_invest_type, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_invest_type.player_id),
    Type = int_to_bin(Record#db_player_invest_type.type),
    IsBuy = int_to_bin(Record#db_player_invest_type.is_buy),
    UpdateTime = int_to_bin(Record#db_player_invest_type.update_time),
    <<
        "INSERT INTO `player_invest_type` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`type` = ", Type/binary,
        " ,`is_buy` = ", IsBuy/binary,
        " ,`update_time` = ", UpdateTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_invest_type, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_invest_type , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_invest_type, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_invest_type, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_invest_type, NewRecord, Changes, [<< "UPDATE `player_invest_type` SET ">>])));
tran_to_sql ({_EtsTable, player_invest_type, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_invest_type.player_id),
    Type = int_to_bin(Record#db_player_invest_type.type),
    <<
        "DELETE FROM `player_invest_type` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `type` = ", Type/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_invest_type, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_invest_type`;\n"
    >>;
tran_to_sql ({_EtsTable,player_invest, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_invest.player_id),
    Type = int_to_bin(Record#db_player_invest.type),
    Id = int_to_bin(Record#db_player_invest.id),
    Value = int_to_bin(Record#db_player_invest.value),
    Status = int_to_bin(Record#db_player_invest.status),
    UpdateTime = int_to_bin(Record#db_player_invest.update_time),
    <<
        "INSERT INTO `player_invest` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`type` = ", Type/binary,
        " ,`id` = ", Id/binary,
        " ,`value` = ", Value/binary,
        " ,`status` = ", Status/binary,
        " ,`update_time` = ", UpdateTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_invest, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_invest , update, NewRecord, OldRecord, get_changes(8, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_invest, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_invest, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_invest, NewRecord, Changes, [<< "UPDATE `player_invest` SET ">>])));
tran_to_sql ({_EtsTable, player_invest, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_invest.player_id),
    Type = int_to_bin(Record#db_player_invest.type),
    Id = int_to_bin(Record#db_player_invest.id),
    <<
        "DELETE FROM `player_invest` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `type` = ", Type/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_invest, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_invest`;\n"
    >>;
tran_to_sql ({_EtsTable,player_hero_use, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_hero_use.player_id),
    HeroId = int_to_bin(Record#db_player_hero_use.hero_id),
    Arms = int_to_bin(Record#db_player_hero_use.arms),
    Ornaments = int_to_bin(Record#db_player_hero_use.ornaments),
    <<
        "INSERT INTO `player_hero_use` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`hero_id` = ", HeroId/binary,
        " ,`arms` = ", Arms/binary,
        " ,`ornaments` = ", Ornaments/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_hero_use, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_hero_use , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_hero_use, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_hero_use, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_hero_use, NewRecord, Changes, [<< "UPDATE `player_hero_use` SET ">>])));
tran_to_sql ({_EtsTable, player_hero_use, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_hero_use.player_id),
    <<
        "DELETE FROM `player_hero_use` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_hero_use, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_hero_use`;\n"
    >>;
tran_to_sql ({_EtsTable,player_hero_parts, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_hero_parts.player_id),
    PartsId = int_to_bin(Record#db_player_hero_parts.parts_id),
    <<
        "INSERT INTO `player_hero_parts` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`parts_id` = ", PartsId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_hero_parts, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_hero_parts , update, NewRecord, OldRecord, get_changes(4, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_hero_parts, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_hero_parts, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_hero_parts, NewRecord, Changes, [<< "UPDATE `player_hero_parts` SET ">>])));
tran_to_sql ({_EtsTable, player_hero_parts, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_hero_parts.player_id),
    PartsId = int_to_bin(Record#db_player_hero_parts.parts_id),
    <<
        "DELETE FROM `player_hero_parts` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `parts_id` = ", PartsId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_hero_parts, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_hero_parts`;\n"
    >>;
tran_to_sql ({_EtsTable,player_hero, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_hero.player_id),
    HeroId = int_to_bin(Record#db_player_hero.hero_id),
    Star = int_to_bin(Record#db_player_hero.star),
    <<
        "INSERT INTO `player_hero` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`hero_id` = ", HeroId/binary,
        " ,`star` = ", Star/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_hero, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_hero , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_hero, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_hero, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_hero, NewRecord, Changes, [<< "UPDATE `player_hero` SET ">>])));
tran_to_sql ({_EtsTable, player_hero, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_hero.player_id),
    HeroId = int_to_bin(Record#db_player_hero.hero_id),
    <<
        "DELETE FROM `player_hero` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `hero_id` = ", HeroId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_hero, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_hero`;\n"
    >>;
tran_to_sql ({_EtsTable,player_gift_mail_log, insert, Record}) ->
    Sender = int_to_bin(Record#db_player_gift_mail_log.sender),
    CreateTime = int_to_bin(Record#db_player_gift_mail_log.create_time),
    Receiver = int_to_bin(Record#db_player_gift_mail_log.receiver),
    ReceiverNickname = list_to_bin(Record#db_player_gift_mail_log.receiver_nickname),
    ItemList = list_to_bin(Record#db_player_gift_mail_log.item_list),
    <<
        "INSERT INTO `player_gift_mail_log` SET "
        " `sender` = ", Sender/binary,
        " ,`create_time` = ", CreateTime/binary,
        " ,`receiver` = ", Receiver/binary,
        " ,`receiver_nickname` = ", ReceiverNickname/binary,
        " ,`item_list` = ", ItemList/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_gift_mail_log, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_gift_mail_log , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_gift_mail_log, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_gift_mail_log, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_gift_mail_log, NewRecord, Changes, [<< "UPDATE `player_gift_mail_log` SET ">>])));
tran_to_sql ({_EtsTable, player_gift_mail_log, delete, Record}) ->
    Sender = int_to_bin(Record#db_player_gift_mail_log.sender),
    CreateTime = int_to_bin(Record#db_player_gift_mail_log.create_time),
    <<
        "DELETE FROM `player_gift_mail_log` WHERE "
        "`sender` = ", Sender/binary,
        " and `create_time` = ", CreateTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_gift_mail_log, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_gift_mail_log`;\n"
    >>;
tran_to_sql ({_EtsTable,player_gift_mail, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_gift_mail.player_id),
    Sender = int_to_bin(Record#db_player_gift_mail.sender),
    MailRealId = int_to_bin(Record#db_player_gift_mail.mail_real_id),
    WeightValue = int_to_bin(Record#db_player_gift_mail.weight_value),
    IsRead = int_to_bin(Record#db_player_gift_mail.is_read),
    State = int_to_bin(Record#db_player_gift_mail.state),
    IsDel = int_to_bin(Record#db_player_gift_mail.is_del),
    MailId = int_to_bin(Record#db_player_gift_mail.mail_id),
    TitleContent = list_to_bin(Record#db_player_gift_mail.title_content),
    TitleParam = list_to_bin(Record#db_player_gift_mail.title_param),
    Content = list_to_bin(Record#db_player_gift_mail.content),
    ContentParam = list_to_bin(Record#db_player_gift_mail.content_param),
    ItemList = list_to_bin(Record#db_player_gift_mail.item_list),
    CreateTime = int_to_bin(Record#db_player_gift_mail.create_time),
    <<
        "INSERT INTO `player_gift_mail` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`sender` = ", Sender/binary,
        " ,`mail_real_id` = ", MailRealId/binary,
        " ,`weight_value` = ", WeightValue/binary,
        " ,`is_read` = ", IsRead/binary,
        " ,`state` = ", State/binary,
        " ,`is_del` = ", IsDel/binary,
        " ,`mail_id` = ", MailId/binary,
        " ,`title_content` = ", TitleContent/binary,
        " ,`title_param` = ", TitleParam/binary,
        " ,`content` = ", Content/binary,
        " ,`content_param` = ", ContentParam/binary,
        " ,`item_list` = ", ItemList/binary,
        " ,`create_time` = ", CreateTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_gift_mail, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_gift_mail , update, NewRecord, OldRecord, get_changes(16, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_gift_mail, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_gift_mail, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_gift_mail, NewRecord, Changes, [<< "UPDATE `player_gift_mail` SET ">>])));
tran_to_sql ({_EtsTable, player_gift_mail, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_gift_mail.player_id),
    MailRealId = int_to_bin(Record#db_player_gift_mail.mail_real_id),
    <<
        "DELETE FROM `player_gift_mail` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `mail_real_id` = ", MailRealId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_gift_mail, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_gift_mail`;\n"
    >>;
tran_to_sql ({_EtsTable,player_gift_code, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_gift_code.player_id),
    GiftCodeType = int_to_bin(Record#db_player_gift_code.gift_code_type),
    Times = int_to_bin(Record#db_player_gift_code.times),
    ChangeTime = int_to_bin(Record#db_player_gift_code.change_time),
    <<
        "INSERT INTO `player_gift_code` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`gift_code_type` = ", GiftCodeType/binary,
        " ,`times` = ", Times/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_gift_code, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_gift_code , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_gift_code, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_gift_code, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_gift_code, NewRecord, Changes, [<< "UPDATE `player_gift_code` SET ">>])));
tran_to_sql ({_EtsTable, player_gift_code, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_gift_code.player_id),
    GiftCodeType = int_to_bin(Record#db_player_gift_code.gift_code_type),
    <<
        "DELETE FROM `player_gift_code` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `gift_code_type` = ", GiftCodeType/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_gift_code, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_gift_code`;\n"
    >>;
tran_to_sql({player_game_log , insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_game_log.player_id),
    SceneId = int_to_bin(Record#db_player_game_log.scene_id),
    CostList = list_to_bin(Record#db_player_game_log.cost_list),
    AwardList = list_to_bin(Record#db_player_game_log.award_list),
    Time = int_to_bin(Record#db_player_game_log.time),
    CostTime = int_to_bin(Record#db_player_game_log.cost_time),
    <<
        "INSERT INTO `player_game_log` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`scene_id` = ", SceneId/binary,
        " ,`cost_list` = ", CostList/binary,
        " ,`award_list` = ", AwardList/binary,
        " ,`time` = ", Time/binary,
        " ,`cost_time` = ", CostTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable,player_game_data, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_game_data.player_id),
    DataId = int_to_bin(Record#db_player_game_data.data_id),
    IntData = int_to_bin(Record#db_player_game_data.int_data),
    StrData = list_to_bin(Record#db_player_game_data.str_data),
    <<
        "INSERT INTO `player_game_data` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`data_id` = ", DataId/binary,
        " ,`int_data` = ", IntData/binary,
        " ,`str_data` = ", StrData/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_game_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_game_data , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_game_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_game_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_game_data, NewRecord, Changes, [<< "UPDATE `player_game_data` SET ">>])));
tran_to_sql ({_EtsTable, player_game_data, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_game_data.player_id),
    DataId = int_to_bin(Record#db_player_game_data.data_id),
    <<
        "DELETE FROM `player_game_data` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `data_id` = ", DataId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_game_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_game_data`;\n"
    >>;
tran_to_sql ({_EtsTable,player_game_config, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_game_config.player_id),
    ConfigId = int_to_bin(Record#db_player_game_config.config_id),
    IntData = int_to_bin(Record#db_player_game_config.int_data),
    StrData = list_to_bin(Record#db_player_game_config.str_data),
    ChangeTime = int_to_bin(Record#db_player_game_config.change_time),
    <<
        "INSERT INTO `player_game_config` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`config_id` = ", ConfigId/binary,
        " ,`int_data` = ", IntData/binary,
        " ,`str_data` = ", StrData/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_game_config, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_game_config , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_game_config, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_game_config, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_game_config, NewRecord, Changes, [<< "UPDATE `player_game_config` SET ">>])));
tran_to_sql ({_EtsTable, player_game_config, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_game_config.player_id),
    ConfigId = int_to_bin(Record#db_player_game_config.config_id),
    <<
        "DELETE FROM `player_game_config` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `config_id` = ", ConfigId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_game_config, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_game_config`;\n"
    >>;
tran_to_sql ({_EtsTable,player_function, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_function.player_id),
    FunctionId = int_to_bin(Record#db_player_function.function_id),
    State = int_to_bin(Record#db_player_function.state),
    GetState = int_to_bin(Record#db_player_function.get_state),
    Time = int_to_bin(Record#db_player_function.time),
    <<
        "INSERT INTO `player_function` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`function_id` = ", FunctionId/binary,
        " ,`state` = ", State/binary,
        " ,`get_state` = ", GetState/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_function, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_function , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_function, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_function, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_function, NewRecord, Changes, [<< "UPDATE `player_function` SET ">>])));
tran_to_sql ({_EtsTable, player_function, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_function.player_id),
    FunctionId = int_to_bin(Record#db_player_function.function_id),
    <<
        "DELETE FROM `player_function` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `function_id` = ", FunctionId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_function, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_function`;\n"
    >>;
tran_to_sql ({_EtsTable,player_first_charge_day, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_first_charge_day.player_id),
    Type = int_to_bin(Record#db_player_first_charge_day.type),
    Day = int_to_bin(Record#db_player_first_charge_day.day),
    Time = int_to_bin(Record#db_player_first_charge_day.time),
    <<
        "INSERT INTO `player_first_charge_day` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`type` = ", Type/binary,
        " ,`day` = ", Day/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_first_charge_day, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_first_charge_day , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_first_charge_day, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_first_charge_day, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_first_charge_day, NewRecord, Changes, [<< "UPDATE `player_first_charge_day` SET ">>])));
tran_to_sql ({_EtsTable, player_first_charge_day, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_first_charge_day.player_id),
    Type = int_to_bin(Record#db_player_first_charge_day.type),
    Day = int_to_bin(Record#db_player_first_charge_day.day),
    <<
        "DELETE FROM `player_first_charge_day` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `type` = ", Type/binary,
        " and `day` = ", Day/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_first_charge_day, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_first_charge_day`;\n"
    >>;
tran_to_sql ({_EtsTable,player_first_charge, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_first_charge.player_id),
    Type = int_to_bin(Record#db_player_first_charge.type),
    RechargeId = int_to_bin(Record#db_player_first_charge.recharge_id),
    LoginDay = int_to_bin(Record#db_player_first_charge.login_day),
    Time = int_to_bin(Record#db_player_first_charge.time),
    <<
        "INSERT INTO `player_first_charge` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`type` = ", Type/binary,
        " ,`recharge_id` = ", RechargeId/binary,
        " ,`login_day` = ", LoginDay/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_first_charge, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_first_charge , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_first_charge, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_first_charge, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_first_charge, NewRecord, Changes, [<< "UPDATE `player_first_charge` SET ">>])));
tran_to_sql ({_EtsTable, player_first_charge, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_first_charge.player_id),
    Type = int_to_bin(Record#db_player_first_charge.type),
    <<
        "DELETE FROM `player_first_charge` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `type` = ", Type/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_first_charge, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_first_charge`;\n"
    >>;
tran_to_sql ({_EtsTable,player_finish_share_task, insert, Record}) ->
    AccId = list_to_bin(Record#db_player_finish_share_task.acc_id),
    TaskType = int_to_bin(Record#db_player_finish_share_task.task_type),
    PlayerId = int_to_bin(Record#db_player_finish_share_task.player_id),
    State = int_to_bin(Record#db_player_finish_share_task.state),
    <<
        "INSERT INTO `player_finish_share_task` SET "
        " `acc_id` = ", AccId/binary,
        " ,`task_type` = ", TaskType/binary,
        " ,`player_id` = ", PlayerId/binary,
        " ,`state` = ", State/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_finish_share_task, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_finish_share_task , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_finish_share_task, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_finish_share_task, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_finish_share_task, NewRecord, Changes, [<< "UPDATE `player_finish_share_task` SET ">>])));
tran_to_sql ({_EtsTable, player_finish_share_task, delete, Record}) ->
    AccId = list_to_bin(Record#db_player_finish_share_task.acc_id),
    TaskType = int_to_bin(Record#db_player_finish_share_task.task_type),
    PlayerId = int_to_bin(Record#db_player_finish_share_task.player_id),
    <<
        "DELETE FROM `player_finish_share_task` WHERE "
        "`acc_id` = ", AccId/binary,
        " and `task_type` = ", TaskType/binary,
        " and `player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_finish_share_task, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_finish_share_task`;\n"
    >>;
tran_to_sql ({_EtsTable,player_fight_adjust, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_fight_adjust.player_id),
    PropId = int_to_bin(Record#db_player_fight_adjust.prop_id),
    FightType = int_to_bin(Record#db_player_fight_adjust.fight_type),
    Pool = int_to_bin(Record#db_player_fight_adjust.pool),
    PoolTimes = int_to_bin(Record#db_player_fight_adjust.pool_times),
    Rate = int_to_bin(Record#db_player_fight_adjust.rate),
    CostRate = int_to_bin(Record#db_player_fight_adjust.cost_rate),
    CostPool = int_to_bin(Record#db_player_fight_adjust.cost_pool),
    Pool1 = int_to_bin(Record#db_player_fight_adjust.pool_1),
    Pool2 = int_to_bin(Record#db_player_fight_adjust.pool_2),
    BottomTimes = int_to_bin(Record#db_player_fight_adjust.bottom_times),
    BottomTimesTime = int_to_bin(Record#db_player_fight_adjust.bottom_times_time),
    IsBottom = int_to_bin(Record#db_player_fight_adjust.is_bottom),
    Id = int_to_bin(Record#db_player_fight_adjust.id),
    <<
        "INSERT INTO `player_fight_adjust` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`prop_id` = ", PropId/binary,
        " ,`fight_type` = ", FightType/binary,
        " ,`pool` = ", Pool/binary,
        " ,`pool_times` = ", PoolTimes/binary,
        " ,`rate` = ", Rate/binary,
        " ,`cost_rate` = ", CostRate/binary,
        " ,`cost_pool` = ", CostPool/binary,
        " ,`pool_1` = ", Pool1/binary,
        " ,`pool_2` = ", Pool2/binary,
        " ,`bottom_times` = ", BottomTimes/binary,
        " ,`bottom_times_time` = ", BottomTimesTime/binary,
        " ,`is_bottom` = ", IsBottom/binary,
        " ,`id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_fight_adjust, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_fight_adjust , update, NewRecord, OldRecord, get_changes(16, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_fight_adjust, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_fight_adjust, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_fight_adjust, NewRecord, Changes, [<< "UPDATE `player_fight_adjust` SET ">>])));
tran_to_sql ({_EtsTable, player_fight_adjust, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_fight_adjust.player_id),
    PropId = int_to_bin(Record#db_player_fight_adjust.prop_id),
    FightType = int_to_bin(Record#db_player_fight_adjust.fight_type),
    <<
        "DELETE FROM `player_fight_adjust` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `prop_id` = ", PropId/binary,
        " and `fight_type` = ", FightType/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_fight_adjust, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_fight_adjust`;\n"
    >>;
tran_to_sql ({_EtsTable,player_everyday_sign, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_everyday_sign.player_id),
    Today = int_to_bin(Record#db_player_everyday_sign.today),
    State = int_to_bin(Record#db_player_everyday_sign.state),
    ChangeTime = int_to_bin(Record#db_player_everyday_sign.change_time),
    <<
        "INSERT INTO `player_everyday_sign` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`today` = ", Today/binary,
        " ,`state` = ", State/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_everyday_sign, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_everyday_sign , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_everyday_sign, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_everyday_sign, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_everyday_sign, NewRecord, Changes, [<< "UPDATE `player_everyday_sign` SET ">>])));
tran_to_sql ({_EtsTable, player_everyday_sign, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_everyday_sign.player_id),
    Today = int_to_bin(Record#db_player_everyday_sign.today),
    <<
        "DELETE FROM `player_everyday_sign` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `today` = ", Today/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_everyday_sign, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_everyday_sign`;\n"
    >>;
tran_to_sql ({_EtsTable,player_everyday_charge, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_everyday_charge.player_id),
    Id = int_to_bin(Record#db_player_everyday_charge.id),
    State = int_to_bin(Record#db_player_everyday_charge.state),
    ChangeTime = int_to_bin(Record#db_player_everyday_charge.change_time),
    <<
        "INSERT INTO `player_everyday_charge` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`id` = ", Id/binary,
        " ,`state` = ", State/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_everyday_charge, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_everyday_charge , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_everyday_charge, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_everyday_charge, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_everyday_charge, NewRecord, Changes, [<< "UPDATE `player_everyday_charge` SET ">>])));
tran_to_sql ({_EtsTable, player_everyday_charge, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_everyday_charge.player_id),
    <<
        "DELETE FROM `player_everyday_charge` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_everyday_charge, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_everyday_charge`;\n"
    >>;
tran_to_sql ({_EtsTable,player_data, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_data.player_id),
    Exp = int_to_bin(Record#db_player_data.exp),
    Level = int_to_bin(Record#db_player_data.level),
    VipLevel = int_to_bin(Record#db_player_data.vip_level),
    TitleId = int_to_bin(Record#db_player_data.title_id),
    HonorId = int_to_bin(Record#db_player_data.honor_id),
    HeadId = int_to_bin(Record#db_player_data.head_id),
    HeadFrameId = int_to_bin(Record#db_player_data.head_frame_id),
    ChatQiPaoId = int_to_bin(Record#db_player_data.chat_qi_pao_id),
    Anger = int_to_bin(Record#db_player_data.anger),
    MaxHp = int_to_bin(Record#db_player_data.max_hp),
    Hp = int_to_bin(Record#db_player_data.hp),
    Attack = int_to_bin(Record#db_player_data.attack),
    Defense = int_to_bin(Record#db_player_data.defense),
    Hit = int_to_bin(Record#db_player_data.hit),
    Dodge = int_to_bin(Record#db_player_data.dodge),
    Tenacity = int_to_bin(Record#db_player_data.tenacity),
    Critical = int_to_bin(Record#db_player_data.critical),
    RateResistBlock = int_to_bin(Record#db_player_data.rate_resist_block),
    RateBlock = int_to_bin(Record#db_player_data.rate_block),
    Power = int_to_bin(Record#db_player_data.power),
    Speed = int_to_bin(Record#db_player_data.speed),
    CritTime = int_to_bin(Record#db_player_data.crit_time),
    HurtAdd = int_to_bin(Record#db_player_data.hurt_add),
    HurtReduce = int_to_bin(Record#db_player_data.hurt_reduce),
    CritHurtAdd = int_to_bin(Record#db_player_data.crit_hurt_add),
    CritHurtReduce = int_to_bin(Record#db_player_data.crit_hurt_reduce),
    HpReflex = int_to_bin(Record#db_player_data.hp_reflex),
    Pk = int_to_bin(Record#db_player_data.pk),
    LastWorldSceneId = int_to_bin(Record#db_player_data.last_world_scene_id),
    X = int_to_bin(Record#db_player_data.x),
    Y = int_to_bin(Record#db_player_data.y),
    FightMode = int_to_bin(Record#db_player_data.fight_mode),
    MountStatus = int_to_bin(Record#db_player_data.mount_status),
    GameEventId = int_to_bin(Record#db_player_data.game_event_id),
    <<
        "INSERT INTO `player_data` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`exp` = ", Exp/binary,
        " ,`level` = ", Level/binary,
        " ,`vip_level` = ", VipLevel/binary,
        " ,`title_id` = ", TitleId/binary,
        " ,`honor_id` = ", HonorId/binary,
        " ,`head_id` = ", HeadId/binary,
        " ,`head_frame_id` = ", HeadFrameId/binary,
        " ,`chat_qi_pao_id` = ", ChatQiPaoId/binary,
        " ,`anger` = ", Anger/binary,
        " ,`max_hp` = ", MaxHp/binary,
        " ,`hp` = ", Hp/binary,
        " ,`attack` = ", Attack/binary,
        " ,`defense` = ", Defense/binary,
        " ,`hit` = ", Hit/binary,
        " ,`dodge` = ", Dodge/binary,
        " ,`tenacity` = ", Tenacity/binary,
        " ,`critical` = ", Critical/binary,
        " ,`rate_resist_block` = ", RateResistBlock/binary,
        " ,`rate_block` = ", RateBlock/binary,
        " ,`power` = ", Power/binary,
        " ,`speed` = ", Speed/binary,
        " ,`crit_time` = ", CritTime/binary,
        " ,`hurt_add` = ", HurtAdd/binary,
        " ,`hurt_reduce` = ", HurtReduce/binary,
        " ,`crit_hurt_add` = ", CritHurtAdd/binary,
        " ,`crit_hurt_reduce` = ", CritHurtReduce/binary,
        " ,`hp_reflex` = ", HpReflex/binary,
        " ,`pk` = ", Pk/binary,
        " ,`last_world_scene_id` = ", LastWorldSceneId/binary,
        " ,`x` = ", X/binary,
        " ,`y` = ", Y/binary,
        " ,`fight_mode` = ", FightMode/binary,
        " ,`mount_status` = ", MountStatus/binary,
        " ,`game_event_id` = ", GameEventId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_data , update, NewRecord, OldRecord, get_changes(37, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_data, NewRecord, Changes, [<< "UPDATE `player_data` SET ">>])));
tran_to_sql ({_EtsTable, player_data, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_data.player_id),
    <<
        "DELETE FROM `player_data` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_data`;\n"
    >>;
tran_to_sql ({_EtsTable,player_daily_task, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_daily_task.player_id),
    Id = int_to_bin(Record#db_player_daily_task.id),
    Value = int_to_bin(Record#db_player_daily_task.value),
    State = int_to_bin(Record#db_player_daily_task.state),
    ChangeTime = int_to_bin(Record#db_player_daily_task.change_time),
    <<
        "INSERT INTO `player_daily_task` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`id` = ", Id/binary,
        " ,`value` = ", Value/binary,
        " ,`state` = ", State/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_daily_task, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_daily_task , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_daily_task, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_daily_task, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_daily_task, NewRecord, Changes, [<< "UPDATE `player_daily_task` SET ">>])));
tran_to_sql ({_EtsTable, player_daily_task, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_daily_task.player_id),
    Id = int_to_bin(Record#db_player_daily_task.id),
    <<
        "DELETE FROM `player_daily_task` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_daily_task, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_daily_task`;\n"
    >>;
tran_to_sql ({_EtsTable,player_daily_points, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_daily_points.player_id),
    Bid = int_to_bin(Record#db_player_daily_points.bid),
    CreateTime = int_to_bin(Record#db_player_daily_points.create_time),
    <<
        "INSERT INTO `player_daily_points` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`bid` = ", Bid/binary,
        " ,`create_time` = ", CreateTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_daily_points, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_daily_points , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_daily_points, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_daily_points, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_daily_points, NewRecord, Changes, [<< "UPDATE `player_daily_points` SET ">>])));
tran_to_sql ({_EtsTable, player_daily_points, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_daily_points.player_id),
    Bid = int_to_bin(Record#db_player_daily_points.bid),
    <<
        "DELETE FROM `player_daily_points` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `bid` = ", Bid/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_daily_points, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_daily_points`;\n"
    >>;
tran_to_sql ({_EtsTable,player_conditions_data, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_conditions_data.player_id),
    ConditionsId = int_to_bin(Record#db_player_conditions_data.conditions_id),
    Type = int_to_bin(Record#db_player_conditions_data.type),
    Type2 = int_to_bin(Record#db_player_conditions_data.type2),
    ConditionsType = int_to_bin(Record#db_player_conditions_data.conditions_type),
    Count = int_to_bin(Record#db_player_conditions_data.count),
    ChangeTime = int_to_bin(Record#db_player_conditions_data.change_time),
    <<
        "INSERT INTO `player_conditions_data` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`conditions_id` = ", ConditionsId/binary,
        " ,`type` = ", Type/binary,
        " ,`type2` = ", Type2/binary,
        " ,`conditions_type` = ", ConditionsType/binary,
        " ,`count` = ", Count/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_conditions_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_conditions_data , update, NewRecord, OldRecord, get_changes(9, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_conditions_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_conditions_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_conditions_data, NewRecord, Changes, [<< "UPDATE `player_conditions_data` SET ">>])));
tran_to_sql ({_EtsTable, player_conditions_data, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_conditions_data.player_id),
    ConditionsId = int_to_bin(Record#db_player_conditions_data.conditions_id),
    Type = int_to_bin(Record#db_player_conditions_data.type),
    Type2 = int_to_bin(Record#db_player_conditions_data.type2),
    <<
        "DELETE FROM `player_conditions_data` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `conditions_id` = ", ConditionsId/binary,
        " and `type` = ", Type/binary,
        " and `type2` = ", Type2/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_conditions_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_conditions_data`;\n"
    >>;
tran_to_sql ({_EtsTable,player_condition_activity, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_condition_activity.player_id),
    ActivityId = int_to_bin(Record#db_player_condition_activity.activity_id),
    ActivityTime = int_to_bin(Record#db_player_condition_activity.activity_time),
    ChangeTime = int_to_bin(Record#db_player_condition_activity.change_time),
    <<
        "INSERT INTO `player_condition_activity` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`activity_id` = ", ActivityId/binary,
        " ,`activity_time` = ", ActivityTime/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_condition_activity, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_condition_activity , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_condition_activity, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_condition_activity, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_condition_activity, NewRecord, Changes, [<< "UPDATE `player_condition_activity` SET ">>])));
tran_to_sql ({_EtsTable, player_condition_activity, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_condition_activity.player_id),
    ActivityId = int_to_bin(Record#db_player_condition_activity.activity_id),
    <<
        "DELETE FROM `player_condition_activity` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `activity_id` = ", ActivityId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_condition_activity, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_condition_activity`;\n"
    >>;
tran_to_sql({player_client_log , insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_client_log.player_id),
    LogId = int_to_bin(Record#db_player_client_log.log_id),
    Time = int_to_bin(Record#db_player_client_log.time),
    <<
        "INSERT INTO `player_client_log` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`log_id` = ", LogId/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable,player_client_data, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_client_data.player_id),
    Id = list_to_bin(Record#db_player_client_data.id),
    Value = list_to_bin(Record#db_player_client_data.value),
    Time = int_to_bin(Record#db_player_client_data.time),
    <<
        "INSERT INTO `player_client_data` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`id` = ", Id/binary,
        " ,`value` = ", Value/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_client_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_client_data , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_client_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_client_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_client_data, NewRecord, Changes, [<< "UPDATE `player_client_data` SET ">>])));
tran_to_sql ({_EtsTable, player_client_data, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_client_data.player_id),
    Id = list_to_bin(Record#db_player_client_data.id),
    <<
        "DELETE FROM `player_client_data` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_client_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_client_data`;\n"
    >>;
tran_to_sql ({_EtsTable,player_chat_data, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_chat_data.player_id),
    Id = int_to_bin(Record#db_player_chat_data.id),
    SendPlayerId = int_to_bin(Record#db_player_chat_data.send_player_id),
    ChatMsg = list_to_bin(Record#db_player_chat_data.chat_msg),
    Level = int_to_bin(Record#db_player_chat_data.level),
    VipLevel = int_to_bin(Record#db_player_chat_data.vip_level),
    HeadId = int_to_bin(Record#db_player_chat_data.head_id),
    Nickname = list_to_bin(Record#db_player_chat_data.nickname),
    Sex = int_to_bin(Record#db_player_chat_data.sex),
    HeadFrameId = int_to_bin(Record#db_player_chat_data.head_frame_id),
    SendTime = int_to_bin(Record#db_player_chat_data.send_time),
    <<
        "INSERT INTO `player_chat_data` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`id` = ", Id/binary,
        " ,`send_player_id` = ", SendPlayerId/binary,
        " ,`chat_msg` = ", ChatMsg/binary,
        " ,`level` = ", Level/binary,
        " ,`vip_level` = ", VipLevel/binary,
        " ,`head_id` = ", HeadId/binary,
        " ,`nickname` = ", Nickname/binary,
        " ,`sex` = ", Sex/binary,
        " ,`head_frame_id` = ", HeadFrameId/binary,
        " ,`send_time` = ", SendTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_chat_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_chat_data , update, NewRecord, OldRecord, get_changes(13, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_chat_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_chat_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_chat_data, NewRecord, Changes, [<< "UPDATE `player_chat_data` SET ">>])));
tran_to_sql ({_EtsTable, player_chat_data, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_chat_data.player_id),
    Id = int_to_bin(Record#db_player_chat_data.id),
    <<
        "DELETE FROM `player_chat_data` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_chat_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_chat_data`;\n"
    >>;
tran_to_sql ({_EtsTable,player_charge_shop, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_charge_shop.player_id),
    Id = int_to_bin(Record#db_player_charge_shop.id),
    Count = int_to_bin(Record#db_player_charge_shop.count),
    ChangeTime = int_to_bin(Record#db_player_charge_shop.change_time),
    <<
        "INSERT INTO `player_charge_shop` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`id` = ", Id/binary,
        " ,`count` = ", Count/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_charge_shop, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_charge_shop , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_charge_shop, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_charge_shop, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_charge_shop, NewRecord, Changes, [<< "UPDATE `player_charge_shop` SET ">>])));
tran_to_sql ({_EtsTable, player_charge_shop, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_charge_shop.player_id),
    Id = int_to_bin(Record#db_player_charge_shop.id),
    <<
        "DELETE FROM `player_charge_shop` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_charge_shop, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_charge_shop`;\n"
    >>;
tran_to_sql ({_EtsTable,player_charge_record, insert, Record}) ->
    OrderId = list_to_bin(Record#db_player_charge_record.order_id),
    PlatformOrderId = list_to_bin(Record#db_player_charge_record.platform_order_id),
    PlayerId = int_to_bin(Record#db_player_charge_record.player_id),
    Type = int_to_bin(Record#db_player_charge_record.type),
    GameChargeId = int_to_bin(Record#db_player_charge_record.game_charge_id),
    ChargeItemId = int_to_bin(Record#db_player_charge_record.charge_item_id),
    Ip = list_to_bin(Record#db_player_charge_record.ip),
    Value = int_to_bin(Record#db_player_charge_record.value),
    Money = float_to_bin(Record#db_player_charge_record.money),
    ChargeState = int_to_bin(Record#db_player_charge_record.charge_state),
    Rate = float_to_bin(Record#db_player_charge_record.rate),
    Source = int_to_bin(Record#db_player_charge_record.source),
    ChangeTime = int_to_bin(Record#db_player_charge_record.change_time),
    CreateTime = int_to_bin(Record#db_player_charge_record.create_time),
    <<
        "INSERT INTO `player_charge_record` SET "
        " `order_id` = ", OrderId/binary,
        " ,`platform_order_id` = ", PlatformOrderId/binary,
        " ,`player_id` = ", PlayerId/binary,
        " ,`type` = ", Type/binary,
        " ,`game_charge_id` = ", GameChargeId/binary,
        " ,`charge_item_id` = ", ChargeItemId/binary,
        " ,`ip` = ", Ip/binary,
        " ,`value` = ", Value/binary,
        " ,`money` = ", Money/binary,
        " ,`charge_state` = ", ChargeState/binary,
        " ,`rate` = ", Rate/binary,
        " ,`source` = ", Source/binary,
        " ,`change_time` = ", ChangeTime/binary,
        " ,`create_time` = ", CreateTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_charge_record, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_charge_record , update, NewRecord, OldRecord, get_changes(16, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_charge_record, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_charge_record, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_charge_record, NewRecord, Changes, [<< "UPDATE `player_charge_record` SET ">>])));
tran_to_sql ({_EtsTable, player_charge_record, delete, Record}) ->
    OrderId = list_to_bin(Record#db_player_charge_record.order_id),
    <<
        "DELETE FROM `player_charge_record` WHERE "
        "`order_id` = ", OrderId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_charge_record, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_charge_record`;\n"
    >>;
tran_to_sql ({_EtsTable,player_charge_info_record, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_charge_info_record.player_id),
    PartId = list_to_bin(Record#db_player_charge_info_record.part_id),
    ServerId = list_to_bin(Record#db_player_charge_info_record.server_id),
    TotalMoney = float_to_bin(Record#db_player_charge_info_record.total_money),
    ChargeCount = int_to_bin(Record#db_player_charge_info_record.charge_count),
    ChargeTestCount = int_to_bin(Record#db_player_charge_info_record.charge_test_count),
    GmIngotCount = int_to_bin(Record#db_player_charge_info_record.gm_ingot_count),
    GmChargeCount = int_to_bin(Record#db_player_charge_info_record.gm_charge_count),
    GmChargeNovipCount = int_to_bin(Record#db_player_charge_info_record.gm_charge_novip_count),
    MaxMoney = float_to_bin(Record#db_player_charge_info_record.max_money),
    MinMoney = float_to_bin(Record#db_player_charge_info_record.min_money),
    LastTime = int_to_bin(Record#db_player_charge_info_record.last_time),
    FirstTime = int_to_bin(Record#db_player_charge_info_record.first_time),
    RecordTime = int_to_bin(Record#db_player_charge_info_record.record_time),
    Channel = list_to_bin(Record#db_player_charge_info_record.channel),
    IsShare = int_to_bin(Record#db_player_charge_info_record.is_share),
    RefusedMoney = float_to_bin(Record#db_player_charge_info_record.refused_money),
    <<
        "INSERT INTO `player_charge_info_record` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`part_id` = ", PartId/binary,
        " ,`server_id` = ", ServerId/binary,
        " ,`total_money` = ", TotalMoney/binary,
        " ,`charge_count` = ", ChargeCount/binary,
        " ,`charge_test_count` = ", ChargeTestCount/binary,
        " ,`gm_ingot_count` = ", GmIngotCount/binary,
        " ,`gm_charge_count` = ", GmChargeCount/binary,
        " ,`gm_charge_novip_count` = ", GmChargeNovipCount/binary,
        " ,`max_money` = ", MaxMoney/binary,
        " ,`min_money` = ", MinMoney/binary,
        " ,`last_time` = ", LastTime/binary,
        " ,`first_time` = ", FirstTime/binary,
        " ,`record_time` = ", RecordTime/binary,
        " ,`channel` = ", Channel/binary,
        " ,`is_share` = ", IsShare/binary,
        " ,`refused_money` = ", RefusedMoney/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_charge_info_record, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_charge_info_record , update, NewRecord, OldRecord, get_changes(19, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_charge_info_record, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_charge_info_record, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_charge_info_record, NewRecord, Changes, [<< "UPDATE `player_charge_info_record` SET ">>])));
tran_to_sql ({_EtsTable, player_charge_info_record, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_charge_info_record.player_id),
    <<
        "DELETE FROM `player_charge_info_record` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_charge_info_record, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_charge_info_record`;\n"
    >>;
tran_to_sql ({_EtsTable,player_charge_activity, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_charge_activity.player_id),
    Type = int_to_bin(Record#db_player_charge_activity.type),
    Id = int_to_bin(Record#db_player_charge_activity.id),
    StartTime = int_to_bin(Record#db_player_charge_activity.start_time),
    Value = int_to_bin(Record#db_player_charge_activity.value),
    State = int_to_bin(Record#db_player_charge_activity.state),
    ChangeTime = int_to_bin(Record#db_player_charge_activity.change_time),
    <<
        "INSERT INTO `player_charge_activity` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`type` = ", Type/binary,
        " ,`id` = ", Id/binary,
        " ,`start_time` = ", StartTime/binary,
        " ,`value` = ", Value/binary,
        " ,`state` = ", State/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_charge_activity, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_charge_activity , update, NewRecord, OldRecord, get_changes(9, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_charge_activity, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_charge_activity, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_charge_activity, NewRecord, Changes, [<< "UPDATE `player_charge_activity` SET ">>])));
tran_to_sql ({_EtsTable, player_charge_activity, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_charge_activity.player_id),
    Type = int_to_bin(Record#db_player_charge_activity.type),
    Id = int_to_bin(Record#db_player_charge_activity.id),
    <<
        "DELETE FROM `player_charge_activity` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `type` = ", Type/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_charge_activity, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_charge_activity`;\n"
    >>;
tran_to_sql ({_EtsTable,player_card_title, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_card_title.player_id),
    CardTitleId = int_to_bin(Record#db_player_card_title.card_title_id),
    <<
        "INSERT INTO `player_card_title` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`card_title_id` = ", CardTitleId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_card_title, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_card_title , update, NewRecord, OldRecord, get_changes(4, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_card_title, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_card_title, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_card_title, NewRecord, Changes, [<< "UPDATE `player_card_title` SET ">>])));
tran_to_sql ({_EtsTable, player_card_title, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_card_title.player_id),
    CardTitleId = int_to_bin(Record#db_player_card_title.card_title_id),
    <<
        "DELETE FROM `player_card_title` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `card_title_id` = ", CardTitleId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_card_title, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_card_title`;\n"
    >>;
tran_to_sql ({_EtsTable,player_card_summon, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_card_summon.player_id),
    OnceCnt = int_to_bin(Record#db_player_card_summon.once_cnt),
    TenTimesCnt = int_to_bin(Record#db_player_card_summon.ten_times_cnt),
    <<
        "INSERT INTO `player_card_summon` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`once_cnt` = ", OnceCnt/binary,
        " ,`ten_times_cnt` = ", TenTimesCnt/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_card_summon, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_card_summon , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_card_summon, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_card_summon, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_card_summon, NewRecord, Changes, [<< "UPDATE `player_card_summon` SET ">>])));
tran_to_sql ({_EtsTable, player_card_summon, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_card_summon.player_id),
    <<
        "DELETE FROM `player_card_summon` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_card_summon, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_card_summon`;\n"
    >>;
tran_to_sql ({_EtsTable,player_card_book, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_card_book.player_id),
    CardBookId = int_to_bin(Record#db_player_card_book.card_book_id),
    <<
        "INSERT INTO `player_card_book` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`card_book_id` = ", CardBookId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_card_book, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_card_book , update, NewRecord, OldRecord, get_changes(4, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_card_book, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_card_book, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_card_book, NewRecord, Changes, [<< "UPDATE `player_card_book` SET ">>])));
tran_to_sql ({_EtsTable, player_card_book, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_card_book.player_id),
    CardBookId = int_to_bin(Record#db_player_card_book.card_book_id),
    <<
        "DELETE FROM `player_card_book` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `card_book_id` = ", CardBookId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_card_book, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_card_book`;\n"
    >>;
tran_to_sql ({_EtsTable,player_card, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_card.player_id),
    CardId = int_to_bin(Record#db_player_card.card_id),
    State = int_to_bin(Record#db_player_card.state),
    Num = int_to_bin(Record#db_player_card.num),
    <<
        "INSERT INTO `player_card` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`card_id` = ", CardId/binary,
        " ,`state` = ", State/binary,
        " ,`num` = ", Num/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_card, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_card , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_card, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_card, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_card, NewRecord, Changes, [<< "UPDATE `player_card` SET ">>])));
tran_to_sql ({_EtsTable, player_card, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_card.player_id),
    CardId = int_to_bin(Record#db_player_card.card_id),
    <<
        "DELETE FROM `player_card` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `card_id` = ", CardId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_card, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_card`;\n"
    >>;
tran_to_sql ({_EtsTable,player_bounty_task, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_bounty_task.player_id),
    Id = int_to_bin(Record#db_player_bounty_task.id),
    Value = int_to_bin(Record#db_player_bounty_task.value),
    State = int_to_bin(Record#db_player_bounty_task.state),
    ChangeTime = int_to_bin(Record#db_player_bounty_task.change_time),
    <<
        "INSERT INTO `player_bounty_task` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`id` = ", Id/binary,
        " ,`value` = ", Value/binary,
        " ,`state` = ", State/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_bounty_task, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_bounty_task , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_bounty_task, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_bounty_task, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_bounty_task, NewRecord, Changes, [<< "UPDATE `player_bounty_task` SET ">>])));
tran_to_sql ({_EtsTable, player_bounty_task, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_bounty_task.player_id),
    Id = int_to_bin(Record#db_player_bounty_task.id),
    <<
        "DELETE FROM `player_bounty_task` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_bounty_task, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_bounty_task`;\n"
    >>;
tran_to_sql ({_EtsTable,player_adjust_rebound, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_adjust_rebound.player_id),
    ReboundType = int_to_bin(Record#db_player_adjust_rebound.rebound_type),
    TriggerTimes = int_to_bin(Record#db_player_adjust_rebound.trigger_times),
    TriggerTime = int_to_bin(Record#db_player_adjust_rebound.trigger_time),
    <<
        "INSERT INTO `player_adjust_rebound` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`rebound_type` = ", ReboundType/binary,
        " ,`trigger_times` = ", TriggerTimes/binary,
        " ,`trigger_time` = ", TriggerTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_adjust_rebound, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_adjust_rebound , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_adjust_rebound, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_adjust_rebound, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_adjust_rebound, NewRecord, Changes, [<< "UPDATE `player_adjust_rebound` SET ">>])));
tran_to_sql ({_EtsTable, player_adjust_rebound, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_adjust_rebound.player_id),
    ReboundType = int_to_bin(Record#db_player_adjust_rebound.rebound_type),
    <<
        "DELETE FROM `player_adjust_rebound` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `rebound_type` = ", ReboundType/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_adjust_rebound, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_adjust_rebound`;\n"
    >>;
tran_to_sql ({_EtsTable,player_activity_task, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_activity_task.player_id),
    ActivityId = int_to_bin(Record#db_player_activity_task.activity_id),
    TaskType = int_to_bin(Record#db_player_activity_task.task_type),
    Value = int_to_bin(Record#db_player_activity_task.value),
    ChangeTime = int_to_bin(Record#db_player_activity_task.change_time),
    <<
        "INSERT INTO `player_activity_task` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`activity_id` = ", ActivityId/binary,
        " ,`task_type` = ", TaskType/binary,
        " ,`value` = ", Value/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_activity_task, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_activity_task , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_activity_task, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_activity_task, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_activity_task, NewRecord, Changes, [<< "UPDATE `player_activity_task` SET ">>])));
tran_to_sql ({_EtsTable, player_activity_task, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_activity_task.player_id),
    ActivityId = int_to_bin(Record#db_player_activity_task.activity_id),
    TaskType = int_to_bin(Record#db_player_activity_task.task_type),
    <<
        "DELETE FROM `player_activity_task` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `activity_id` = ", ActivityId/binary,
        " and `task_type` = ", TaskType/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_activity_task, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_activity_task`;\n"
    >>;
tran_to_sql ({_EtsTable,player_activity_info, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_activity_info.player_id),
    ActivityId = int_to_bin(Record#db_player_activity_info.activity_id),
    State = int_to_bin(Record#db_player_activity_info.state),
    LastOpenTime = int_to_bin(Record#db_player_activity_info.last_open_time),
    LastCloseTime = int_to_bin(Record#db_player_activity_info.last_close_time),
    ConfigOpenTime = int_to_bin(Record#db_player_activity_info.config_open_time),
    ConfigCloseTime = int_to_bin(Record#db_player_activity_info.config_close_time),
    <<
        "INSERT INTO `player_activity_info` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`activity_id` = ", ActivityId/binary,
        " ,`state` = ", State/binary,
        " ,`last_open_time` = ", LastOpenTime/binary,
        " ,`last_close_time` = ", LastCloseTime/binary,
        " ,`config_open_time` = ", ConfigOpenTime/binary,
        " ,`config_close_time` = ", ConfigCloseTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_activity_info, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_activity_info , update, NewRecord, OldRecord, get_changes(9, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_activity_info, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_activity_info, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_activity_info, NewRecord, Changes, [<< "UPDATE `player_activity_info` SET ">>])));
tran_to_sql ({_EtsTable, player_activity_info, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_activity_info.player_id),
    ActivityId = int_to_bin(Record#db_player_activity_info.activity_id),
    <<
        "DELETE FROM `player_activity_info` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `activity_id` = ", ActivityId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_activity_info, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_activity_info`;\n"
    >>;
tran_to_sql ({_EtsTable,player_activity_game_info, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_activity_game_info.player_id),
    ActivityId = int_to_bin(Record#db_player_activity_game_info.activity_id),
    GameId = int_to_bin(Record#db_player_activity_game_info.game_id),
    ActivityStartTime = int_to_bin(Record#db_player_activity_game_info.activity_start_time),
    State = int_to_bin(Record#db_player_activity_game_info.state),
    Times = int_to_bin(Record#db_player_activity_game_info.times),
    ChangeTime = int_to_bin(Record#db_player_activity_game_info.change_time),
    <<
        "INSERT INTO `player_activity_game_info` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`activity_id` = ", ActivityId/binary,
        " ,`game_id` = ", GameId/binary,
        " ,`activity_start_time` = ", ActivityStartTime/binary,
        " ,`state` = ", State/binary,
        " ,`times` = ", Times/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_activity_game_info, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_activity_game_info , update, NewRecord, OldRecord, get_changes(9, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_activity_game_info, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_activity_game_info, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_activity_game_info, NewRecord, Changes, [<< "UPDATE `player_activity_game_info` SET ">>])));
tran_to_sql ({_EtsTable, player_activity_game_info, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_activity_game_info.player_id),
    ActivityId = int_to_bin(Record#db_player_activity_game_info.activity_id),
    GameId = int_to_bin(Record#db_player_activity_game_info.game_id),
    <<
        "DELETE FROM `player_activity_game_info` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `activity_id` = ", ActivityId/binary,
        " and `game_id` = ", GameId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_activity_game_info, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_activity_game_info`;\n"
    >>;
tran_to_sql ({_EtsTable,player_activity_game, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_activity_game.player_id),
    ActivityId = int_to_bin(Record#db_player_activity_game.activity_id),
    ActivityStartTime = int_to_bin(Record#db_player_activity_game.activity_start_time),
    Value = int_to_bin(Record#db_player_activity_game.value),
    ChangeTime = int_to_bin(Record#db_player_activity_game.change_time),
    <<
        "INSERT INTO `player_activity_game` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`activity_id` = ", ActivityId/binary,
        " ,`activity_start_time` = ", ActivityStartTime/binary,
        " ,`value` = ", Value/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_activity_game, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_activity_game , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_activity_game, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_activity_game, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_activity_game, NewRecord, Changes, [<< "UPDATE `player_activity_game` SET ">>])));
tran_to_sql ({_EtsTable, player_activity_game, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_activity_game.player_id),
    ActivityId = int_to_bin(Record#db_player_activity_game.activity_id),
    <<
        "DELETE FROM `player_activity_game` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `activity_id` = ", ActivityId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_activity_game, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_activity_game`;\n"
    >>;
tran_to_sql ({_EtsTable,player_activity_condition, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_activity_condition.player_id),
    ActivityId = int_to_bin(Record#db_player_activity_condition.activity_id),
    ConditionId = int_to_bin(Record#db_player_activity_condition.condition_id),
    Value = int_to_bin(Record#db_player_activity_condition.value),
    ActivityTime = int_to_bin(Record#db_player_activity_condition.activity_time),
    <<
        "INSERT INTO `player_activity_condition` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`activity_id` = ", ActivityId/binary,
        " ,`condition_id` = ", ConditionId/binary,
        " ,`value` = ", Value/binary,
        " ,`activity_time` = ", ActivityTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_activity_condition, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_activity_condition , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_activity_condition, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_activity_condition, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_activity_condition, NewRecord, Changes, [<< "UPDATE `player_activity_condition` SET ">>])));
tran_to_sql ({_EtsTable, player_activity_condition, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_activity_condition.player_id),
    ActivityId = int_to_bin(Record#db_player_activity_condition.activity_id),
    ConditionId = int_to_bin(Record#db_player_activity_condition.condition_id),
    <<
        "DELETE FROM `player_activity_condition` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `activity_id` = ", ActivityId/binary,
        " and `condition_id` = ", ConditionId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_activity_condition, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_activity_condition`;\n"
    >>;
tran_to_sql ({_EtsTable,player_achievement, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_player_achievement.player_id),
    Type = int_to_bin(Record#db_player_achievement.type),
    Id = int_to_bin(Record#db_player_achievement.id),
    State = int_to_bin(Record#db_player_achievement.state),
    ChangeTime = int_to_bin(Record#db_player_achievement.change_time),
    <<
        "INSERT INTO `player_achievement` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`type` = ", Type/binary,
        " ,`id` = ", Id/binary,
        " ,`state` = ", State/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_achievement, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player_achievement , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player_achievement, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player_achievement, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player_achievement, NewRecord, Changes, [<< "UPDATE `player_achievement` SET ">>])));
tran_to_sql ({_EtsTable, player_achievement, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_player_achievement.player_id),
    Type = int_to_bin(Record#db_player_achievement.type),
    <<
        "DELETE FROM `player_achievement` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `type` = ", Type/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player_achievement, delete_all, _Record}) ->
    <<
        "DELETE FROM `player_achievement`;\n"
    >>;
tran_to_sql ({_EtsTable,player, insert, Record}) ->
    Id = int_to_bin(Record#db_player.id),
    AccId = list_to_bin(Record#db_player.acc_id),
    ServerId = list_to_bin(Record#db_player.server_id),
    Nickname = list_to_bin(Record#db_player.nickname),
    Sex = int_to_bin(Record#db_player.sex),
    ForbidType = int_to_bin(Record#db_player.forbid_type),
    ForbidTime = int_to_bin(Record#db_player.forbid_time),
    RegTime = int_to_bin(Record#db_player.reg_time),
    LastLoginTime = int_to_bin(Record#db_player.last_login_time),
    LastOfflineTime = int_to_bin(Record#db_player.last_offline_time),
    TotalOnlineTime = int_to_bin(Record#db_player.total_online_time),
    LastLoginIp = list_to_bin(Record#db_player.last_login_ip),
    From = list_to_bin(Record#db_player.from),
    LoginTimes = int_to_bin(Record#db_player.login_times),
    CumulativeDay = int_to_bin(Record#db_player.cumulative_day),
    ContinuousDay = int_to_bin(Record#db_player.continuous_day),
    TotalRechargeIngot = int_to_bin(Record#db_player.total_recharge_ingot),
    LastRechargeTime = int_to_bin(Record#db_player.last_recharge_time),
    RechargeTimes = int_to_bin(Record#db_player.recharge_times),
    IsPassFcm = int_to_bin(Record#db_player.is_pass_fcm),
    Type = int_to_bin(Record#db_player.type),
    IsOnline = int_to_bin(Record#db_player.is_online),
    Channel = list_to_bin(Record#db_player.channel),
    FriendCode = list_to_bin(Record#db_player.friend_code),
    OauthSource = list_to_bin(Record#db_player.oauth_source),
    <<
        "INSERT INTO `player` SET "
        " `id` = ", Id/binary,
        " ,`acc_id` = ", AccId/binary,
        " ,`server_id` = ", ServerId/binary,
        " ,`nickname` = ", Nickname/binary,
        " ,`sex` = ", Sex/binary,
        " ,`forbid_type` = ", ForbidType/binary,
        " ,`forbid_time` = ", ForbidTime/binary,
        " ,`reg_time` = ", RegTime/binary,
        " ,`last_login_time` = ", LastLoginTime/binary,
        " ,`last_offline_time` = ", LastOfflineTime/binary,
        " ,`total_online_time` = ", TotalOnlineTime/binary,
        " ,`last_login_ip` = ", LastLoginIp/binary,
        " ,`from` = ", From/binary,
        " ,`login_times` = ", LoginTimes/binary,
        " ,`cumulative_day` = ", CumulativeDay/binary,
        " ,`continuous_day` = ", ContinuousDay/binary,
        " ,`total_recharge_ingot` = ", TotalRechargeIngot/binary,
        " ,`last_recharge_time` = ", LastRechargeTime/binary,
        " ,`recharge_times` = ", RechargeTimes/binary,
        " ,`is_pass_fcm` = ", IsPassFcm/binary,
        " ,`type` = ", Type/binary,
        " ,`is_online` = ", IsOnline/binary,
        " ,`channel` = ", Channel/binary,
        " ,`friend_code` = ", FriendCode/binary,
        " ,`oauth_source` = ", OauthSource/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, player , update, NewRecord, OldRecord, get_changes(27, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, player, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, player, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(player, NewRecord, Changes, [<< "UPDATE `player` SET ">>])));
tran_to_sql ({_EtsTable, player, delete, Record}) ->
    Id = int_to_bin(Record#db_player.id),
    <<
        "DELETE FROM `player` WHERE "
        "`id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, player, delete_all, _Record}) ->
    <<
        "DELETE FROM `player`;\n"
    >>;
tran_to_sql({phone_unique_id , insert, Record}) ->
    PlatformId = list_to_bin(Record#db_phone_unique_id.platform_id),
    PhoneUniqueId = list_to_bin(Record#db_phone_unique_id.phone_unique_id),
    CreatedTime = int_to_bin(Record#db_phone_unique_id.created_time),
    <<
        "INSERT INTO `phone_unique_id` SET "
        " `platform_id` = ", PlatformId/binary,
        " ,`phone_unique_id` = ", PhoneUniqueId/binary,
        " ,`created_time` = ", CreatedTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable,one_vs_one_rank_data, insert, Record}) ->
    Type = int_to_bin(Record#db_one_vs_one_rank_data.type),
    PlayerId = int_to_bin(Record#db_one_vs_one_rank_data.player_id),
    Score = int_to_bin(Record#db_one_vs_one_rank_data.score),
    Time = int_to_bin(Record#db_one_vs_one_rank_data.time),
    <<
        "INSERT INTO `one_vs_one_rank_data` SET "
        " `type` = ", Type/binary,
        " ,`player_id` = ", PlayerId/binary,
        " ,`score` = ", Score/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, one_vs_one_rank_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, one_vs_one_rank_data , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, one_vs_one_rank_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, one_vs_one_rank_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(one_vs_one_rank_data, NewRecord, Changes, [<< "UPDATE `one_vs_one_rank_data` SET ">>])));
tran_to_sql ({_EtsTable, one_vs_one_rank_data, delete, Record}) ->
    Type = int_to_bin(Record#db_one_vs_one_rank_data.type),
    PlayerId = int_to_bin(Record#db_one_vs_one_rank_data.player_id),
    <<
        "DELETE FROM `one_vs_one_rank_data` WHERE "
        "`type` = ", Type/binary,
        " and `player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, one_vs_one_rank_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `one_vs_one_rank_data`;\n"
    >>;
tran_to_sql ({_EtsTable,oauth_order_log, insert, Record}) ->
    OrderId = list_to_bin(Record#db_oauth_order_log.order_id),
    PlayerId = int_to_bin(Record#db_oauth_order_log.player_id),
    BuyerPlayerId = int_to_bin(Record#db_oauth_order_log.buyer_player_id),
    PropId = int_to_bin(Record#db_oauth_order_log.prop_id),
    ChangeType = int_to_bin(Record#db_oauth_order_log.change_type),
    ChangeNum = int_to_bin(Record#db_oauth_order_log.change_num),
    Status = int_to_bin(Record#db_oauth_order_log.status),
    Amount = float_to_bin(Record#db_oauth_order_log.amount),
    Ip = list_to_bin(Record#db_oauth_order_log.ip),
    CreateTime = int_to_bin(Record#db_oauth_order_log.create_time),
    UpdateTime = int_to_bin(Record#db_oauth_order_log.update_time),
    <<
        "INSERT INTO `oauth_order_log` SET "
        " `order_id` = ", OrderId/binary,
        " ,`player_id` = ", PlayerId/binary,
        " ,`buyer_player_id` = ", BuyerPlayerId/binary,
        " ,`prop_id` = ", PropId/binary,
        " ,`change_type` = ", ChangeType/binary,
        " ,`change_num` = ", ChangeNum/binary,
        " ,`status` = ", Status/binary,
        " ,`amount` = ", Amount/binary,
        " ,`ip` = ", Ip/binary,
        " ,`create_time` = ", CreateTime/binary,
        " ,`update_time` = ", UpdateTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, oauth_order_log, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, oauth_order_log , update, NewRecord, OldRecord, get_changes(13, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, oauth_order_log, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, oauth_order_log, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(oauth_order_log, NewRecord, Changes, [<< "UPDATE `oauth_order_log` SET ">>])));
tran_to_sql ({_EtsTable, oauth_order_log, delete, Record}) ->
    OrderId = list_to_bin(Record#db_oauth_order_log.order_id),
    <<
        "DELETE FROM `oauth_order_log` WHERE "
        "`order_id` = ", OrderId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, oauth_order_log, delete_all, _Record}) ->
    <<
        "DELETE FROM `oauth_order_log`;\n"
    >>;
tran_to_sql ({_EtsTable,mission_ranking, insert, Record}) ->
    MissionType = int_to_bin(Record#db_mission_ranking.mission_type),
    MissionId = int_to_bin(Record#db_mission_ranking.mission_id),
    Id = int_to_bin(Record#db_mission_ranking.id),
    PlayerId = int_to_bin(Record#db_mission_ranking.player_id),
    RankId = int_to_bin(Record#db_mission_ranking.rank_id),
    Nickname = list_to_bin(Record#db_mission_ranking.nickname),
    Hurt = int_to_bin(Record#db_mission_ranking.hurt),
    Time = int_to_bin(Record#db_mission_ranking.time),
    <<
        "INSERT INTO `mission_ranking` SET "
        " `mission_type` = ", MissionType/binary,
        " ,`mission_id` = ", MissionId/binary,
        " ,`id` = ", Id/binary,
        " ,`player_id` = ", PlayerId/binary,
        " ,`rank_id` = ", RankId/binary,
        " ,`nickname` = ", Nickname/binary,
        " ,`hurt` = ", Hurt/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, mission_ranking, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, mission_ranking , update, NewRecord, OldRecord, get_changes(10, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, mission_ranking, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, mission_ranking, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(mission_ranking, NewRecord, Changes, [<< "UPDATE `mission_ranking` SET ">>])));
tran_to_sql ({_EtsTable, mission_ranking, delete, Record}) ->
    MissionType = int_to_bin(Record#db_mission_ranking.mission_type),
    MissionId = int_to_bin(Record#db_mission_ranking.mission_id),
    Id = int_to_bin(Record#db_mission_ranking.id),
    PlayerId = int_to_bin(Record#db_mission_ranking.player_id),
    <<
        "DELETE FROM `mission_ranking` WHERE "
        "`mission_type` = ", MissionType/binary,
        " and `mission_id` = ", MissionId/binary,
        " and `id` = ", Id/binary,
        " and `player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, mission_ranking, delete_all, _Record}) ->
    <<
        "DELETE FROM `mission_ranking`;\n"
    >>;
tran_to_sql ({_EtsTable,mission_guess_boss, insert, Record}) ->
    Id = int_to_bin(Record#db_mission_guess_boss.id),
    BossId = int_to_bin(Record#db_mission_guess_boss.boss_id),
    PlayerTotalCost = int_to_bin(Record#db_mission_guess_boss.player_total_cost),
    PlayerTotalAward = int_to_bin(Record#db_mission_guess_boss.player_total_award),
    Time = int_to_bin(Record#db_mission_guess_boss.time),
    <<
        "INSERT INTO `mission_guess_boss` SET "
        " `id` = ", Id/binary,
        " ,`boss_id` = ", BossId/binary,
        " ,`player_total_cost` = ", PlayerTotalCost/binary,
        " ,`player_total_award` = ", PlayerTotalAward/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, mission_guess_boss, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, mission_guess_boss , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, mission_guess_boss, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, mission_guess_boss, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(mission_guess_boss, NewRecord, Changes, [<< "UPDATE `mission_guess_boss` SET ">>])));
tran_to_sql ({_EtsTable, mission_guess_boss, delete, Record}) ->
    Id = int_to_bin(Record#db_mission_guess_boss.id),
    <<
        "DELETE FROM `mission_guess_boss` WHERE "
        "`id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, mission_guess_boss, delete_all, _Record}) ->
    <<
        "DELETE FROM `mission_guess_boss`;\n"
    >>;
tran_to_sql ({_EtsTable,match_scene_data, insert, Record}) ->
    Id = int_to_bin(Record#db_match_scene_data.id),
    PlayerId = int_to_bin(Record#db_match_scene_data.player_id),
    Score = int_to_bin(Record#db_match_scene_data.score),
    Award = int_to_bin(Record#db_match_scene_data.award),
    LastTime = int_to_bin(Record#db_match_scene_data.last_time),
    <<
        "INSERT INTO `match_scene_data` SET "
        " `id` = ", Id/binary,
        " ,`player_id` = ", PlayerId/binary,
        " ,`score` = ", Score/binary,
        " ,`award` = ", Award/binary,
        " ,`last_time` = ", LastTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, match_scene_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, match_scene_data , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, match_scene_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, match_scene_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(match_scene_data, NewRecord, Changes, [<< "UPDATE `match_scene_data` SET ">>])));
tran_to_sql ({_EtsTable, match_scene_data, delete, Record}) ->
    Id = int_to_bin(Record#db_match_scene_data.id),
    <<
        "DELETE FROM `match_scene_data` WHERE "
        "`id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, match_scene_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `match_scene_data`;\n"
    >>;
tran_to_sql ({_EtsTable,login_notice, insert, Record}) ->
    PlatformId = list_to_bin(Record#db_login_notice.platform_id),
    ChannelId = list_to_bin(Record#db_login_notice.channel_id),
    Content = list_to_bin(Record#db_login_notice.content),
    <<
        "INSERT INTO `login_notice` SET "
        " `platform_id` = ", PlatformId/binary,
        " ,`channel_id` = ", ChannelId/binary,
        " ,`content` = ", Content/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, login_notice, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, login_notice , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, login_notice, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, login_notice, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(login_notice, NewRecord, Changes, [<< "UPDATE `login_notice` SET ">>])));
tran_to_sql ({_EtsTable, login_notice, delete, Record}) ->
    PlatformId = list_to_bin(Record#db_login_notice.platform_id),
    ChannelId = list_to_bin(Record#db_login_notice.channel_id),
    <<
        "DELETE FROM `login_notice` WHERE "
        "`platform_id` = ", PlatformId/binary,
        " and `channel_id` = ", ChannelId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, login_notice, delete_all, _Record}) ->
    <<
        "DELETE FROM `login_notice`;\n"
    >>;
tran_to_sql ({_EtsTable,laba_adjust, insert, Record}) ->
    LabaId = int_to_bin(Record#db_laba_adjust.laba_id),
    CostRate = int_to_bin(Record#db_laba_adjust.cost_rate),
    Pool = int_to_bin(Record#db_laba_adjust.pool),
    <<
        "INSERT INTO `laba_adjust` SET "
        " `laba_id` = ", LabaId/binary,
        " ,`cost_rate` = ", CostRate/binary,
        " ,`pool` = ", Pool/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, laba_adjust, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, laba_adjust , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, laba_adjust, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, laba_adjust, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(laba_adjust, NewRecord, Changes, [<< "UPDATE `laba_adjust` SET ">>])));
tran_to_sql ({_EtsTable, laba_adjust, delete, Record}) ->
    LabaId = int_to_bin(Record#db_laba_adjust.laba_id),
    CostRate = int_to_bin(Record#db_laba_adjust.cost_rate),
    <<
        "DELETE FROM `laba_adjust` WHERE "
        "`laba_id` = ", LabaId/binary,
        " and `cost_rate` = ", CostRate/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, laba_adjust, delete_all, _Record}) ->
    <<
        "DELETE FROM `laba_adjust`;\n"
    >>;
tran_to_sql ({_EtsTable,jiangjinchi, insert, Record}) ->
    SceneId = int_to_bin(Record#db_jiangjinchi.scene_id),
    Pool = int_to_bin(Record#db_jiangjinchi.pool),
    ChangeTime = int_to_bin(Record#db_jiangjinchi.change_time),
    <<
        "INSERT INTO `jiangjinchi` SET "
        " `scene_id` = ", SceneId/binary,
        " ,`pool` = ", Pool/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, jiangjinchi, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, jiangjinchi , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, jiangjinchi, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, jiangjinchi, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(jiangjinchi, NewRecord, Changes, [<< "UPDATE `jiangjinchi` SET ">>])));
tran_to_sql ({_EtsTable, jiangjinchi, delete, Record}) ->
    SceneId = int_to_bin(Record#db_jiangjinchi.scene_id),
    <<
        "DELETE FROM `jiangjinchi` WHERE "
        "`scene_id` = ", SceneId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, jiangjinchi, delete_all, _Record}) ->
    <<
        "DELETE FROM `jiangjinchi`;\n"
    >>;
tran_to_sql({global_player , insert, Record}) ->
    Id = int_to_bin(Record#db_global_player.id),
    Account = list_to_bin(Record#db_global_player.account),
    CreateTime = int_to_bin(Record#db_global_player.create_time),
    PlatformId = list_to_bin(Record#db_global_player.platform_id),
    ServerId = list_to_bin(Record#db_global_player.server_id),
    Channel = list_to_bin(Record#db_global_player.channel),
    Nickanme = list_to_bin(Record#db_global_player.nickanme),
    <<
        "INSERT INTO `global_player` SET "
        " `id` = ", Id/binary,
        " ,`account` = ", Account/binary,
        " ,`create_time` = ", CreateTime/binary,
        " ,`platform_id` = ", PlatformId/binary,
        " ,`server_id` = ", ServerId/binary,
        " ,`channel` = ", Channel/binary,
        " ,`nickanme` = ", Nickanme/binary,
        ";\n"
    >>;
tran_to_sql({global_account , insert, Record}) ->
    PlatformId = list_to_bin(Record#db_global_account.platform_id),
    Account = list_to_bin(Record#db_global_account.account),
    RecentServerList = list_to_bin(Record#db_global_account.recent_server_list),
    Promote = list_to_bin(Record#db_global_account.promote),
    Type = int_to_bin(Record#db_global_account.type),
    ForbidType = int_to_bin(Record#db_global_account.forbid_type),
    ForbidTime = int_to_bin(Record#db_global_account.forbid_time),
    AppId = list_to_bin(Record#db_global_account.app_id),
    Region = list_to_bin(Record#db_global_account.region),
    RegistrationId = list_to_bin(Record#db_global_account.registration_id),
    Mobile = list_to_bin(Record#db_global_account.mobile),
    <<
        "INSERT INTO `global_account` SET "
        " `platform_id` = ", PlatformId/binary,
        " ,`account` = ", Account/binary,
        " ,`recent_server_list` = ", RecentServerList/binary,
        " ,`promote` = ", Promote/binary,
        " ,`type` = ", Type/binary,
        " ,`forbid_type` = ", ForbidType/binary,
        " ,`forbid_time` = ", ForbidTime/binary,
        " ,`app_id` = ", AppId/binary,
        " ,`region` = ", Region/binary,
        " ,`registration_id` = ", RegistrationId/binary,
        " ,`mobile` = ", Mobile/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable,gift_code_type, insert, Record}) ->
    Type = int_to_bin(Record#db_gift_code_type.type),
    Name = list_to_bin(Record#db_gift_code_type.name),
    PlatformId = list_to_bin(Record#db_gift_code_type.platform_id),
    ChannelList = list_to_bin(Record#db_gift_code_type.channel_list),
    AwardList = list_to_bin(Record#db_gift_code_type.award_list),
    UserId = int_to_bin(Record#db_gift_code_type.user_id),
    Kind = int_to_bin(Record#db_gift_code_type.kind),
    Num = int_to_bin(Record#db_gift_code_type.num),
    AllowRoleRepeatedGet = int_to_bin(Record#db_gift_code_type.allow_role_repeated_get),
    VipLimit = int_to_bin(Record#db_gift_code_type.vip_limit),
    LevelLimit = int_to_bin(Record#db_gift_code_type.level_limit),
    ExpireTime = int_to_bin(Record#db_gift_code_type.expire_time),
    UpdateTime = int_to_bin(Record#db_gift_code_type.update_time),
    <<
        "INSERT INTO `gift_code_type` SET "
        " `type` = ", Type/binary,
        " ,`name` = ", Name/binary,
        " ,`platform_id` = ", PlatformId/binary,
        " ,`channel_list` = ", ChannelList/binary,
        " ,`award_list` = ", AwardList/binary,
        " ,`user_id` = ", UserId/binary,
        " ,`kind` = ", Kind/binary,
        " ,`num` = ", Num/binary,
        " ,`allow_role_repeated_get` = ", AllowRoleRepeatedGet/binary,
        " ,`vip_limit` = ", VipLimit/binary,
        " ,`level_limit` = ", LevelLimit/binary,
        " ,`expire_time` = ", ExpireTime/binary,
        " ,`update_time` = ", UpdateTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, gift_code_type, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, gift_code_type , update, NewRecord, OldRecord, get_changes(15, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, gift_code_type, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, gift_code_type, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(gift_code_type, NewRecord, Changes, [<< "UPDATE `gift_code_type` SET ">>])));
tran_to_sql ({_EtsTable, gift_code_type, delete, Record}) ->
    Type = int_to_bin(Record#db_gift_code_type.type),
    <<
        "DELETE FROM `gift_code_type` WHERE "
        "`type` = ", Type/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, gift_code_type, delete_all, _Record}) ->
    <<
        "DELETE FROM `gift_code_type`;\n"
    >>;
tran_to_sql ({_EtsTable,gift_code, insert, Record}) ->
    GiftCode = list_to_bin(Record#db_gift_code.gift_code),
    GiftCodeType = int_to_bin(Record#db_gift_code.gift_code_type),
    <<
        "INSERT INTO `gift_code` SET "
        " `gift_code` = ", GiftCode/binary,
        " ,`gift_code_type` = ", GiftCodeType/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, gift_code, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, gift_code , update, NewRecord, OldRecord, get_changes(4, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, gift_code, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, gift_code, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(gift_code, NewRecord, Changes, [<< "UPDATE `gift_code` SET ">>])));
tran_to_sql ({_EtsTable, gift_code, delete, Record}) ->
    GiftCode = list_to_bin(Record#db_gift_code.gift_code),
    <<
        "DELETE FROM `gift_code` WHERE "
        "`gift_code` = ", GiftCode/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, gift_code, delete_all, _Record}) ->
    <<
        "DELETE FROM `gift_code`;\n"
    >>;
tran_to_sql ({_EtsTable,consume_statistics, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_consume_statistics.player_id),
    PropId = int_to_bin(Record#db_consume_statistics.prop_id),
    Type = int_to_bin(Record#db_consume_statistics.type),
    LogType = int_to_bin(Record#db_consume_statistics.log_type),
    Value = int_to_bin(Record#db_consume_statistics.value),
    SceneId = int_to_bin(Record#db_consume_statistics.scene_id),
    <<
        "INSERT INTO `consume_statistics` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`prop_id` = ", PropId/binary,
        " ,`type` = ", Type/binary,
        " ,`log_type` = ", LogType/binary,
        " ,`value` = ", Value/binary,
        " ,`scene_id` = ", SceneId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, consume_statistics, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, consume_statistics , update, NewRecord, OldRecord, get_changes(8, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, consume_statistics, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, consume_statistics, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(consume_statistics, NewRecord, Changes, [<< "UPDATE `consume_statistics` SET ">>])));
tran_to_sql ({_EtsTable, consume_statistics, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_consume_statistics.player_id),
    PropId = int_to_bin(Record#db_consume_statistics.prop_id),
    Type = int_to_bin(Record#db_consume_statistics.type),
    LogType = int_to_bin(Record#db_consume_statistics.log_type),
    SceneId = int_to_bin(Record#db_consume_statistics.scene_id),
    <<
        "DELETE FROM `consume_statistics` WHERE "
        "`player_id` = ", PlayerId/binary,
        " and `prop_id` = ", PropId/binary,
        " and `type` = ", Type/binary,
        " and `log_type` = ", LogType/binary,
        " and `scene_id` = ", SceneId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, consume_statistics, delete_all, _Record}) ->
    <<
        "DELETE FROM `consume_statistics`;\n"
    >>;
tran_to_sql ({_EtsTable,client_versin, insert, Record}) ->
    Version = list_to_bin(Record#db_client_versin.version),
    IsRelease = int_to_bin(Record#db_client_versin.is_release),
    Time = int_to_bin(Record#db_client_versin.time),
    <<
        "INSERT INTO `client_versin` SET "
        " `version` = ", Version/binary,
        " ,`is_release` = ", IsRelease/binary,
        " ,`time` = ", Time/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, client_versin, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, client_versin , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, client_versin, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, client_versin, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(client_versin, NewRecord, Changes, [<< "UPDATE `client_versin` SET ">>])));
tran_to_sql ({_EtsTable, client_versin, delete, Record}) ->
    Version = list_to_bin(Record#db_client_versin.version),
    <<
        "DELETE FROM `client_versin` WHERE "
        "`version` = ", Version/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, client_versin, delete_all, _Record}) ->
    <<
        "DELETE FROM `client_versin`;\n"
    >>;
tran_to_sql ({_EtsTable,charge_order_request_record, insert, Record}) ->
    OrderId = list_to_bin(Record#db_charge_order_request_record.order_id),
    ParamStr = list_to_bin(Record#db_charge_order_request_record.param_str),
    ChangeTime = int_to_bin(Record#db_charge_order_request_record.change_time),
    <<
        "INSERT INTO `charge_order_request_record` SET "
        " `order_id` = ", OrderId/binary,
        " ,`param_str` = ", ParamStr/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, charge_order_request_record, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, charge_order_request_record , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, charge_order_request_record, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, charge_order_request_record, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(charge_order_request_record, NewRecord, Changes, [<< "UPDATE `charge_order_request_record` SET ">>])));
tran_to_sql ({_EtsTable, charge_order_request_record, delete, Record}) ->
    OrderId = list_to_bin(Record#db_charge_order_request_record.order_id),
    <<
        "DELETE FROM `charge_order_request_record` WHERE "
        "`order_id` = ", OrderId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, charge_order_request_record, delete_all, _Record}) ->
    <<
        "DELETE FROM `charge_order_request_record`;\n"
    >>;
tran_to_sql ({_EtsTable,charge_ip_white_record, insert, Record}) ->
    Ip = list_to_bin(Record#db_charge_ip_white_record.ip),
    Name = list_to_bin(Record#db_charge_ip_white_record.name),
    State = int_to_bin(Record#db_charge_ip_white_record.state),
    RecordTime = int_to_bin(Record#db_charge_ip_white_record.record_time),
    <<
        "INSERT INTO `charge_ip_white_record` SET "
        " `ip` = ", Ip/binary,
        " ,`name` = ", Name/binary,
        " ,`state` = ", State/binary,
        " ,`record_time` = ", RecordTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, charge_ip_white_record, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, charge_ip_white_record , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, charge_ip_white_record, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, charge_ip_white_record, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(charge_ip_white_record, NewRecord, Changes, [<< "UPDATE `charge_ip_white_record` SET ">>])));
tran_to_sql ({_EtsTable, charge_ip_white_record, delete, Record}) ->
    Ip = list_to_bin(Record#db_charge_ip_white_record.ip),
    <<
        "DELETE FROM `charge_ip_white_record` WHERE "
        "`ip` = ", Ip/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, charge_ip_white_record, delete_all, _Record}) ->
    <<
        "DELETE FROM `charge_ip_white_record`;\n"
    >>;
tran_to_sql ({_EtsTable,charge_info_record, insert, Record}) ->
    OrderId = list_to_bin(Record#db_charge_info_record.order_id),
    ChargeType = int_to_bin(Record#db_charge_info_record.charge_type),
    Ip = list_to_bin(Record#db_charge_info_record.ip),
    PartId = list_to_bin(Record#db_charge_info_record.part_id),
    ServerId = list_to_bin(Record#db_charge_info_record.server_id),
    Node = list_to_bin(Record#db_charge_info_record.node),
    GameChargeId = int_to_bin(Record#db_charge_info_record.game_charge_id),
    ChargeItemId = int_to_bin(Record#db_charge_info_record.charge_item_id),
    AccId = list_to_bin(Record#db_charge_info_record.acc_id),
    PlayerId = int_to_bin(Record#db_charge_info_record.player_id),
    IsFirst = int_to_bin(Record#db_charge_info_record.is_first),
    CurrLevel = int_to_bin(Record#db_charge_info_record.curr_level),
    CurrTaskId = int_to_bin(Record#db_charge_info_record.curr_task_id),
    RegTime = int_to_bin(Record#db_charge_info_record.reg_time),
    FirstTime = int_to_bin(Record#db_charge_info_record.first_time),
    CurrPower = int_to_bin(Record#db_charge_info_record.curr_power),
    Money = float_to_bin(Record#db_charge_info_record.money),
    Ingot = int_to_bin(Record#db_charge_info_record.ingot),
    RecordTime = int_to_bin(Record#db_charge_info_record.record_time),
    Channel = list_to_bin(Record#db_charge_info_record.channel),
    Status = int_to_bin(Record#db_charge_info_record.status),
    Source = int_to_bin(Record#db_charge_info_record.source),
    Gold = int_to_bin(Record#db_charge_info_record.gold),
    Bounty = int_to_bin(Record#db_charge_info_record.bounty),
    Coupon = int_to_bin(Record#db_charge_info_record.coupon),
    <<
        "INSERT INTO `charge_info_record` SET "
        " `order_id` = ", OrderId/binary,
        " ,`charge_type` = ", ChargeType/binary,
        " ,`ip` = ", Ip/binary,
        " ,`part_id` = ", PartId/binary,
        " ,`server_id` = ", ServerId/binary,
        " ,`node` = ", Node/binary,
        " ,`game_charge_id` = ", GameChargeId/binary,
        " ,`charge_item_id` = ", ChargeItemId/binary,
        " ,`acc_id` = ", AccId/binary,
        " ,`player_id` = ", PlayerId/binary,
        " ,`is_first` = ", IsFirst/binary,
        " ,`curr_level` = ", CurrLevel/binary,
        " ,`curr_task_id` = ", CurrTaskId/binary,
        " ,`reg_time` = ", RegTime/binary,
        " ,`first_time` = ", FirstTime/binary,
        " ,`curr_power` = ", CurrPower/binary,
        " ,`money` = ", Money/binary,
        " ,`ingot` = ", Ingot/binary,
        " ,`record_time` = ", RecordTime/binary,
        " ,`channel` = ", Channel/binary,
        " ,`status` = ", Status/binary,
        " ,`source` = ", Source/binary,
        " ,`gold` = ", Gold/binary,
        " ,`bounty` = ", Bounty/binary,
        " ,`coupon` = ", Coupon/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, charge_info_record, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, charge_info_record , update, NewRecord, OldRecord, get_changes(27, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, charge_info_record, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, charge_info_record, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(charge_info_record, NewRecord, Changes, [<< "UPDATE `charge_info_record` SET ">>])));
tran_to_sql ({_EtsTable, charge_info_record, delete, Record}) ->
    OrderId = list_to_bin(Record#db_charge_info_record.order_id),
    <<
        "DELETE FROM `charge_info_record` WHERE "
        "`order_id` = ", OrderId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, charge_info_record, delete_all, _Record}) ->
    <<
        "DELETE FROM `charge_info_record`;\n"
    >>;
tran_to_sql ({_EtsTable,c_server_node, insert, Record}) ->
    Node = list_to_bin(Record#db_c_server_node.node),
    Ip = list_to_bin(Record#db_c_server_node.ip),
    Port = int_to_bin(Record#db_c_server_node.port),
    WebPort = int_to_bin(Record#db_c_server_node.web_port),
    DbHost = list_to_bin(Record#db_c_server_node.db_host),
    DbPort = int_to_bin(Record#db_c_server_node.db_port),
    DbName = list_to_bin(Record#db_c_server_node.db_name),
    Type = int_to_bin(Record#db_c_server_node.type),
    ZoneNode = list_to_bin(Record#db_c_server_node.zone_node),
    OpenTime = int_to_bin(Record#db_c_server_node.open_time),
    State = int_to_bin(Record#db_c_server_node.state),
    RunState = int_to_bin(Record#db_c_server_node.run_state),
    PlatformId = list_to_bin(Record#db_c_server_node.platform_id),
    <<
        "INSERT INTO `c_server_node` SET "
        " `node` = ", Node/binary,
        " ,`ip` = ", Ip/binary,
        " ,`port` = ", Port/binary,
        " ,`web_port` = ", WebPort/binary,
        " ,`db_host` = ", DbHost/binary,
        " ,`db_port` = ", DbPort/binary,
        " ,`db_name` = ", DbName/binary,
        " ,`type` = ", Type/binary,
        " ,`zone_node` = ", ZoneNode/binary,
        " ,`open_time` = ", OpenTime/binary,
        " ,`state` = ", State/binary,
        " ,`run_state` = ", RunState/binary,
        " ,`platform_id` = ", PlatformId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, c_server_node, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, c_server_node , update, NewRecord, OldRecord, get_changes(15, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, c_server_node, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, c_server_node, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(c_server_node, NewRecord, Changes, [<< "UPDATE `c_server_node` SET ">>])));
tran_to_sql ({_EtsTable, c_server_node, delete, Record}) ->
    Node = list_to_bin(Record#db_c_server_node.node),
    <<
        "DELETE FROM `c_server_node` WHERE "
        "`node` = ", Node/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, c_server_node, delete_all, _Record}) ->
    <<
        "DELETE FROM `c_server_node`;\n"
    >>;
tran_to_sql ({_EtsTable,c_game_server, insert, Record}) ->
    PlatformId = list_to_bin(Record#db_c_game_server.platform_id),
    Sid = list_to_bin(Record#db_c_game_server.sid),
    Desc = list_to_bin(Record#db_c_game_server.desc),
    IsShow = int_to_bin(Record#db_c_game_server.is_show),
    Node = list_to_bin(Record#db_c_game_server.node),
    <<
        "INSERT INTO `c_game_server` SET "
        " `platform_id` = ", PlatformId/binary,
        " ,`sid` = ", Sid/binary,
        " ,`desc` = ", Desc/binary,
        " ,`is_show` = ", IsShow/binary,
        " ,`node` = ", Node/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, c_game_server, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, c_game_server , update, NewRecord, OldRecord, get_changes(7, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, c_game_server, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, c_game_server, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(c_game_server, NewRecord, Changes, [<< "UPDATE `c_game_server` SET ">>])));
tran_to_sql ({_EtsTable, c_game_server, delete, Record}) ->
    PlatformId = list_to_bin(Record#db_c_game_server.platform_id),
    Sid = list_to_bin(Record#db_c_game_server.sid),
    <<
        "DELETE FROM `c_game_server` WHERE "
        "`platform_id` = ", PlatformId/binary,
        " and `sid` = ", Sid/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, c_game_server, delete_all, _Record}) ->
    <<
        "DELETE FROM `c_game_server`;\n"
    >>;
tran_to_sql ({_EtsTable,brave_one, insert, Record}) ->
    PlayerId = int_to_bin(Record#db_brave_one.player_id),
    Id = int_to_bin(Record#db_brave_one.id),
    PosId = int_to_bin(Record#db_brave_one.pos_id),
    BraveType = int_to_bin(Record#db_brave_one.brave_type),
    StartTime = int_to_bin(Record#db_brave_one.start_time),
    FightPlayerId = int_to_bin(Record#db_brave_one.fight_player_id),
    ChangeTime = int_to_bin(Record#db_brave_one.change_time),
    <<
        "INSERT INTO `brave_one` SET "
        " `player_id` = ", PlayerId/binary,
        " ,`id` = ", Id/binary,
        " ,`pos_id` = ", PosId/binary,
        " ,`brave_type` = ", BraveType/binary,
        " ,`start_time` = ", StartTime/binary,
        " ,`fight_player_id` = ", FightPlayerId/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, brave_one, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, brave_one , update, NewRecord, OldRecord, get_changes(9, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, brave_one, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, brave_one, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(brave_one, NewRecord, Changes, [<< "UPDATE `brave_one` SET ">>])));
tran_to_sql ({_EtsTable, brave_one, delete, Record}) ->
    PlayerId = int_to_bin(Record#db_brave_one.player_id),
    <<
        "DELETE FROM `brave_one` WHERE "
        "`player_id` = ", PlayerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, brave_one, delete_all, _Record}) ->
    <<
        "DELETE FROM `brave_one`;\n"
    >>;
tran_to_sql ({_EtsTable,boss_one_on_one, insert, Record}) ->
    Id = int_to_bin(Record#db_boss_one_on_one.id),
    HomeBoss = int_to_bin(Record#db_boss_one_on_one.home_boss),
    AwayBoss = int_to_bin(Record#db_boss_one_on_one.away_boss),
    PlayerTotalCost = int_to_bin(Record#db_boss_one_on_one.player_total_cost),
    PlayerTotalAward = int_to_bin(Record#db_boss_one_on_one.player_total_award),
    Winner = int_to_bin(Record#db_boss_one_on_one.winner),
    CreatedTime = int_to_bin(Record#db_boss_one_on_one.created_time),
    <<
        "INSERT INTO `boss_one_on_one` SET "
        " `id` = ", Id/binary,
        " ,`home_boss` = ", HomeBoss/binary,
        " ,`away_boss` = ", AwayBoss/binary,
        " ,`player_total_cost` = ", PlayerTotalCost/binary,
        " ,`player_total_award` = ", PlayerTotalAward/binary,
        " ,`winner` = ", Winner/binary,
        " ,`created_time` = ", CreatedTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, boss_one_on_one, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, boss_one_on_one , update, NewRecord, OldRecord, get_changes(9, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, boss_one_on_one, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, boss_one_on_one, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(boss_one_on_one, NewRecord, Changes, [<< "UPDATE `boss_one_on_one` SET ">>])));
tran_to_sql ({_EtsTable, boss_one_on_one, delete, Record}) ->
    Id = int_to_bin(Record#db_boss_one_on_one.id),
    <<
        "DELETE FROM `boss_one_on_one` WHERE "
        "`id` = ", Id/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, boss_one_on_one, delete_all, _Record}) ->
    <<
        "DELETE FROM `boss_one_on_one`;\n"
    >>;
tran_to_sql ({_EtsTable,activity_info, insert, Record}) ->
    ActivityId = int_to_bin(Record#db_activity_info.activity_id),
    State = int_to_bin(Record#db_activity_info.state),
    LastOpenTime = int_to_bin(Record#db_activity_info.last_open_time),
    LastCloseTime = int_to_bin(Record#db_activity_info.last_close_time),
    ConfigOpenTime = int_to_bin(Record#db_activity_info.config_open_time),
    ConfigCloseTime = int_to_bin(Record#db_activity_info.config_close_time),
    <<
        "INSERT INTO `activity_info` SET "
        " `activity_id` = ", ActivityId/binary,
        " ,`state` = ", State/binary,
        " ,`last_open_time` = ", LastOpenTime/binary,
        " ,`last_close_time` = ", LastCloseTime/binary,
        " ,`config_open_time` = ", ConfigOpenTime/binary,
        " ,`config_close_time` = ", ConfigCloseTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, activity_info, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, activity_info , update, NewRecord, OldRecord, get_changes(8, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, activity_info, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, activity_info, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(activity_info, NewRecord, Changes, [<< "UPDATE `activity_info` SET ">>])));
tran_to_sql ({_EtsTable, activity_info, delete, Record}) ->
    ActivityId = int_to_bin(Record#db_activity_info.activity_id),
    <<
        "DELETE FROM `activity_info` WHERE "
        "`activity_id` = ", ActivityId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, activity_info, delete_all, _Record}) ->
    <<
        "DELETE FROM `activity_info`;\n"
    >>;
tran_to_sql ({_EtsTable,activity_award, insert, Record}) ->
    ActivityId = int_to_bin(Record#db_activity_award.activity_id),
    StartTime = int_to_bin(Record#db_activity_award.start_time),
    State = int_to_bin(Record#db_activity_award.state),
    ChangeTime = int_to_bin(Record#db_activity_award.change_time),
    <<
        "INSERT INTO `activity_award` SET "
        " `activity_id` = ", ActivityId/binary,
        " ,`start_time` = ", StartTime/binary,
        " ,`state` = ", State/binary,
        " ,`change_time` = ", ChangeTime/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, activity_award, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, activity_award , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, activity_award, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, activity_award, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(activity_award, NewRecord, Changes, [<< "UPDATE `activity_award` SET ">>])));
tran_to_sql ({_EtsTable, activity_award, delete, Record}) ->
    ActivityId = int_to_bin(Record#db_activity_award.activity_id),
    <<
        "DELETE FROM `activity_award` WHERE "
        "`activity_id` = ", ActivityId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, activity_award, delete_all, _Record}) ->
    <<
        "DELETE FROM `activity_award`;\n"
    >>;
tran_to_sql ({_EtsTable,account_share_data, insert, Record}) ->
    PlatformId = list_to_bin(Record#db_account_share_data.platform_id),
    Account = list_to_bin(Record#db_account_share_data.account),
    LastShareTime = int_to_bin(Record#db_account_share_data.last_share_time),
    FinishShareTimes = int_to_bin(Record#db_account_share_data.finish_share_times),
    <<
        "INSERT INTO `account_share_data` SET "
        " `platform_id` = ", PlatformId/binary,
        " ,`account` = ", Account/binary,
        " ,`last_share_time` = ", LastShareTime/binary,
        " ,`finish_share_times` = ", FinishShareTimes/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, account_share_data, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, account_share_data , update, NewRecord, OldRecord, get_changes(6, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, account_share_data, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, account_share_data, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(account_share_data, NewRecord, Changes, [<< "UPDATE `account_share_data` SET ">>])));
tran_to_sql ({_EtsTable, account_share_data, delete, Record}) ->
    PlatformId = list_to_bin(Record#db_account_share_data.platform_id),
    Account = list_to_bin(Record#db_account_share_data.account),
    <<
        "DELETE FROM `account_share_data` WHERE "
        "`platform_id` = ", PlatformId/binary,
        " and `account` = ", Account/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, account_share_data, delete_all, _Record}) ->
    <<
        "DELETE FROM `account_share_data`;\n"
    >>;
tran_to_sql ({_EtsTable,account_charge_white, insert, Record}) ->
    PlatformId = list_to_bin(Record#db_account_charge_white.platform_id),
    Account = list_to_bin(Record#db_account_charge_white.account),
    IsWhite = int_to_bin(Record#db_account_charge_white.is_white),
    <<
        "INSERT INTO `account_charge_white` SET "
        " `platform_id` = ", PlatformId/binary,
        " ,`account` = ", Account/binary,
        " ,`is_white` = ", IsWhite/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, account_charge_white, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, account_charge_white , update, NewRecord, OldRecord, get_changes(5, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, account_charge_white, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, account_charge_white, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(account_charge_white, NewRecord, Changes, [<< "UPDATE `account_charge_white` SET ">>])));
tran_to_sql ({_EtsTable, account_charge_white, delete, Record}) ->
    PlatformId = list_to_bin(Record#db_account_charge_white.platform_id),
    Account = list_to_bin(Record#db_account_charge_white.account),
    <<
        "DELETE FROM `account_charge_white` WHERE "
        "`platform_id` = ", PlatformId/binary,
        " and `account` = ", Account/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, account_charge_white, delete_all, _Record}) ->
    <<
        "DELETE FROM `account_charge_white`;\n"
    >>;
tran_to_sql ({_EtsTable,account, insert, Record}) ->
    AccId = list_to_bin(Record#db_account.acc_id),
    ServerId = list_to_bin(Record#db_account.server_id),
    IsCreateRole = int_to_bin(Record#db_account.is_create_role),
    PlayerId = int_to_bin(Record#db_account.player_id),
    IsEnterGame = int_to_bin(Record#db_account.is_enter_game),
    IsFinishFirstTask = int_to_bin(Record#db_account.is_finish_first_task),
    Time = int_to_bin(Record#db_account.time),
    Channel = list_to_bin(Record#db_account.channel),
    <<
        "INSERT INTO `account` SET "
        " `acc_id` = ", AccId/binary,
        " ,`server_id` = ", ServerId/binary,
        " ,`is_create_role` = ", IsCreateRole/binary,
        " ,`player_id` = ", PlayerId/binary,
        " ,`is_enter_game` = ", IsEnterGame/binary,
        " ,`is_finish_first_task` = ", IsFinishFirstTask/binary,
        " ,`time` = ", Time/binary,
        " ,`channel` = ", Channel/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, account, update, NewRecord, OldRecord}) ->
    tran_to_sql({_EtsTable, account , update, NewRecord, OldRecord, get_changes(10, NewRecord, OldRecord)});
tran_to_sql ({_EtsTable, account, update, _NewRecord, _OldRecord, []}) ->
    ignore;
tran_to_sql ({_EtsTable, account, update, NewRecord, _OldRecord, Changes}) ->
    list_to_binary(lists:reverse(generate_update_sql(account, NewRecord, Changes, [<< "UPDATE `account` SET ">>])));
tran_to_sql ({_EtsTable, account, delete, Record}) ->
    AccId = list_to_bin(Record#db_account.acc_id),
    ServerId = list_to_bin(Record#db_account.server_id),
    <<
        "DELETE FROM `account` WHERE "
        "`acc_id` = ", AccId/binary,
        " and `server_id` = ", ServerId/binary,
        ";\n"
    >>;
tran_to_sql ({_EtsTable, account, delete_all, _Record}) ->
    <<
        "DELETE FROM `account`;\n"
    >>.

ensure_to_sql(Record) when is_record(Record, db_wheel_result_record_accumulate) ->
    if is_integer(Record#db_wheel_result_record_accumulate.type) -> noop ;true -> exit({vaild_for_sql,wheel_result_record_accumulate,type, Record#db_wheel_result_record_accumulate.type}) end,
    if is_integer(Record#db_wheel_result_record_accumulate.u_id) -> noop ;true -> exit({vaild_for_sql,wheel_result_record_accumulate,u_id, Record#db_wheel_result_record_accumulate.u_id}) end,
    if is_integer(Record#db_wheel_result_record_accumulate.record_type) -> noop ;true -> exit({vaild_for_sql,wheel_result_record_accumulate,record_type, Record#db_wheel_result_record_accumulate.record_type}) end,
    if is_integer(Record#db_wheel_result_record_accumulate.id) -> noop ;true -> exit({vaild_for_sql,wheel_result_record_accumulate,id, Record#db_wheel_result_record_accumulate.id}) end,
    if is_integer(Record#db_wheel_result_record_accumulate.num) -> noop ;true -> exit({vaild_for_sql,wheel_result_record_accumulate,num, Record#db_wheel_result_record_accumulate.num}) end,
    if is_integer(Record#db_wheel_result_record_accumulate.time) -> noop ;true -> exit({vaild_for_sql,wheel_result_record_accumulate,time, Record#db_wheel_result_record_accumulate.time}) end;
ensure_to_sql(Record) when is_record(Record, db_wheel_result_record) ->
    if is_integer(Record#db_wheel_result_record.type) -> noop ;true -> exit({vaild_for_sql,wheel_result_record,type, Record#db_wheel_result_record.type}) end,
    if is_integer(Record#db_wheel_result_record.id) -> noop ;true -> exit({vaild_for_sql,wheel_result_record,id, Record#db_wheel_result_record.id}) end,
    if is_integer(Record#db_wheel_result_record.result_id) -> noop ;true -> exit({vaild_for_sql,wheel_result_record,result_id, Record#db_wheel_result_record.result_id}) end,
    if is_integer(Record#db_wheel_result_record.time) -> noop ;true -> exit({vaild_for_sql,wheel_result_record,time, Record#db_wheel_result_record.time}) end;
ensure_to_sql(Record) when is_record(Record, db_wheel_pool) ->
    if is_integer(Record#db_wheel_pool.type) -> noop ;true -> exit({vaild_for_sql,wheel_pool,type, Record#db_wheel_pool.type}) end,
    if is_integer(Record#db_wheel_pool.value) -> noop ;true -> exit({vaild_for_sql,wheel_pool,value, Record#db_wheel_pool.value}) end,
    if is_integer(Record#db_wheel_pool.id) -> noop ;true -> exit({vaild_for_sql,wheel_pool,id, Record#db_wheel_pool.id}) end;
ensure_to_sql(Record) when is_record(Record, db_wheel_player_bet_record_today) ->
    if is_integer(Record#db_wheel_player_bet_record_today.player_id) -> noop ;true -> exit({vaild_for_sql,wheel_player_bet_record_today,player_id, Record#db_wheel_player_bet_record_today.player_id}) end,
    if is_integer(Record#db_wheel_player_bet_record_today.type) -> noop ;true -> exit({vaild_for_sql,wheel_player_bet_record_today,type, Record#db_wheel_player_bet_record_today.type}) end,
    if is_integer(Record#db_wheel_player_bet_record_today.id) -> noop ;true -> exit({vaild_for_sql,wheel_player_bet_record_today,id, Record#db_wheel_player_bet_record_today.id}) end,
    if is_integer(Record#db_wheel_player_bet_record_today.bet_num) -> noop ;true -> exit({vaild_for_sql,wheel_player_bet_record_today,bet_num, Record#db_wheel_player_bet_record_today.bet_num}) end,
    if is_integer(Record#db_wheel_player_bet_record_today.award_num) -> noop ;true -> exit({vaild_for_sql,wheel_player_bet_record_today,award_num, Record#db_wheel_player_bet_record_today.award_num}) end,
    if is_integer(Record#db_wheel_player_bet_record_today.time) -> noop ;true -> exit({vaild_for_sql,wheel_player_bet_record_today,time, Record#db_wheel_player_bet_record_today.time}) end;
ensure_to_sql(Record) when is_record(Record, db_wheel_player_bet_record) ->
    if is_integer(Record#db_wheel_player_bet_record.player_id) -> noop ;true -> exit({vaild_for_sql,wheel_player_bet_record,player_id, Record#db_wheel_player_bet_record.player_id}) end,
    if is_integer(Record#db_wheel_player_bet_record.type) -> noop ;true -> exit({vaild_for_sql,wheel_player_bet_record,type, Record#db_wheel_player_bet_record.type}) end,
    if is_integer(Record#db_wheel_player_bet_record.id) -> noop ;true -> exit({vaild_for_sql,wheel_player_bet_record,id, Record#db_wheel_player_bet_record.id}) end,
    if is_integer(Record#db_wheel_player_bet_record.bet_num) -> noop ;true -> exit({vaild_for_sql,wheel_player_bet_record,bet_num, Record#db_wheel_player_bet_record.bet_num}) end,
    if is_integer(Record#db_wheel_player_bet_record.award_num) -> noop ;true -> exit({vaild_for_sql,wheel_player_bet_record,award_num, Record#db_wheel_player_bet_record.award_num}) end,
    if is_integer(Record#db_wheel_player_bet_record.time) -> noop ;true -> exit({vaild_for_sql,wheel_player_bet_record,time, Record#db_wheel_player_bet_record.time}) end;
ensure_to_sql(Record) when is_record(Record, db_unique_id_data) ->
    if is_integer(Record#db_unique_id_data.type) -> noop ;true -> exit({vaild_for_sql,unique_id_data,type, Record#db_unique_id_data.type}) end,
    if is_integer(Record#db_unique_id_data.id) -> noop ;true -> exit({vaild_for_sql,unique_id_data,id, Record#db_unique_id_data.id}) end;
ensure_to_sql(Record) when is_record(Record, db_tongxingzheng_month_task) ->
    if is_integer(Record#db_tongxingzheng_month_task.player_id) -> noop ;true -> exit({vaild_for_sql,tongxingzheng_month_task,player_id, Record#db_tongxingzheng_month_task.player_id}) end,
    if is_list(Record#db_tongxingzheng_month_task.task_list) -> noop ;true -> exit({vaild_for_sql,tongxingzheng_month_task,task_list, Record#db_tongxingzheng_month_task.task_list}) end;
ensure_to_sql(Record) when is_record(Record, db_tongxingzheng_daily_task) ->
    if is_integer(Record#db_tongxingzheng_daily_task.player_id) -> noop ;true -> exit({vaild_for_sql,tongxingzheng_daily_task,player_id, Record#db_tongxingzheng_daily_task.player_id}) end,
    if is_list(Record#db_tongxingzheng_daily_task.task_list) -> noop ;true -> exit({vaild_for_sql,tongxingzheng_daily_task,task_list, Record#db_tongxingzheng_daily_task.task_list}) end;
ensure_to_sql(Record) when is_record(Record, db_timer_data) ->
    if is_integer(Record#db_timer_data.timer_id) -> noop ;true -> exit({vaild_for_sql,timer_data,timer_id, Record#db_timer_data.timer_id}) end,
    if is_integer(Record#db_timer_data.last_time) -> noop ;true -> exit({vaild_for_sql,timer_data,last_time, Record#db_timer_data.last_time}) end;
ensure_to_sql(Record) when is_record(Record, db_test) ->
    if is_integer(Record#db_test.id) -> noop ;true -> exit({vaild_for_sql,test,id, Record#db_test.id}) end,
    if is_integer(Record#db_test.num) -> noop ;true -> exit({vaild_for_sql,test,num, Record#db_test.num}) end,
    if is_list(Record#db_test.str) -> noop ;true -> exit({vaild_for_sql,test,str, Record#db_test.str}) end;
ensure_to_sql(Record) when is_record(Record, db_server_state) ->
    if is_integer(Record#db_server_state.time) -> noop ;true -> exit({vaild_for_sql,server_state,time, Record#db_server_state.time}) end,
    if is_integer(Record#db_server_state.create_count) -> noop ;true -> exit({vaild_for_sql,server_state,create_count, Record#db_server_state.create_count}) end,
    if is_integer(Record#db_server_state.login_count) -> noop ;true -> exit({vaild_for_sql,server_state,login_count, Record#db_server_state.login_count}) end,
    if is_integer(Record#db_server_state.online_count) -> noop ;true -> exit({vaild_for_sql,server_state,online_count, Record#db_server_state.online_count}) end,
    if is_integer(Record#db_server_state.error_count) -> noop ;true -> exit({vaild_for_sql,server_state,error_count, Record#db_server_state.error_count}) end,
    if is_integer(Record#db_server_state.db_error_count) -> noop ;true -> exit({vaild_for_sql,server_state,db_error_count, Record#db_server_state.db_error_count}) end;
ensure_to_sql(Record) when is_record(Record, db_server_player_fight_adjust) ->
    if is_integer(Record#db_server_player_fight_adjust.player_id) -> noop ;true -> exit({vaild_for_sql,server_player_fight_adjust,player_id, Record#db_server_player_fight_adjust.player_id}) end,
    if is_integer(Record#db_server_player_fight_adjust.prop_id) -> noop ;true -> exit({vaild_for_sql,server_player_fight_adjust,prop_id, Record#db_server_player_fight_adjust.prop_id}) end,
    if is_integer(Record#db_server_player_fight_adjust.id) -> noop ;true -> exit({vaild_for_sql,server_player_fight_adjust,id, Record#db_server_player_fight_adjust.id}) end,
    if is_integer(Record#db_server_player_fight_adjust.times) -> noop ;true -> exit({vaild_for_sql,server_player_fight_adjust,times, Record#db_server_player_fight_adjust.times}) end,
    if is_integer(Record#db_server_player_fight_adjust.bottom_times) -> noop ;true -> exit({vaild_for_sql,server_player_fight_adjust,bottom_times, Record#db_server_player_fight_adjust.bottom_times}) end,
    if is_integer(Record#db_server_player_fight_adjust.bottom_times_time) -> noop ;true -> exit({vaild_for_sql,server_player_fight_adjust,bottom_times_time, Record#db_server_player_fight_adjust.bottom_times_time}) end;
ensure_to_sql(Record) when is_record(Record, db_server_game_config) ->
    if is_integer(Record#db_server_game_config.config_id) -> noop ;true -> exit({vaild_for_sql,server_game_config,config_id, Record#db_server_game_config.config_id}) end,
    if is_integer(Record#db_server_game_config.int_data) -> noop ;true -> exit({vaild_for_sql,server_game_config,int_data, Record#db_server_game_config.int_data}) end,
    if is_list(Record#db_server_game_config.str_data) -> noop ;true -> exit({vaild_for_sql,server_game_config,str_data, Record#db_server_game_config.str_data}) end,
    if is_integer(Record#db_server_game_config.change_time) -> noop ;true -> exit({vaild_for_sql,server_game_config,change_time, Record#db_server_game_config.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_server_fight_adjust) ->
    if is_integer(Record#db_server_fight_adjust.prop_id) -> noop ;true -> exit({vaild_for_sql,server_fight_adjust,prop_id, Record#db_server_fight_adjust.prop_id}) end,
    if is_integer(Record#db_server_fight_adjust.pool_value) -> noop ;true -> exit({vaild_for_sql,server_fight_adjust,pool_value, Record#db_server_fight_adjust.pool_value}) end,
    if is_integer(Record#db_server_fight_adjust.cost) -> noop ;true -> exit({vaild_for_sql,server_fight_adjust,cost, Record#db_server_fight_adjust.cost}) end,
    if is_integer(Record#db_server_fight_adjust.award) -> noop ;true -> exit({vaild_for_sql,server_fight_adjust,award, Record#db_server_fight_adjust.award}) end;
ensure_to_sql(Record) when is_record(Record, db_server_data) ->
    if is_integer(Record#db_server_data.id) -> noop ;true -> exit({vaild_for_sql,server_data,id, Record#db_server_data.id}) end,
    if is_integer(Record#db_server_data.key2) -> noop ;true -> exit({vaild_for_sql,server_data,key2, Record#db_server_data.key2}) end,
    if is_integer(Record#db_server_data.int_data) -> noop ;true -> exit({vaild_for_sql,server_data,int_data, Record#db_server_data.int_data}) end,
    if is_list(Record#db_server_data.str_data) -> noop ;true -> exit({vaild_for_sql,server_data,str_data, Record#db_server_data.str_data}) end,
    if is_integer(Record#db_server_data.change_time) -> noop ;true -> exit({vaild_for_sql,server_data,change_time, Record#db_server_data.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_scene_log) ->
    if is_integer(Record#db_scene_log.scene_id) -> noop ;true -> exit({vaild_for_sql,scene_log,scene_id, Record#db_scene_log.scene_id}) end,
    if is_list(Record#db_scene_log.cost_list) -> noop ;true -> exit({vaild_for_sql,scene_log,cost_list, Record#db_scene_log.cost_list}) end,
    if is_list(Record#db_scene_log.award_list) -> noop ;true -> exit({vaild_for_sql,scene_log,award_list, Record#db_scene_log.award_list}) end,
    if is_integer(Record#db_scene_log.times) -> noop ;true -> exit({vaild_for_sql,scene_log,times, Record#db_scene_log.times}) end,
    if is_integer(Record#db_scene_log.cost_time) -> noop ;true -> exit({vaild_for_sql,scene_log,cost_time, Record#db_scene_log.cost_time}) end;
ensure_to_sql(Record) when is_record(Record, db_scene_boss_adjust) ->
    if is_integer(Record#db_scene_boss_adjust.scene_id) -> noop ;true -> exit({vaild_for_sql,scene_boss_adjust,scene_id, Record#db_scene_boss_adjust.scene_id}) end,
    if is_integer(Record#db_scene_boss_adjust.pool_value) -> noop ;true -> exit({vaild_for_sql,scene_boss_adjust,pool_value, Record#db_scene_boss_adjust.pool_value}) end;
ensure_to_sql(Record) when is_record(Record, db_scene_adjust) ->
    if is_integer(Record#db_scene_adjust.scene_id) -> noop ;true -> exit({vaild_for_sql,scene_adjust,scene_id, Record#db_scene_adjust.scene_id}) end,
    if is_integer(Record#db_scene_adjust.pool_value) -> noop ;true -> exit({vaild_for_sql,scene_adjust,pool_value, Record#db_scene_adjust.pool_value}) end;
ensure_to_sql(Record) when is_record(Record, db_robot_player_scene_cache) ->
    if is_integer(Record#db_robot_player_scene_cache.id) -> noop ;true -> exit({vaild_for_sql,robot_player_scene_cache,id, Record#db_robot_player_scene_cache.id}) end,
    if is_integer(Record#db_robot_player_scene_cache.player_id) -> noop ;true -> exit({vaild_for_sql,robot_player_scene_cache,player_id, Record#db_robot_player_scene_cache.player_id}) end,
    if is_list(Record#db_robot_player_scene_cache.server_id) -> noop ;true -> exit({vaild_for_sql,robot_player_scene_cache,server_id, Record#db_robot_player_scene_cache.server_id}) end,
    if is_integer(Record#db_robot_player_scene_cache.level) -> noop ;true -> exit({vaild_for_sql,robot_player_scene_cache,level, Record#db_robot_player_scene_cache.level}) end,
    if is_integer(Record#db_robot_player_scene_cache.clothe_id) -> noop ;true -> exit({vaild_for_sql,robot_player_scene_cache,clothe_id, Record#db_robot_player_scene_cache.clothe_id}) end,
    if is_integer(Record#db_robot_player_scene_cache.title_id) -> noop ;true -> exit({vaild_for_sql,robot_player_scene_cache,title_id, Record#db_robot_player_scene_cache.title_id}) end,
    if is_integer(Record#db_robot_player_scene_cache.magic_weapon_id) -> noop ;true -> exit({vaild_for_sql,robot_player_scene_cache,magic_weapon_id, Record#db_robot_player_scene_cache.magic_weapon_id}) end,
    if is_integer(Record#db_robot_player_scene_cache.weapon_id) -> noop ;true -> exit({vaild_for_sql,robot_player_scene_cache,weapon_id, Record#db_robot_player_scene_cache.weapon_id}) end,
    if is_integer(Record#db_robot_player_scene_cache.wings_id) -> noop ;true -> exit({vaild_for_sql,robot_player_scene_cache,wings_id, Record#db_robot_player_scene_cache.wings_id}) end,
    if is_integer(Record#db_robot_player_scene_cache.shen_long_type) -> noop ;true -> exit({vaild_for_sql,robot_player_scene_cache,shen_long_type, Record#db_robot_player_scene_cache.shen_long_type}) end;
ensure_to_sql(Record) when is_record(Record, db_robot_player_data) ->
    if is_integer(Record#db_robot_player_data.player_id) -> noop ;true -> exit({vaild_for_sql,robot_player_data,player_id, Record#db_robot_player_data.player_id}) end,
    if is_list(Record#db_robot_player_data.nickname) -> noop ;true -> exit({vaild_for_sql,robot_player_data,nickname, Record#db_robot_player_data.nickname}) end,
    if is_list(Record#db_robot_player_data.server_id) -> noop ;true -> exit({vaild_for_sql,robot_player_data,server_id, Record#db_robot_player_data.server_id}) end,
    if is_integer(Record#db_robot_player_data.sex) -> noop ;true -> exit({vaild_for_sql,robot_player_data,sex, Record#db_robot_player_data.sex}) end;
ensure_to_sql(Record) when is_record(Record, db_red_packet_condition) ->
    if is_integer(Record#db_red_packet_condition.id) -> noop ;true -> exit({vaild_for_sql,red_packet_condition,id, Record#db_red_packet_condition.id}) end,
    if is_integer(Record#db_red_packet_condition.value) -> noop ;true -> exit({vaild_for_sql,red_packet_condition,value, Record#db_red_packet_condition.value}) end,
    if is_integer(Record#db_red_packet_condition.change_time) -> noop ;true -> exit({vaild_for_sql,red_packet_condition,change_time, Record#db_red_packet_condition.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_rank_info) ->
    if is_integer(Record#db_rank_info.rank_id) -> noop ;true -> exit({vaild_for_sql,rank_info,rank_id, Record#db_rank_info.rank_id}) end,
    if is_integer(Record#db_rank_info.player_id) -> noop ;true -> exit({vaild_for_sql,rank_info,player_id, Record#db_rank_info.player_id}) end,
    if is_integer(Record#db_rank_info.rank) -> noop ;true -> exit({vaild_for_sql,rank_info,rank, Record#db_rank_info.rank}) end,
    if is_integer(Record#db_rank_info.old_rank) -> noop ;true -> exit({vaild_for_sql,rank_info,old_rank, Record#db_rank_info.old_rank}) end,
    if is_integer(Record#db_rank_info.value) -> noop ;true -> exit({vaild_for_sql,rank_info,value, Record#db_rank_info.value}) end,
    if is_integer(Record#db_rank_info.old_value) -> noop ;true -> exit({vaild_for_sql,rank_info,old_value, Record#db_rank_info.old_value}) end,
    if is_integer(Record#db_rank_info.change_time) -> noop ;true -> exit({vaild_for_sql,rank_info,change_time, Record#db_rank_info.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_promote_record) ->
    if is_integer(Record#db_promote_record.real_id) -> noop ;true -> exit({vaild_for_sql,promote_record,real_id, Record#db_promote_record.real_id}) end,
    if is_list(Record#db_promote_record.platform_id) -> noop ;true -> exit({vaild_for_sql,promote_record,platform_id, Record#db_promote_record.platform_id}) end,
    if is_list(Record#db_promote_record.acc_id) -> noop ;true -> exit({vaild_for_sql,promote_record,acc_id, Record#db_promote_record.acc_id}) end,
    if is_integer(Record#db_promote_record.id) -> noop ;true -> exit({vaild_for_sql,promote_record,id, Record#db_promote_record.id}) end,
    if is_list(Record#db_promote_record.param) -> noop ;true -> exit({vaild_for_sql,promote_record,param, Record#db_promote_record.param}) end,
    if is_integer(Record#db_promote_record.time) -> noop ;true -> exit({vaild_for_sql,promote_record,time, Record#db_promote_record.time}) end;
ensure_to_sql(Record) when is_record(Record, db_promote_info) ->
    if is_list(Record#db_promote_info.platform_id) -> noop ;true -> exit({vaild_for_sql,promote_info,platform_id, Record#db_promote_info.platform_id}) end,
    if is_list(Record#db_promote_info.acc_id) -> noop ;true -> exit({vaild_for_sql,promote_info,acc_id, Record#db_promote_info.acc_id}) end,
    if is_integer(Record#db_promote_info.level) -> noop ;true -> exit({vaild_for_sql,promote_info,level, Record#db_promote_info.level}) end,
    if is_integer(Record#db_promote_info.number) -> noop ;true -> exit({vaild_for_sql,promote_info,number, Record#db_promote_info.number}) end,
    if is_integer(Record#db_promote_info.mana) -> noop ;true -> exit({vaild_for_sql,promote_info,mana, Record#db_promote_info.mana}) end,
    if is_integer(Record#db_promote_info.vip_exp) -> noop ;true -> exit({vaild_for_sql,promote_info,vip_exp, Record#db_promote_info.vip_exp}) end,
    if is_integer(Record#db_promote_info.time) -> noop ;true -> exit({vaild_for_sql,promote_info,time, Record#db_promote_info.time}) end;
ensure_to_sql(Record) when is_record(Record, db_promote) ->
    if is_list(Record#db_promote.platform_id) -> noop ;true -> exit({vaild_for_sql,promote,platform_id, Record#db_promote.platform_id}) end,
    if is_list(Record#db_promote.acc_id) -> noop ;true -> exit({vaild_for_sql,promote,acc_id, Record#db_promote.acc_id}) end,
    if is_integer(Record#db_promote.invite_player_id) -> noop ;true -> exit({vaild_for_sql,promote,invite_player_id, Record#db_promote.invite_player_id}) end,
    if is_integer(Record#db_promote.use_times) -> noop ;true -> exit({vaild_for_sql,promote,use_times, Record#db_promote.use_times}) end,
    if is_integer(Record#db_promote.times_time) -> noop ;true -> exit({vaild_for_sql,promote,times_time, Record#db_promote.times_time}) end,
    if is_integer(Record#db_promote.is_red) -> noop ;true -> exit({vaild_for_sql,promote,is_red, Record#db_promote.is_red}) end;
ensure_to_sql(Record) when is_record(Record, db_player_vip_award) ->
    if is_integer(Record#db_player_vip_award.player_id) -> noop ;true -> exit({vaild_for_sql,player_vip_award,player_id, Record#db_player_vip_award.player_id}) end,
    if is_integer(Record#db_player_vip_award.level) -> noop ;true -> exit({vaild_for_sql,player_vip_award,level, Record#db_player_vip_award.level}) end,
    if is_integer(Record#db_player_vip_award.state) -> noop ;true -> exit({vaild_for_sql,player_vip_award,state, Record#db_player_vip_award.state}) end,
    if is_integer(Record#db_player_vip_award.change_time) -> noop ;true -> exit({vaild_for_sql,player_vip_award,change_time, Record#db_player_vip_award.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_vip) ->
    if is_integer(Record#db_player_vip.player_id) -> noop ;true -> exit({vaild_for_sql,player_vip,player_id, Record#db_player_vip.player_id}) end,
    if is_integer(Record#db_player_vip.level) -> noop ;true -> exit({vaild_for_sql,player_vip,level, Record#db_player_vip.level}) end,
    if is_integer(Record#db_player_vip.exp) -> noop ;true -> exit({vaild_for_sql,player_vip,exp, Record#db_player_vip.exp}) end,
    if is_integer(Record#db_player_vip.change_time) -> noop ;true -> exit({vaild_for_sql,player_vip,change_time, Record#db_player_vip.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_title) ->
    if is_integer(Record#db_player_title.player_id) -> noop ;true -> exit({vaild_for_sql,player_title,player_id, Record#db_player_title.player_id}) end,
    if is_integer(Record#db_player_title.title_id) -> noop ;true -> exit({vaild_for_sql,player_title,title_id, Record#db_player_title.title_id}) end,
    if is_integer(Record#db_player_title.title_level) -> noop ;true -> exit({vaild_for_sql,player_title,title_level, Record#db_player_title.title_level}) end,
    if is_integer(Record#db_player_title.state) -> noop ;true -> exit({vaild_for_sql,player_title,state, Record#db_player_title.state}) end,
    if is_integer(Record#db_player_title.create_time) -> noop ;true -> exit({vaild_for_sql,player_title,create_time, Record#db_player_title.create_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_times_data) ->
    if is_integer(Record#db_player_times_data.player_id) -> noop ;true -> exit({vaild_for_sql,player_times_data,player_id, Record#db_player_times_data.player_id}) end,
    if is_integer(Record#db_player_times_data.times_id) -> noop ;true -> exit({vaild_for_sql,player_times_data,times_id, Record#db_player_times_data.times_id}) end,
    if is_integer(Record#db_player_times_data.use_times) -> noop ;true -> exit({vaild_for_sql,player_times_data,use_times, Record#db_player_times_data.use_times}) end,
    if is_integer(Record#db_player_times_data.left_times) -> noop ;true -> exit({vaild_for_sql,player_times_data,left_times, Record#db_player_times_data.left_times}) end,
    if is_integer(Record#db_player_times_data.buy_times) -> noop ;true -> exit({vaild_for_sql,player_times_data,buy_times, Record#db_player_times_data.buy_times}) end,
    if is_integer(Record#db_player_times_data.update_time) -> noop ;true -> exit({vaild_for_sql,player_times_data,update_time, Record#db_player_times_data.update_time}) end,
    if is_integer(Record#db_player_times_data.last_recover_time) -> noop ;true -> exit({vaild_for_sql,player_times_data,last_recover_time, Record#db_player_times_data.last_recover_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_task_share_award) ->
    if is_integer(Record#db_player_task_share_award.player_id) -> noop ;true -> exit({vaild_for_sql,player_task_share_award,player_id, Record#db_player_task_share_award.player_id}) end,
    if is_integer(Record#db_player_task_share_award.task_id) -> noop ;true -> exit({vaild_for_sql,player_task_share_award,task_id, Record#db_player_task_share_award.task_id}) end,
    if is_integer(Record#db_player_task_share_award.type) -> noop ;true -> exit({vaild_for_sql,player_task_share_award,type, Record#db_player_task_share_award.type}) end,
    if is_integer(Record#db_player_task_share_award.change_time) -> noop ;true -> exit({vaild_for_sql,player_task_share_award,change_time, Record#db_player_task_share_award.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_task) ->
    if is_integer(Record#db_player_task.player_id) -> noop ;true -> exit({vaild_for_sql,player_task,player_id, Record#db_player_task.player_id}) end,
    if is_integer(Record#db_player_task.task_id) -> noop ;true -> exit({vaild_for_sql,player_task,task_id, Record#db_player_task.task_id}) end,
    if is_integer(Record#db_player_task.status) -> noop ;true -> exit({vaild_for_sql,player_task,status, Record#db_player_task.status}) end,
    if is_integer(Record#db_player_task.num) -> noop ;true -> exit({vaild_for_sql,player_task,num, Record#db_player_task.num}) end,
    if is_integer(Record#db_player_task.update_time) -> noop ;true -> exit({vaild_for_sql,player_task,update_time, Record#db_player_task.update_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_sys_common) ->
    if is_integer(Record#db_player_sys_common.player_id) -> noop ;true -> exit({vaild_for_sql,player_sys_common,player_id, Record#db_player_sys_common.player_id}) end,
    if is_integer(Record#db_player_sys_common.id) -> noop ;true -> exit({vaild_for_sql,player_sys_common,id, Record#db_player_sys_common.id}) end,
    if is_integer(Record#db_player_sys_common.state) -> noop ;true -> exit({vaild_for_sql,player_sys_common,state, Record#db_player_sys_common.state}) end;
ensure_to_sql(Record) when is_record(Record, db_player_sys_attr) ->
    if is_integer(Record#db_player_sys_attr.player_id) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,player_id, Record#db_player_sys_attr.player_id}) end,
    if is_integer(Record#db_player_sys_attr.fun_id) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,fun_id, Record#db_player_sys_attr.fun_id}) end,
    if is_integer(Record#db_player_sys_attr.power) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,power, Record#db_player_sys_attr.power}) end,
    if is_integer(Record#db_player_sys_attr.hp) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,hp, Record#db_player_sys_attr.hp}) end,
    if is_integer(Record#db_player_sys_attr.attack) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,attack, Record#db_player_sys_attr.attack}) end,
    if is_integer(Record#db_player_sys_attr.defense) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,defense, Record#db_player_sys_attr.defense}) end,
    if is_integer(Record#db_player_sys_attr.hit) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,hit, Record#db_player_sys_attr.hit}) end,
    if is_integer(Record#db_player_sys_attr.dodge) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,dodge, Record#db_player_sys_attr.dodge}) end,
    if is_integer(Record#db_player_sys_attr.critical) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,critical, Record#db_player_sys_attr.critical}) end,
    if is_integer(Record#db_player_sys_attr.tenacity) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,tenacity, Record#db_player_sys_attr.tenacity}) end,
    if is_integer(Record#db_player_sys_attr.speed) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,speed, Record#db_player_sys_attr.speed}) end,
    if is_integer(Record#db_player_sys_attr.crit_time) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,crit_time, Record#db_player_sys_attr.crit_time}) end,
    if is_integer(Record#db_player_sys_attr.hurt_add) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,hurt_add, Record#db_player_sys_attr.hurt_add}) end,
    if is_integer(Record#db_player_sys_attr.hurt_reduce) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,hurt_reduce, Record#db_player_sys_attr.hurt_reduce}) end,
    if is_integer(Record#db_player_sys_attr.crit_hurt_add) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,crit_hurt_add, Record#db_player_sys_attr.crit_hurt_add}) end,
    if is_integer(Record#db_player_sys_attr.crit_hurt_reduce) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,crit_hurt_reduce, Record#db_player_sys_attr.crit_hurt_reduce}) end,
    if is_integer(Record#db_player_sys_attr.hp_reflex) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,hp_reflex, Record#db_player_sys_attr.hp_reflex}) end,
    if is_integer(Record#db_player_sys_attr.rate_resist_block) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,rate_resist_block, Record#db_player_sys_attr.rate_resist_block}) end,
    if is_integer(Record#db_player_sys_attr.rate_block) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,rate_block, Record#db_player_sys_attr.rate_block}) end,
    if is_integer(Record#db_player_sys_attr.change_time) -> noop ;true -> exit({vaild_for_sql,player_sys_attr,change_time, Record#db_player_sys_attr.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_special_prop) ->
    if is_integer(Record#db_player_special_prop.player_id) -> noop ;true -> exit({vaild_for_sql,player_special_prop,player_id, Record#db_player_special_prop.player_id}) end,
    if is_integer(Record#db_player_special_prop.prop_obj_id) -> noop ;true -> exit({vaild_for_sql,player_special_prop,prop_obj_id, Record#db_player_special_prop.prop_obj_id}) end,
    if is_integer(Record#db_player_special_prop.prop_id) -> noop ;true -> exit({vaild_for_sql,player_special_prop,prop_id, Record#db_player_special_prop.prop_id}) end,
    if is_integer(Record#db_player_special_prop.expire_time) -> noop ;true -> exit({vaild_for_sql,player_special_prop,expire_time, Record#db_player_special_prop.expire_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_shop) ->
    if is_integer(Record#db_player_shop.player_id) -> noop ;true -> exit({vaild_for_sql,player_shop,player_id, Record#db_player_shop.player_id}) end,
    if is_integer(Record#db_player_shop.id) -> noop ;true -> exit({vaild_for_sql,player_shop,id, Record#db_player_shop.id}) end,
    if is_integer(Record#db_player_shop.limit_type) -> noop ;true -> exit({vaild_for_sql,player_shop,limit_type, Record#db_player_shop.limit_type}) end,
    if is_integer(Record#db_player_shop.buy_count) -> noop ;true -> exit({vaild_for_sql,player_shop,buy_count, Record#db_player_shop.buy_count}) end,
    if is_integer(Record#db_player_shop.award_state) -> noop ;true -> exit({vaild_for_sql,player_shop,award_state, Record#db_player_shop.award_state}) end,
    if is_integer(Record#db_player_shop.change_time) -> noop ;true -> exit({vaild_for_sql,player_shop,change_time, Record#db_player_shop.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_shen_long) ->
    if is_integer(Record#db_player_shen_long.player_id) -> noop ;true -> exit({vaild_for_sql,player_shen_long,player_id, Record#db_player_shen_long.player_id}) end,
    if is_integer(Record#db_player_shen_long.type) -> noop ;true -> exit({vaild_for_sql,player_shen_long,type, Record#db_player_shen_long.type}) end,
    if is_integer(Record#db_player_shen_long.time) -> noop ;true -> exit({vaild_for_sql,player_shen_long,time, Record#db_player_shen_long.time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_share_task_award) ->
    if is_integer(Record#db_player_share_task_award.player_id) -> noop ;true -> exit({vaild_for_sql,player_share_task_award,player_id, Record#db_player_share_task_award.player_id}) end,
    if is_integer(Record#db_player_share_task_award.task_type) -> noop ;true -> exit({vaild_for_sql,player_share_task_award,task_type, Record#db_player_share_task_award.task_type}) end,
    if is_integer(Record#db_player_share_task_award.task_id) -> noop ;true -> exit({vaild_for_sql,player_share_task_award,task_id, Record#db_player_share_task_award.task_id}) end,
    if is_integer(Record#db_player_share_task_award.state) -> noop ;true -> exit({vaild_for_sql,player_share_task_award,state, Record#db_player_share_task_award.state}) end;
ensure_to_sql(Record) when is_record(Record, db_player_share_task) ->
    if is_integer(Record#db_player_share_task.player_id) -> noop ;true -> exit({vaild_for_sql,player_share_task,player_id, Record#db_player_share_task.player_id}) end,
    if is_integer(Record#db_player_share_task.task_type) -> noop ;true -> exit({vaild_for_sql,player_share_task,task_type, Record#db_player_share_task.task_type}) end,
    if is_integer(Record#db_player_share_task.value) -> noop ;true -> exit({vaild_for_sql,player_share_task,value, Record#db_player_share_task.value}) end,
    if is_integer(Record#db_player_share_task.state) -> noop ;true -> exit({vaild_for_sql,player_share_task,state, Record#db_player_share_task.state}) end;
ensure_to_sql(Record) when is_record(Record, db_player_share_friend) ->
    if is_integer(Record#db_player_share_friend.player_id) -> noop ;true -> exit({vaild_for_sql,player_share_friend,player_id, Record#db_player_share_friend.player_id}) end,
    if is_integer(Record#db_player_share_friend.id) -> noop ;true -> exit({vaild_for_sql,player_share_friend,id, Record#db_player_share_friend.id}) end,
    if is_integer(Record#db_player_share_friend.state) -> noop ;true -> exit({vaild_for_sql,player_share_friend,state, Record#db_player_share_friend.state}) end,
    if is_integer(Record#db_player_share_friend.change_time) -> noop ;true -> exit({vaild_for_sql,player_share_friend,change_time, Record#db_player_share_friend.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_share) ->
    if is_integer(Record#db_player_share.player_id) -> noop ;true -> exit({vaild_for_sql,player_share,player_id, Record#db_player_share.player_id}) end,
    if is_integer(Record#db_player_share.count) -> noop ;true -> exit({vaild_for_sql,player_share,count, Record#db_player_share.count}) end,
    if is_integer(Record#db_player_share.change_time) -> noop ;true -> exit({vaild_for_sql,player_share,change_time, Record#db_player_share.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_seven_login) ->
    if is_integer(Record#db_player_seven_login.player_id) -> noop ;true -> exit({vaild_for_sql,player_seven_login,player_id, Record#db_player_seven_login.player_id}) end,
    if is_integer(Record#db_player_seven_login.give_award_value) -> noop ;true -> exit({vaild_for_sql,player_seven_login,give_award_value, Record#db_player_seven_login.give_award_value}) end;
ensure_to_sql(Record) when is_record(Record, db_player_server_data) ->
    if is_integer(Record#db_player_server_data.player_id) -> noop ;true -> exit({vaild_for_sql,player_server_data,player_id, Record#db_player_server_data.player_id}) end,
    if is_list(Record#db_player_server_data.platform_id) -> noop ;true -> exit({vaild_for_sql,player_server_data,platform_id, Record#db_player_server_data.platform_id}) end,
    if is_list(Record#db_player_server_data.server_id) -> noop ;true -> exit({vaild_for_sql,player_server_data,server_id, Record#db_player_server_data.server_id}) end;
ensure_to_sql(Record) when is_record(Record, db_player_send_gamebar_msg) ->
    if is_integer(Record#db_player_send_gamebar_msg.player_id) -> noop ;true -> exit({vaild_for_sql,player_send_gamebar_msg,player_id, Record#db_player_send_gamebar_msg.player_id}) end,
    if is_integer(Record#db_player_send_gamebar_msg.msg_type) -> noop ;true -> exit({vaild_for_sql,player_send_gamebar_msg,msg_type, Record#db_player_send_gamebar_msg.msg_type}) end,
    if is_integer(Record#db_player_send_gamebar_msg.msg_id) -> noop ;true -> exit({vaild_for_sql,player_send_gamebar_msg,msg_id, Record#db_player_send_gamebar_msg.msg_id}) end,
    if is_integer(Record#db_player_send_gamebar_msg.change_time) -> noop ;true -> exit({vaild_for_sql,player_send_gamebar_msg,change_time, Record#db_player_send_gamebar_msg.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_prop) ->
    if is_integer(Record#db_player_prop.player_id) -> noop ;true -> exit({vaild_for_sql,player_prop,player_id, Record#db_player_prop.player_id}) end,
    if is_integer(Record#db_player_prop.prop_id) -> noop ;true -> exit({vaild_for_sql,player_prop,prop_id, Record#db_player_prop.prop_id}) end,
    if is_integer(Record#db_player_prop.num) -> noop ;true -> exit({vaild_for_sql,player_prop,num, Record#db_player_prop.num}) end,
    if is_integer(Record#db_player_prop.expire_time) -> noop ;true -> exit({vaild_for_sql,player_prop,expire_time, Record#db_player_prop.expire_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_prerogative_card) ->
    if is_integer(Record#db_player_prerogative_card.player_id) -> noop ;true -> exit({vaild_for_sql,player_prerogative_card,player_id, Record#db_player_prerogative_card.player_id}) end,
    if is_integer(Record#db_player_prerogative_card.type) -> noop ;true -> exit({vaild_for_sql,player_prerogative_card,type, Record#db_player_prerogative_card.type}) end,
    if is_integer(Record#db_player_prerogative_card.state) -> noop ;true -> exit({vaild_for_sql,player_prerogative_card,state, Record#db_player_prerogative_card.state}) end,
    if is_integer(Record#db_player_prerogative_card.change_time) -> noop ;true -> exit({vaild_for_sql,player_prerogative_card,change_time, Record#db_player_prerogative_card.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_platform_award) ->
    if is_integer(Record#db_player_platform_award.player_id) -> noop ;true -> exit({vaild_for_sql,player_platform_award,player_id, Record#db_player_platform_award.player_id}) end,
    if is_integer(Record#db_player_platform_award.id) -> noop ;true -> exit({vaild_for_sql,player_platform_award,id, Record#db_player_platform_award.id}) end,
    if is_integer(Record#db_player_platform_award.state) -> noop ;true -> exit({vaild_for_sql,player_platform_award,state, Record#db_player_platform_award.state}) end,
    if is_integer(Record#db_player_platform_award.change_time) -> noop ;true -> exit({vaild_for_sql,player_platform_award,change_time, Record#db_player_platform_award.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_passive_skill) ->
    if is_integer(Record#db_player_passive_skill.player_id) -> noop ;true -> exit({vaild_for_sql,player_passive_skill,player_id, Record#db_player_passive_skill.player_id}) end,
    if is_integer(Record#db_player_passive_skill.passive_skill_id) -> noop ;true -> exit({vaild_for_sql,player_passive_skill,passive_skill_id, Record#db_player_passive_skill.passive_skill_id}) end,
    if is_integer(Record#db_player_passive_skill.level) -> noop ;true -> exit({vaild_for_sql,player_passive_skill,level, Record#db_player_passive_skill.level}) end,
    if is_integer(Record#db_player_passive_skill.is_equip) -> noop ;true -> exit({vaild_for_sql,player_passive_skill,is_equip, Record#db_player_passive_skill.is_equip}) end,
    if is_integer(Record#db_player_passive_skill.last_time) -> noop ;true -> exit({vaild_for_sql,player_passive_skill,last_time, Record#db_player_passive_skill.last_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_online_info) ->
    if is_integer(Record#db_player_online_info.player_id) -> noop ;true -> exit({vaild_for_sql,player_online_info,player_id, Record#db_player_online_info.player_id}) end,
    if is_integer(Record#db_player_online_info.total_hours_online_today) -> noop ;true -> exit({vaild_for_sql,player_online_info,total_hours_online_today, Record#db_player_online_info.total_hours_online_today}) end,
    if is_integer(Record#db_player_online_info.record_online_timestamps) -> noop ;true -> exit({vaild_for_sql,player_online_info,record_online_timestamps, Record#db_player_online_info.record_online_timestamps}) end;
ensure_to_sql(Record) when is_record(Record, db_player_online_award) ->
    if is_integer(Record#db_player_online_award.player_id) -> noop ;true -> exit({vaild_for_sql,player_online_award,player_id, Record#db_player_online_award.player_id}) end,
    if is_integer(Record#db_player_online_award.id) -> noop ;true -> exit({vaild_for_sql,player_online_award,id, Record#db_player_online_award.id}) end,
    if is_integer(Record#db_player_online_award.state) -> noop ;true -> exit({vaild_for_sql,player_online_award,state, Record#db_player_online_award.state}) end,
    if is_integer(Record#db_player_online_award.change_time) -> noop ;true -> exit({vaild_for_sql,player_online_award,change_time, Record#db_player_online_award.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_offline_apply) ->
    if is_integer(Record#db_player_offline_apply.id) -> noop ;true -> exit({vaild_for_sql,player_offline_apply,id, Record#db_player_offline_apply.id}) end,
    if is_integer(Record#db_player_offline_apply.player_id) -> noop ;true -> exit({vaild_for_sql,player_offline_apply,player_id, Record#db_player_offline_apply.player_id}) end,
    if is_list(Record#db_player_offline_apply.module) -> noop ;true -> exit({vaild_for_sql,player_offline_apply,module, Record#db_player_offline_apply.module}) end,
    if is_list(Record#db_player_offline_apply.function) -> noop ;true -> exit({vaild_for_sql,player_offline_apply,function, Record#db_player_offline_apply.function}) end,
    if is_list(Record#db_player_offline_apply.args) -> noop ;true -> exit({vaild_for_sql,player_offline_apply,args, Record#db_player_offline_apply.args}) end,
    if is_integer(Record#db_player_offline_apply.timestamp) -> noop ;true -> exit({vaild_for_sql,player_offline_apply,timestamp, Record#db_player_offline_apply.timestamp}) end;
ensure_to_sql(Record) when is_record(Record, db_player_mission_data) ->
    if is_integer(Record#db_player_mission_data.player_id) -> noop ;true -> exit({vaild_for_sql,player_mission_data,player_id, Record#db_player_mission_data.player_id}) end,
    if is_integer(Record#db_player_mission_data.mission_type) -> noop ;true -> exit({vaild_for_sql,player_mission_data,mission_type, Record#db_player_mission_data.mission_type}) end,
    if is_integer(Record#db_player_mission_data.mission_id) -> noop ;true -> exit({vaild_for_sql,player_mission_data,mission_id, Record#db_player_mission_data.mission_id}) end,
    if is_integer(Record#db_player_mission_data.time) -> noop ;true -> exit({vaild_for_sql,player_mission_data,time, Record#db_player_mission_data.time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_mail) ->
    if is_integer(Record#db_player_mail.player_id) -> noop ;true -> exit({vaild_for_sql,player_mail,player_id, Record#db_player_mail.player_id}) end,
    if is_integer(Record#db_player_mail.mail_real_id) -> noop ;true -> exit({vaild_for_sql,player_mail,mail_real_id, Record#db_player_mail.mail_real_id}) end,
    if is_integer(Record#db_player_mail.mail_id) -> noop ;true -> exit({vaild_for_sql,player_mail,mail_id, Record#db_player_mail.mail_id}) end,
    if is_integer(Record#db_player_mail.weight_value) -> noop ;true -> exit({vaild_for_sql,player_mail,weight_value, Record#db_player_mail.weight_value}) end,
    if is_integer(Record#db_player_mail.state) -> noop ;true -> exit({vaild_for_sql,player_mail,state, Record#db_player_mail.state}) end,
    if is_list(Record#db_player_mail.title_name) -> noop ;true -> exit({vaild_for_sql,player_mail,title_name, Record#db_player_mail.title_name}) end,
    if is_list(Record#db_player_mail.content) -> noop ;true -> exit({vaild_for_sql,player_mail,content, Record#db_player_mail.content}) end,
    if is_list(Record#db_player_mail.param) -> noop ;true -> exit({vaild_for_sql,player_mail,param, Record#db_player_mail.param}) end,
    if is_list(Record#db_player_mail.item_list) -> noop ;true -> exit({vaild_for_sql,player_mail,item_list, Record#db_player_mail.item_list}) end,
    if is_integer(Record#db_player_mail.log_type) -> noop ;true -> exit({vaild_for_sql,player_mail,log_type, Record#db_player_mail.log_type}) end,
    if is_integer(Record#db_player_mail.valid_time) -> noop ;true -> exit({vaild_for_sql,player_mail,valid_time, Record#db_player_mail.valid_time}) end,
    if is_integer(Record#db_player_mail.create_time) -> noop ;true -> exit({vaild_for_sql,player_mail,create_time, Record#db_player_mail.create_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_leichong) ->
    if is_integer(Record#db_player_leichong.player_id) -> noop ;true -> exit({vaild_for_sql,player_leichong,player_id, Record#db_player_leichong.player_id}) end,
    if is_integer(Record#db_player_leichong.activity_id) -> noop ;true -> exit({vaild_for_sql,player_leichong,activity_id, Record#db_player_leichong.activity_id}) end,
    if is_integer(Record#db_player_leichong.task_id) -> noop ;true -> exit({vaild_for_sql,player_leichong,task_id, Record#db_player_leichong.task_id}) end,
    if is_integer(Record#db_player_leichong.done) -> noop ;true -> exit({vaild_for_sql,player_leichong,done, Record#db_player_leichong.done}) end,
    if is_integer(Record#db_player_leichong.state) -> noop ;true -> exit({vaild_for_sql,player_leichong,state, Record#db_player_leichong.state}) end;
ensure_to_sql(Record) when is_record(Record, db_player_laba_data) ->
    if is_integer(Record#db_player_laba_data.player_id) -> noop ;true -> exit({vaild_for_sql,player_laba_data,player_id, Record#db_player_laba_data.player_id}) end,
    if is_integer(Record#db_player_laba_data.laba_id) -> noop ;true -> exit({vaild_for_sql,player_laba_data,laba_id, Record#db_player_laba_data.laba_id}) end,
    if is_integer(Record#db_player_laba_data.cost_rate) -> noop ;true -> exit({vaild_for_sql,player_laba_data,cost_rate, Record#db_player_laba_data.cost_rate}) end,
    if is_integer(Record#db_player_laba_data.missed_times) orelse Record#db_player_laba_data.missed_times =:= undefined-> noop ;true -> exit({vaild_for_sql,player_laba_data,missed_times, Record#db_player_laba_data.missed_times}) end;
ensure_to_sql(Record) when is_record(Record, db_player_jiangjinchi) ->
    if is_integer(Record#db_player_jiangjinchi.player_id) -> noop ;true -> exit({vaild_for_sql,player_jiangjinchi,player_id, Record#db_player_jiangjinchi.player_id}) end,
    if is_integer(Record#db_player_jiangjinchi.scene_id) -> noop ;true -> exit({vaild_for_sql,player_jiangjinchi,scene_id, Record#db_player_jiangjinchi.scene_id}) end,
    if is_integer(Record#db_player_jiangjinchi.atk_cost) -> noop ;true -> exit({vaild_for_sql,player_jiangjinchi,atk_cost, Record#db_player_jiangjinchi.atk_cost}) end,
    if is_integer(Record#db_player_jiangjinchi.atk_times) -> noop ;true -> exit({vaild_for_sql,player_jiangjinchi,atk_times, Record#db_player_jiangjinchi.atk_times}) end,
    if is_integer(Record#db_player_jiangjinchi.state) -> noop ;true -> exit({vaild_for_sql,player_jiangjinchi,state, Record#db_player_jiangjinchi.state}) end,
    if is_integer(Record#db_player_jiangjinchi.award_num) -> noop ;true -> exit({vaild_for_sql,player_jiangjinchi,award_num, Record#db_player_jiangjinchi.award_num}) end,
    if is_integer(Record#db_player_jiangjinchi.extra_award_num) -> noop ;true -> exit({vaild_for_sql,player_jiangjinchi,extra_award_num, Record#db_player_jiangjinchi.extra_award_num}) end,
    if is_integer(Record#db_player_jiangjinchi.doubled_times) -> noop ;true -> exit({vaild_for_sql,player_jiangjinchi,doubled_times, Record#db_player_jiangjinchi.doubled_times}) end,
    if is_integer(Record#db_player_jiangjinchi.change_time) -> noop ;true -> exit({vaild_for_sql,player_jiangjinchi,change_time, Record#db_player_jiangjinchi.change_time}) end,
    if is_integer(Record#db_player_jiangjinchi.init_award_num) -> noop ;true -> exit({vaild_for_sql,player_jiangjinchi,init_award_num, Record#db_player_jiangjinchi.init_award_num}) end;
ensure_to_sql(Record) when is_record(Record, db_player_invite_friend_log) ->
    if is_integer(Record#db_player_invite_friend_log.player_id) -> noop ;true -> exit({vaild_for_sql,player_invite_friend_log,player_id, Record#db_player_invite_friend_log.player_id}) end,
    if is_list(Record#db_player_invite_friend_log.acc_id) -> noop ;true -> exit({vaild_for_sql,player_invite_friend_log,acc_id, Record#db_player_invite_friend_log.acc_id}) end,
    if is_integer(Record#db_player_invite_friend_log.type) -> noop ;true -> exit({vaild_for_sql,player_invite_friend_log,type, Record#db_player_invite_friend_log.type}) end,
    if is_list(Record#db_player_invite_friend_log.server_id) -> noop ;true -> exit({vaild_for_sql,player_invite_friend_log,server_id, Record#db_player_invite_friend_log.server_id}) end,
    if is_integer(Record#db_player_invite_friend_log.share_player_id) -> noop ;true -> exit({vaild_for_sql,player_invite_friend_log,share_player_id, Record#db_player_invite_friend_log.share_player_id}) end,
    if is_integer(Record#db_player_invite_friend_log.change_time) -> noop ;true -> exit({vaild_for_sql,player_invite_friend_log,change_time, Record#db_player_invite_friend_log.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_invite_friend) ->
    if is_list(Record#db_player_invite_friend.acc_id) -> noop ;true -> exit({vaild_for_sql,player_invite_friend,acc_id, Record#db_player_invite_friend.acc_id}) end,
    if is_integer(Record#db_player_invite_friend.player_id) -> noop ;true -> exit({vaild_for_sql,player_invite_friend,player_id, Record#db_player_invite_friend.player_id}) end;
ensure_to_sql(Record) when is_record(Record, db_player_invest_type) ->
    if is_integer(Record#db_player_invest_type.player_id) -> noop ;true -> exit({vaild_for_sql,player_invest_type,player_id, Record#db_player_invest_type.player_id}) end,
    if is_integer(Record#db_player_invest_type.type) -> noop ;true -> exit({vaild_for_sql,player_invest_type,type, Record#db_player_invest_type.type}) end,
    if is_integer(Record#db_player_invest_type.is_buy) -> noop ;true -> exit({vaild_for_sql,player_invest_type,is_buy, Record#db_player_invest_type.is_buy}) end,
    if is_integer(Record#db_player_invest_type.update_time) -> noop ;true -> exit({vaild_for_sql,player_invest_type,update_time, Record#db_player_invest_type.update_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_invest) ->
    if is_integer(Record#db_player_invest.player_id) -> noop ;true -> exit({vaild_for_sql,player_invest,player_id, Record#db_player_invest.player_id}) end,
    if is_integer(Record#db_player_invest.type) -> noop ;true -> exit({vaild_for_sql,player_invest,type, Record#db_player_invest.type}) end,
    if is_integer(Record#db_player_invest.id) -> noop ;true -> exit({vaild_for_sql,player_invest,id, Record#db_player_invest.id}) end,
    if is_integer(Record#db_player_invest.value) -> noop ;true -> exit({vaild_for_sql,player_invest,value, Record#db_player_invest.value}) end,
    if is_integer(Record#db_player_invest.status) -> noop ;true -> exit({vaild_for_sql,player_invest,status, Record#db_player_invest.status}) end,
    if is_integer(Record#db_player_invest.update_time) -> noop ;true -> exit({vaild_for_sql,player_invest,update_time, Record#db_player_invest.update_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_hero_use) ->
    if is_integer(Record#db_player_hero_use.player_id) -> noop ;true -> exit({vaild_for_sql,player_hero_use,player_id, Record#db_player_hero_use.player_id}) end,
    if is_integer(Record#db_player_hero_use.hero_id) -> noop ;true -> exit({vaild_for_sql,player_hero_use,hero_id, Record#db_player_hero_use.hero_id}) end,
    if is_integer(Record#db_player_hero_use.arms) -> noop ;true -> exit({vaild_for_sql,player_hero_use,arms, Record#db_player_hero_use.arms}) end,
    if is_integer(Record#db_player_hero_use.ornaments) -> noop ;true -> exit({vaild_for_sql,player_hero_use,ornaments, Record#db_player_hero_use.ornaments}) end;
ensure_to_sql(Record) when is_record(Record, db_player_hero_parts) ->
    if is_integer(Record#db_player_hero_parts.player_id) -> noop ;true -> exit({vaild_for_sql,player_hero_parts,player_id, Record#db_player_hero_parts.player_id}) end,
    if is_integer(Record#db_player_hero_parts.parts_id) -> noop ;true -> exit({vaild_for_sql,player_hero_parts,parts_id, Record#db_player_hero_parts.parts_id}) end;
ensure_to_sql(Record) when is_record(Record, db_player_hero) ->
    if is_integer(Record#db_player_hero.player_id) -> noop ;true -> exit({vaild_for_sql,player_hero,player_id, Record#db_player_hero.player_id}) end,
    if is_integer(Record#db_player_hero.hero_id) -> noop ;true -> exit({vaild_for_sql,player_hero,hero_id, Record#db_player_hero.hero_id}) end,
    if is_integer(Record#db_player_hero.star) -> noop ;true -> exit({vaild_for_sql,player_hero,star, Record#db_player_hero.star}) end;
ensure_to_sql(Record) when is_record(Record, db_player_gift_mail_log) ->
    if is_integer(Record#db_player_gift_mail_log.sender) -> noop ;true -> exit({vaild_for_sql,player_gift_mail_log,sender, Record#db_player_gift_mail_log.sender}) end,
    if is_integer(Record#db_player_gift_mail_log.create_time) -> noop ;true -> exit({vaild_for_sql,player_gift_mail_log,create_time, Record#db_player_gift_mail_log.create_time}) end,
    if is_integer(Record#db_player_gift_mail_log.receiver) -> noop ;true -> exit({vaild_for_sql,player_gift_mail_log,receiver, Record#db_player_gift_mail_log.receiver}) end,
    if is_list(Record#db_player_gift_mail_log.receiver_nickname) -> noop ;true -> exit({vaild_for_sql,player_gift_mail_log,receiver_nickname, Record#db_player_gift_mail_log.receiver_nickname}) end,
    if is_list(Record#db_player_gift_mail_log.item_list) -> noop ;true -> exit({vaild_for_sql,player_gift_mail_log,item_list, Record#db_player_gift_mail_log.item_list}) end;
ensure_to_sql(Record) when is_record(Record, db_player_gift_mail) ->
    if is_integer(Record#db_player_gift_mail.player_id) -> noop ;true -> exit({vaild_for_sql,player_gift_mail,player_id, Record#db_player_gift_mail.player_id}) end,
    if is_integer(Record#db_player_gift_mail.sender) -> noop ;true -> exit({vaild_for_sql,player_gift_mail,sender, Record#db_player_gift_mail.sender}) end,
    if is_integer(Record#db_player_gift_mail.mail_real_id) -> noop ;true -> exit({vaild_for_sql,player_gift_mail,mail_real_id, Record#db_player_gift_mail.mail_real_id}) end,
    if is_integer(Record#db_player_gift_mail.weight_value) -> noop ;true -> exit({vaild_for_sql,player_gift_mail,weight_value, Record#db_player_gift_mail.weight_value}) end,
    if is_integer(Record#db_player_gift_mail.is_read) -> noop ;true -> exit({vaild_for_sql,player_gift_mail,is_read, Record#db_player_gift_mail.is_read}) end,
    if is_integer(Record#db_player_gift_mail.state) -> noop ;true -> exit({vaild_for_sql,player_gift_mail,state, Record#db_player_gift_mail.state}) end,
    if is_integer(Record#db_player_gift_mail.is_del) -> noop ;true -> exit({vaild_for_sql,player_gift_mail,is_del, Record#db_player_gift_mail.is_del}) end,
    if is_integer(Record#db_player_gift_mail.mail_id) -> noop ;true -> exit({vaild_for_sql,player_gift_mail,mail_id, Record#db_player_gift_mail.mail_id}) end,
    if is_list(Record#db_player_gift_mail.title_content) -> noop ;true -> exit({vaild_for_sql,player_gift_mail,title_content, Record#db_player_gift_mail.title_content}) end,
    if is_list(Record#db_player_gift_mail.title_param) -> noop ;true -> exit({vaild_for_sql,player_gift_mail,title_param, Record#db_player_gift_mail.title_param}) end,
    if is_list(Record#db_player_gift_mail.content) -> noop ;true -> exit({vaild_for_sql,player_gift_mail,content, Record#db_player_gift_mail.content}) end,
    if is_list(Record#db_player_gift_mail.content_param) -> noop ;true -> exit({vaild_for_sql,player_gift_mail,content_param, Record#db_player_gift_mail.content_param}) end,
    if is_list(Record#db_player_gift_mail.item_list) -> noop ;true -> exit({vaild_for_sql,player_gift_mail,item_list, Record#db_player_gift_mail.item_list}) end,
    if is_integer(Record#db_player_gift_mail.create_time) -> noop ;true -> exit({vaild_for_sql,player_gift_mail,create_time, Record#db_player_gift_mail.create_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_gift_code) ->
    if is_integer(Record#db_player_gift_code.player_id) -> noop ;true -> exit({vaild_for_sql,player_gift_code,player_id, Record#db_player_gift_code.player_id}) end,
    if is_integer(Record#db_player_gift_code.gift_code_type) -> noop ;true -> exit({vaild_for_sql,player_gift_code,gift_code_type, Record#db_player_gift_code.gift_code_type}) end,
    if is_integer(Record#db_player_gift_code.times) -> noop ;true -> exit({vaild_for_sql,player_gift_code,times, Record#db_player_gift_code.times}) end,
    if is_integer(Record#db_player_gift_code.change_time) -> noop ;true -> exit({vaild_for_sql,player_gift_code,change_time, Record#db_player_gift_code.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_game_data) ->
    if is_integer(Record#db_player_game_data.player_id) -> noop ;true -> exit({vaild_for_sql,player_game_data,player_id, Record#db_player_game_data.player_id}) end,
    if is_integer(Record#db_player_game_data.data_id) -> noop ;true -> exit({vaild_for_sql,player_game_data,data_id, Record#db_player_game_data.data_id}) end,
    if is_integer(Record#db_player_game_data.int_data) -> noop ;true -> exit({vaild_for_sql,player_game_data,int_data, Record#db_player_game_data.int_data}) end,
    if is_list(Record#db_player_game_data.str_data) -> noop ;true -> exit({vaild_for_sql,player_game_data,str_data, Record#db_player_game_data.str_data}) end;
ensure_to_sql(Record) when is_record(Record, db_player_game_config) ->
    if is_integer(Record#db_player_game_config.player_id) -> noop ;true -> exit({vaild_for_sql,player_game_config,player_id, Record#db_player_game_config.player_id}) end,
    if is_integer(Record#db_player_game_config.config_id) -> noop ;true -> exit({vaild_for_sql,player_game_config,config_id, Record#db_player_game_config.config_id}) end,
    if is_integer(Record#db_player_game_config.int_data) -> noop ;true -> exit({vaild_for_sql,player_game_config,int_data, Record#db_player_game_config.int_data}) end,
    if is_list(Record#db_player_game_config.str_data) -> noop ;true -> exit({vaild_for_sql,player_game_config,str_data, Record#db_player_game_config.str_data}) end,
    if is_integer(Record#db_player_game_config.change_time) -> noop ;true -> exit({vaild_for_sql,player_game_config,change_time, Record#db_player_game_config.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_function) ->
    if is_integer(Record#db_player_function.player_id) -> noop ;true -> exit({vaild_for_sql,player_function,player_id, Record#db_player_function.player_id}) end,
    if is_integer(Record#db_player_function.function_id) -> noop ;true -> exit({vaild_for_sql,player_function,function_id, Record#db_player_function.function_id}) end,
    if is_integer(Record#db_player_function.state) -> noop ;true -> exit({vaild_for_sql,player_function,state, Record#db_player_function.state}) end,
    if is_integer(Record#db_player_function.get_state) -> noop ;true -> exit({vaild_for_sql,player_function,get_state, Record#db_player_function.get_state}) end,
    if is_integer(Record#db_player_function.time) -> noop ;true -> exit({vaild_for_sql,player_function,time, Record#db_player_function.time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_first_charge_day) ->
    if is_integer(Record#db_player_first_charge_day.player_id) -> noop ;true -> exit({vaild_for_sql,player_first_charge_day,player_id, Record#db_player_first_charge_day.player_id}) end,
    if is_integer(Record#db_player_first_charge_day.type) -> noop ;true -> exit({vaild_for_sql,player_first_charge_day,type, Record#db_player_first_charge_day.type}) end,
    if is_integer(Record#db_player_first_charge_day.day) -> noop ;true -> exit({vaild_for_sql,player_first_charge_day,day, Record#db_player_first_charge_day.day}) end,
    if is_integer(Record#db_player_first_charge_day.time) -> noop ;true -> exit({vaild_for_sql,player_first_charge_day,time, Record#db_player_first_charge_day.time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_first_charge) ->
    if is_integer(Record#db_player_first_charge.player_id) -> noop ;true -> exit({vaild_for_sql,player_first_charge,player_id, Record#db_player_first_charge.player_id}) end,
    if is_integer(Record#db_player_first_charge.type) -> noop ;true -> exit({vaild_for_sql,player_first_charge,type, Record#db_player_first_charge.type}) end,
    if is_integer(Record#db_player_first_charge.recharge_id) -> noop ;true -> exit({vaild_for_sql,player_first_charge,recharge_id, Record#db_player_first_charge.recharge_id}) end,
    if is_integer(Record#db_player_first_charge.login_day) -> noop ;true -> exit({vaild_for_sql,player_first_charge,login_day, Record#db_player_first_charge.login_day}) end,
    if is_integer(Record#db_player_first_charge.time) -> noop ;true -> exit({vaild_for_sql,player_first_charge,time, Record#db_player_first_charge.time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_finish_share_task) ->
    if is_list(Record#db_player_finish_share_task.acc_id) -> noop ;true -> exit({vaild_for_sql,player_finish_share_task,acc_id, Record#db_player_finish_share_task.acc_id}) end,
    if is_integer(Record#db_player_finish_share_task.task_type) -> noop ;true -> exit({vaild_for_sql,player_finish_share_task,task_type, Record#db_player_finish_share_task.task_type}) end,
    if is_integer(Record#db_player_finish_share_task.player_id) -> noop ;true -> exit({vaild_for_sql,player_finish_share_task,player_id, Record#db_player_finish_share_task.player_id}) end,
    if is_integer(Record#db_player_finish_share_task.state) -> noop ;true -> exit({vaild_for_sql,player_finish_share_task,state, Record#db_player_finish_share_task.state}) end;
ensure_to_sql(Record) when is_record(Record, db_player_fight_adjust) ->
    if is_integer(Record#db_player_fight_adjust.player_id) -> noop ;true -> exit({vaild_for_sql,player_fight_adjust,player_id, Record#db_player_fight_adjust.player_id}) end,
    if is_integer(Record#db_player_fight_adjust.prop_id) -> noop ;true -> exit({vaild_for_sql,player_fight_adjust,prop_id, Record#db_player_fight_adjust.prop_id}) end,
    if is_integer(Record#db_player_fight_adjust.fight_type) -> noop ;true -> exit({vaild_for_sql,player_fight_adjust,fight_type, Record#db_player_fight_adjust.fight_type}) end,
    if is_integer(Record#db_player_fight_adjust.pool) -> noop ;true -> exit({vaild_for_sql,player_fight_adjust,pool, Record#db_player_fight_adjust.pool}) end,
    if is_integer(Record#db_player_fight_adjust.pool_times) -> noop ;true -> exit({vaild_for_sql,player_fight_adjust,pool_times, Record#db_player_fight_adjust.pool_times}) end,
    if is_integer(Record#db_player_fight_adjust.rate) -> noop ;true -> exit({vaild_for_sql,player_fight_adjust,rate, Record#db_player_fight_adjust.rate}) end,
    if is_integer(Record#db_player_fight_adjust.cost_rate) -> noop ;true -> exit({vaild_for_sql,player_fight_adjust,cost_rate, Record#db_player_fight_adjust.cost_rate}) end,
    if is_integer(Record#db_player_fight_adjust.cost_pool) -> noop ;true -> exit({vaild_for_sql,player_fight_adjust,cost_pool, Record#db_player_fight_adjust.cost_pool}) end,
    if is_integer(Record#db_player_fight_adjust.pool_1) -> noop ;true -> exit({vaild_for_sql,player_fight_adjust,pool_1, Record#db_player_fight_adjust.pool_1}) end,
    if is_integer(Record#db_player_fight_adjust.pool_2) -> noop ;true -> exit({vaild_for_sql,player_fight_adjust,pool_2, Record#db_player_fight_adjust.pool_2}) end,
    if is_integer(Record#db_player_fight_adjust.bottom_times) -> noop ;true -> exit({vaild_for_sql,player_fight_adjust,bottom_times, Record#db_player_fight_adjust.bottom_times}) end,
    if is_integer(Record#db_player_fight_adjust.bottom_times_time) -> noop ;true -> exit({vaild_for_sql,player_fight_adjust,bottom_times_time, Record#db_player_fight_adjust.bottom_times_time}) end,
    if is_integer(Record#db_player_fight_adjust.is_bottom) -> noop ;true -> exit({vaild_for_sql,player_fight_adjust,is_bottom, Record#db_player_fight_adjust.is_bottom}) end,
    if is_integer(Record#db_player_fight_adjust.id) -> noop ;true -> exit({vaild_for_sql,player_fight_adjust,id, Record#db_player_fight_adjust.id}) end;
ensure_to_sql(Record) when is_record(Record, db_player_everyday_sign) ->
    if is_integer(Record#db_player_everyday_sign.player_id) -> noop ;true -> exit({vaild_for_sql,player_everyday_sign,player_id, Record#db_player_everyday_sign.player_id}) end,
    if is_integer(Record#db_player_everyday_sign.today) -> noop ;true -> exit({vaild_for_sql,player_everyday_sign,today, Record#db_player_everyday_sign.today}) end,
    if is_integer(Record#db_player_everyday_sign.state) -> noop ;true -> exit({vaild_for_sql,player_everyday_sign,state, Record#db_player_everyday_sign.state}) end,
    if is_integer(Record#db_player_everyday_sign.change_time) -> noop ;true -> exit({vaild_for_sql,player_everyday_sign,change_time, Record#db_player_everyday_sign.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_everyday_charge) ->
    if is_integer(Record#db_player_everyday_charge.player_id) -> noop ;true -> exit({vaild_for_sql,player_everyday_charge,player_id, Record#db_player_everyday_charge.player_id}) end,
    if is_integer(Record#db_player_everyday_charge.id) -> noop ;true -> exit({vaild_for_sql,player_everyday_charge,id, Record#db_player_everyday_charge.id}) end,
    if is_integer(Record#db_player_everyday_charge.state) -> noop ;true -> exit({vaild_for_sql,player_everyday_charge,state, Record#db_player_everyday_charge.state}) end,
    if is_integer(Record#db_player_everyday_charge.change_time) -> noop ;true -> exit({vaild_for_sql,player_everyday_charge,change_time, Record#db_player_everyday_charge.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_data) ->
    if is_integer(Record#db_player_data.player_id) -> noop ;true -> exit({vaild_for_sql,player_data,player_id, Record#db_player_data.player_id}) end,
    if is_integer(Record#db_player_data.exp) -> noop ;true -> exit({vaild_for_sql,player_data,exp, Record#db_player_data.exp}) end,
    if is_integer(Record#db_player_data.level) -> noop ;true -> exit({vaild_for_sql,player_data,level, Record#db_player_data.level}) end,
    if is_integer(Record#db_player_data.vip_level) -> noop ;true -> exit({vaild_for_sql,player_data,vip_level, Record#db_player_data.vip_level}) end,
    if is_integer(Record#db_player_data.title_id) -> noop ;true -> exit({vaild_for_sql,player_data,title_id, Record#db_player_data.title_id}) end,
    if is_integer(Record#db_player_data.honor_id) -> noop ;true -> exit({vaild_for_sql,player_data,honor_id, Record#db_player_data.honor_id}) end,
    if is_integer(Record#db_player_data.head_id) -> noop ;true -> exit({vaild_for_sql,player_data,head_id, Record#db_player_data.head_id}) end,
    if is_integer(Record#db_player_data.head_frame_id) -> noop ;true -> exit({vaild_for_sql,player_data,head_frame_id, Record#db_player_data.head_frame_id}) end,
    if is_integer(Record#db_player_data.chat_qi_pao_id) -> noop ;true -> exit({vaild_for_sql,player_data,chat_qi_pao_id, Record#db_player_data.chat_qi_pao_id}) end,
    if is_integer(Record#db_player_data.anger) -> noop ;true -> exit({vaild_for_sql,player_data,anger, Record#db_player_data.anger}) end,
    if is_integer(Record#db_player_data.max_hp) -> noop ;true -> exit({vaild_for_sql,player_data,max_hp, Record#db_player_data.max_hp}) end,
    if is_integer(Record#db_player_data.hp) -> noop ;true -> exit({vaild_for_sql,player_data,hp, Record#db_player_data.hp}) end,
    if is_integer(Record#db_player_data.attack) -> noop ;true -> exit({vaild_for_sql,player_data,attack, Record#db_player_data.attack}) end,
    if is_integer(Record#db_player_data.defense) -> noop ;true -> exit({vaild_for_sql,player_data,defense, Record#db_player_data.defense}) end,
    if is_integer(Record#db_player_data.hit) -> noop ;true -> exit({vaild_for_sql,player_data,hit, Record#db_player_data.hit}) end,
    if is_integer(Record#db_player_data.dodge) -> noop ;true -> exit({vaild_for_sql,player_data,dodge, Record#db_player_data.dodge}) end,
    if is_integer(Record#db_player_data.tenacity) -> noop ;true -> exit({vaild_for_sql,player_data,tenacity, Record#db_player_data.tenacity}) end,
    if is_integer(Record#db_player_data.critical) -> noop ;true -> exit({vaild_for_sql,player_data,critical, Record#db_player_data.critical}) end,
    if is_integer(Record#db_player_data.rate_resist_block) -> noop ;true -> exit({vaild_for_sql,player_data,rate_resist_block, Record#db_player_data.rate_resist_block}) end,
    if is_integer(Record#db_player_data.rate_block) -> noop ;true -> exit({vaild_for_sql,player_data,rate_block, Record#db_player_data.rate_block}) end,
    if is_integer(Record#db_player_data.power) -> noop ;true -> exit({vaild_for_sql,player_data,power, Record#db_player_data.power}) end,
    if is_integer(Record#db_player_data.speed) -> noop ;true -> exit({vaild_for_sql,player_data,speed, Record#db_player_data.speed}) end,
    if is_integer(Record#db_player_data.crit_time) -> noop ;true -> exit({vaild_for_sql,player_data,crit_time, Record#db_player_data.crit_time}) end,
    if is_integer(Record#db_player_data.hurt_add) -> noop ;true -> exit({vaild_for_sql,player_data,hurt_add, Record#db_player_data.hurt_add}) end,
    if is_integer(Record#db_player_data.hurt_reduce) -> noop ;true -> exit({vaild_for_sql,player_data,hurt_reduce, Record#db_player_data.hurt_reduce}) end,
    if is_integer(Record#db_player_data.crit_hurt_add) -> noop ;true -> exit({vaild_for_sql,player_data,crit_hurt_add, Record#db_player_data.crit_hurt_add}) end,
    if is_integer(Record#db_player_data.crit_hurt_reduce) -> noop ;true -> exit({vaild_for_sql,player_data,crit_hurt_reduce, Record#db_player_data.crit_hurt_reduce}) end,
    if is_integer(Record#db_player_data.hp_reflex) -> noop ;true -> exit({vaild_for_sql,player_data,hp_reflex, Record#db_player_data.hp_reflex}) end,
    if is_integer(Record#db_player_data.pk) -> noop ;true -> exit({vaild_for_sql,player_data,pk, Record#db_player_data.pk}) end,
    if is_integer(Record#db_player_data.last_world_scene_id) -> noop ;true -> exit({vaild_for_sql,player_data,last_world_scene_id, Record#db_player_data.last_world_scene_id}) end,
    if is_integer(Record#db_player_data.x) -> noop ;true -> exit({vaild_for_sql,player_data,x, Record#db_player_data.x}) end,
    if is_integer(Record#db_player_data.y) -> noop ;true -> exit({vaild_for_sql,player_data,y, Record#db_player_data.y}) end,
    if is_integer(Record#db_player_data.fight_mode) -> noop ;true -> exit({vaild_for_sql,player_data,fight_mode, Record#db_player_data.fight_mode}) end,
    if is_integer(Record#db_player_data.mount_status) -> noop ;true -> exit({vaild_for_sql,player_data,mount_status, Record#db_player_data.mount_status}) end,
    if is_integer(Record#db_player_data.game_event_id) -> noop ;true -> exit({vaild_for_sql,player_data,game_event_id, Record#db_player_data.game_event_id}) end;
ensure_to_sql(Record) when is_record(Record, db_player_daily_task) ->
    if is_integer(Record#db_player_daily_task.player_id) -> noop ;true -> exit({vaild_for_sql,player_daily_task,player_id, Record#db_player_daily_task.player_id}) end,
    if is_integer(Record#db_player_daily_task.id) -> noop ;true -> exit({vaild_for_sql,player_daily_task,id, Record#db_player_daily_task.id}) end,
    if is_integer(Record#db_player_daily_task.value) -> noop ;true -> exit({vaild_for_sql,player_daily_task,value, Record#db_player_daily_task.value}) end,
    if is_integer(Record#db_player_daily_task.state) -> noop ;true -> exit({vaild_for_sql,player_daily_task,state, Record#db_player_daily_task.state}) end,
    if is_integer(Record#db_player_daily_task.change_time) -> noop ;true -> exit({vaild_for_sql,player_daily_task,change_time, Record#db_player_daily_task.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_daily_points) ->
    if is_integer(Record#db_player_daily_points.player_id) -> noop ;true -> exit({vaild_for_sql,player_daily_points,player_id, Record#db_player_daily_points.player_id}) end,
    if is_integer(Record#db_player_daily_points.bid) -> noop ;true -> exit({vaild_for_sql,player_daily_points,bid, Record#db_player_daily_points.bid}) end,
    if is_integer(Record#db_player_daily_points.create_time) -> noop ;true -> exit({vaild_for_sql,player_daily_points,create_time, Record#db_player_daily_points.create_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_conditions_data) ->
    if is_integer(Record#db_player_conditions_data.player_id) -> noop ;true -> exit({vaild_for_sql,player_conditions_data,player_id, Record#db_player_conditions_data.player_id}) end,
    if is_integer(Record#db_player_conditions_data.conditions_id) -> noop ;true -> exit({vaild_for_sql,player_conditions_data,conditions_id, Record#db_player_conditions_data.conditions_id}) end,
    if is_integer(Record#db_player_conditions_data.type) -> noop ;true -> exit({vaild_for_sql,player_conditions_data,type, Record#db_player_conditions_data.type}) end,
    if is_integer(Record#db_player_conditions_data.type2) -> noop ;true -> exit({vaild_for_sql,player_conditions_data,type2, Record#db_player_conditions_data.type2}) end,
    if is_integer(Record#db_player_conditions_data.conditions_type) -> noop ;true -> exit({vaild_for_sql,player_conditions_data,conditions_type, Record#db_player_conditions_data.conditions_type}) end,
    if is_integer(Record#db_player_conditions_data.count) -> noop ;true -> exit({vaild_for_sql,player_conditions_data,count, Record#db_player_conditions_data.count}) end,
    if is_integer(Record#db_player_conditions_data.change_time) -> noop ;true -> exit({vaild_for_sql,player_conditions_data,change_time, Record#db_player_conditions_data.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_condition_activity) ->
    if is_integer(Record#db_player_condition_activity.player_id) -> noop ;true -> exit({vaild_for_sql,player_condition_activity,player_id, Record#db_player_condition_activity.player_id}) end,
    if is_integer(Record#db_player_condition_activity.activity_id) -> noop ;true -> exit({vaild_for_sql,player_condition_activity,activity_id, Record#db_player_condition_activity.activity_id}) end,
    if is_integer(Record#db_player_condition_activity.activity_time) -> noop ;true -> exit({vaild_for_sql,player_condition_activity,activity_time, Record#db_player_condition_activity.activity_time}) end,
    if is_integer(Record#db_player_condition_activity.change_time) -> noop ;true -> exit({vaild_for_sql,player_condition_activity,change_time, Record#db_player_condition_activity.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_client_data) ->
    if is_integer(Record#db_player_client_data.player_id) -> noop ;true -> exit({vaild_for_sql,player_client_data,player_id, Record#db_player_client_data.player_id}) end,
    if is_list(Record#db_player_client_data.id) -> noop ;true -> exit({vaild_for_sql,player_client_data,id, Record#db_player_client_data.id}) end,
    if is_list(Record#db_player_client_data.value) -> noop ;true -> exit({vaild_for_sql,player_client_data,value, Record#db_player_client_data.value}) end,
    if is_integer(Record#db_player_client_data.time) -> noop ;true -> exit({vaild_for_sql,player_client_data,time, Record#db_player_client_data.time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_chat_data) ->
    if is_integer(Record#db_player_chat_data.player_id) -> noop ;true -> exit({vaild_for_sql,player_chat_data,player_id, Record#db_player_chat_data.player_id}) end,
    if is_integer(Record#db_player_chat_data.id) -> noop ;true -> exit({vaild_for_sql,player_chat_data,id, Record#db_player_chat_data.id}) end,
    if is_integer(Record#db_player_chat_data.send_player_id) -> noop ;true -> exit({vaild_for_sql,player_chat_data,send_player_id, Record#db_player_chat_data.send_player_id}) end,
    if is_list(Record#db_player_chat_data.chat_msg) -> noop ;true -> exit({vaild_for_sql,player_chat_data,chat_msg, Record#db_player_chat_data.chat_msg}) end,
    if is_integer(Record#db_player_chat_data.level) -> noop ;true -> exit({vaild_for_sql,player_chat_data,level, Record#db_player_chat_data.level}) end,
    if is_integer(Record#db_player_chat_data.vip_level) -> noop ;true -> exit({vaild_for_sql,player_chat_data,vip_level, Record#db_player_chat_data.vip_level}) end,
    if is_integer(Record#db_player_chat_data.head_id) -> noop ;true -> exit({vaild_for_sql,player_chat_data,head_id, Record#db_player_chat_data.head_id}) end,
    if is_list(Record#db_player_chat_data.nickname) -> noop ;true -> exit({vaild_for_sql,player_chat_data,nickname, Record#db_player_chat_data.nickname}) end,
    if is_integer(Record#db_player_chat_data.sex) -> noop ;true -> exit({vaild_for_sql,player_chat_data,sex, Record#db_player_chat_data.sex}) end,
    if is_integer(Record#db_player_chat_data.head_frame_id) -> noop ;true -> exit({vaild_for_sql,player_chat_data,head_frame_id, Record#db_player_chat_data.head_frame_id}) end,
    if is_integer(Record#db_player_chat_data.send_time) -> noop ;true -> exit({vaild_for_sql,player_chat_data,send_time, Record#db_player_chat_data.send_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_charge_shop) ->
    if is_integer(Record#db_player_charge_shop.player_id) -> noop ;true -> exit({vaild_for_sql,player_charge_shop,player_id, Record#db_player_charge_shop.player_id}) end,
    if is_integer(Record#db_player_charge_shop.id) -> noop ;true -> exit({vaild_for_sql,player_charge_shop,id, Record#db_player_charge_shop.id}) end,
    if is_integer(Record#db_player_charge_shop.count) -> noop ;true -> exit({vaild_for_sql,player_charge_shop,count, Record#db_player_charge_shop.count}) end,
    if is_integer(Record#db_player_charge_shop.change_time) -> noop ;true -> exit({vaild_for_sql,player_charge_shop,change_time, Record#db_player_charge_shop.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_charge_record) ->
    if is_list(Record#db_player_charge_record.order_id) -> noop ;true -> exit({vaild_for_sql,player_charge_record,order_id, Record#db_player_charge_record.order_id}) end,
    if is_list(Record#db_player_charge_record.platform_order_id) -> noop ;true -> exit({vaild_for_sql,player_charge_record,platform_order_id, Record#db_player_charge_record.platform_order_id}) end,
    if is_integer(Record#db_player_charge_record.player_id) -> noop ;true -> exit({vaild_for_sql,player_charge_record,player_id, Record#db_player_charge_record.player_id}) end,
    if is_integer(Record#db_player_charge_record.type) -> noop ;true -> exit({vaild_for_sql,player_charge_record,type, Record#db_player_charge_record.type}) end,
    if is_integer(Record#db_player_charge_record.game_charge_id) -> noop ;true -> exit({vaild_for_sql,player_charge_record,game_charge_id, Record#db_player_charge_record.game_charge_id}) end,
    if is_integer(Record#db_player_charge_record.charge_item_id) -> noop ;true -> exit({vaild_for_sql,player_charge_record,charge_item_id, Record#db_player_charge_record.charge_item_id}) end,
    if is_list(Record#db_player_charge_record.ip) orelse Record#db_player_charge_record.ip =:= undefined-> noop ;true -> exit({vaild_for_sql,player_charge_record,ip, Record#db_player_charge_record.ip}) end,
    if is_integer(Record#db_player_charge_record.value) -> noop ;true -> exit({vaild_for_sql,player_charge_record,value, Record#db_player_charge_record.value}) end,
    if is_float(Record#db_player_charge_record.money) -> noop ;true -> exit({vaild_for_sql,player_charge_record,money, Record#db_player_charge_record.money}) end,
    if is_integer(Record#db_player_charge_record.charge_state) -> noop ;true -> exit({vaild_for_sql,player_charge_record,charge_state, Record#db_player_charge_record.charge_state}) end,
    if is_float(Record#db_player_charge_record.rate) -> noop ;true -> exit({vaild_for_sql,player_charge_record,rate, Record#db_player_charge_record.rate}) end,
    if is_integer(Record#db_player_charge_record.source) -> noop ;true -> exit({vaild_for_sql,player_charge_record,source, Record#db_player_charge_record.source}) end,
    if is_integer(Record#db_player_charge_record.change_time) orelse Record#db_player_charge_record.change_time =:= undefined-> noop ;true -> exit({vaild_for_sql,player_charge_record,change_time, Record#db_player_charge_record.change_time}) end,
    if is_integer(Record#db_player_charge_record.create_time) -> noop ;true -> exit({vaild_for_sql,player_charge_record,create_time, Record#db_player_charge_record.create_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_charge_info_record) ->
    if is_integer(Record#db_player_charge_info_record.player_id) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,player_id, Record#db_player_charge_info_record.player_id}) end,
    if is_list(Record#db_player_charge_info_record.part_id) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,part_id, Record#db_player_charge_info_record.part_id}) end,
    if is_list(Record#db_player_charge_info_record.server_id) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,server_id, Record#db_player_charge_info_record.server_id}) end,
    if is_float(Record#db_player_charge_info_record.total_money) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,total_money, Record#db_player_charge_info_record.total_money}) end,
    if is_integer(Record#db_player_charge_info_record.charge_count) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,charge_count, Record#db_player_charge_info_record.charge_count}) end,
    if is_integer(Record#db_player_charge_info_record.charge_test_count) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,charge_test_count, Record#db_player_charge_info_record.charge_test_count}) end,
    if is_integer(Record#db_player_charge_info_record.gm_ingot_count) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,gm_ingot_count, Record#db_player_charge_info_record.gm_ingot_count}) end,
    if is_integer(Record#db_player_charge_info_record.gm_charge_count) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,gm_charge_count, Record#db_player_charge_info_record.gm_charge_count}) end,
    if is_integer(Record#db_player_charge_info_record.gm_charge_novip_count) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,gm_charge_novip_count, Record#db_player_charge_info_record.gm_charge_novip_count}) end,
    if is_float(Record#db_player_charge_info_record.max_money) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,max_money, Record#db_player_charge_info_record.max_money}) end,
    if is_float(Record#db_player_charge_info_record.min_money) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,min_money, Record#db_player_charge_info_record.min_money}) end,
    if is_integer(Record#db_player_charge_info_record.last_time) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,last_time, Record#db_player_charge_info_record.last_time}) end,
    if is_integer(Record#db_player_charge_info_record.first_time) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,first_time, Record#db_player_charge_info_record.first_time}) end,
    if is_integer(Record#db_player_charge_info_record.record_time) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,record_time, Record#db_player_charge_info_record.record_time}) end,
    if is_list(Record#db_player_charge_info_record.channel) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,channel, Record#db_player_charge_info_record.channel}) end,
    if is_integer(Record#db_player_charge_info_record.is_share) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,is_share, Record#db_player_charge_info_record.is_share}) end,
    if is_float(Record#db_player_charge_info_record.refused_money) -> noop ;true -> exit({vaild_for_sql,player_charge_info_record,refused_money, Record#db_player_charge_info_record.refused_money}) end;
ensure_to_sql(Record) when is_record(Record, db_player_charge_activity) ->
    if is_integer(Record#db_player_charge_activity.player_id) -> noop ;true -> exit({vaild_for_sql,player_charge_activity,player_id, Record#db_player_charge_activity.player_id}) end,
    if is_integer(Record#db_player_charge_activity.type) -> noop ;true -> exit({vaild_for_sql,player_charge_activity,type, Record#db_player_charge_activity.type}) end,
    if is_integer(Record#db_player_charge_activity.id) -> noop ;true -> exit({vaild_for_sql,player_charge_activity,id, Record#db_player_charge_activity.id}) end,
    if is_integer(Record#db_player_charge_activity.start_time) -> noop ;true -> exit({vaild_for_sql,player_charge_activity,start_time, Record#db_player_charge_activity.start_time}) end,
    if is_integer(Record#db_player_charge_activity.value) -> noop ;true -> exit({vaild_for_sql,player_charge_activity,value, Record#db_player_charge_activity.value}) end,
    if is_integer(Record#db_player_charge_activity.state) -> noop ;true -> exit({vaild_for_sql,player_charge_activity,state, Record#db_player_charge_activity.state}) end,
    if is_integer(Record#db_player_charge_activity.change_time) -> noop ;true -> exit({vaild_for_sql,player_charge_activity,change_time, Record#db_player_charge_activity.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_card_title) ->
    if is_integer(Record#db_player_card_title.player_id) -> noop ;true -> exit({vaild_for_sql,player_card_title,player_id, Record#db_player_card_title.player_id}) end,
    if is_integer(Record#db_player_card_title.card_title_id) -> noop ;true -> exit({vaild_for_sql,player_card_title,card_title_id, Record#db_player_card_title.card_title_id}) end;
ensure_to_sql(Record) when is_record(Record, db_player_card_summon) ->
    if is_integer(Record#db_player_card_summon.player_id) -> noop ;true -> exit({vaild_for_sql,player_card_summon,player_id, Record#db_player_card_summon.player_id}) end,
    if is_integer(Record#db_player_card_summon.once_cnt) -> noop ;true -> exit({vaild_for_sql,player_card_summon,once_cnt, Record#db_player_card_summon.once_cnt}) end,
    if is_integer(Record#db_player_card_summon.ten_times_cnt) -> noop ;true -> exit({vaild_for_sql,player_card_summon,ten_times_cnt, Record#db_player_card_summon.ten_times_cnt}) end;
ensure_to_sql(Record) when is_record(Record, db_player_card_book) ->
    if is_integer(Record#db_player_card_book.player_id) -> noop ;true -> exit({vaild_for_sql,player_card_book,player_id, Record#db_player_card_book.player_id}) end,
    if is_integer(Record#db_player_card_book.card_book_id) -> noop ;true -> exit({vaild_for_sql,player_card_book,card_book_id, Record#db_player_card_book.card_book_id}) end;
ensure_to_sql(Record) when is_record(Record, db_player_card) ->
    if is_integer(Record#db_player_card.player_id) -> noop ;true -> exit({vaild_for_sql,player_card,player_id, Record#db_player_card.player_id}) end,
    if is_integer(Record#db_player_card.card_id) -> noop ;true -> exit({vaild_for_sql,player_card,card_id, Record#db_player_card.card_id}) end,
    if is_integer(Record#db_player_card.state) -> noop ;true -> exit({vaild_for_sql,player_card,state, Record#db_player_card.state}) end,
    if is_integer(Record#db_player_card.num) -> noop ;true -> exit({vaild_for_sql,player_card,num, Record#db_player_card.num}) end;
ensure_to_sql(Record) when is_record(Record, db_player_bounty_task) ->
    if is_integer(Record#db_player_bounty_task.player_id) -> noop ;true -> exit({vaild_for_sql,player_bounty_task,player_id, Record#db_player_bounty_task.player_id}) end,
    if is_integer(Record#db_player_bounty_task.id) -> noop ;true -> exit({vaild_for_sql,player_bounty_task,id, Record#db_player_bounty_task.id}) end,
    if is_integer(Record#db_player_bounty_task.value) -> noop ;true -> exit({vaild_for_sql,player_bounty_task,value, Record#db_player_bounty_task.value}) end,
    if is_integer(Record#db_player_bounty_task.state) -> noop ;true -> exit({vaild_for_sql,player_bounty_task,state, Record#db_player_bounty_task.state}) end,
    if is_integer(Record#db_player_bounty_task.change_time) -> noop ;true -> exit({vaild_for_sql,player_bounty_task,change_time, Record#db_player_bounty_task.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_adjust_rebound) ->
    if is_integer(Record#db_player_adjust_rebound.player_id) -> noop ;true -> exit({vaild_for_sql,player_adjust_rebound,player_id, Record#db_player_adjust_rebound.player_id}) end,
    if is_integer(Record#db_player_adjust_rebound.rebound_type) -> noop ;true -> exit({vaild_for_sql,player_adjust_rebound,rebound_type, Record#db_player_adjust_rebound.rebound_type}) end,
    if is_integer(Record#db_player_adjust_rebound.trigger_times) -> noop ;true -> exit({vaild_for_sql,player_adjust_rebound,trigger_times, Record#db_player_adjust_rebound.trigger_times}) end,
    if is_integer(Record#db_player_adjust_rebound.trigger_time) -> noop ;true -> exit({vaild_for_sql,player_adjust_rebound,trigger_time, Record#db_player_adjust_rebound.trigger_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_activity_task) ->
    if is_integer(Record#db_player_activity_task.player_id) -> noop ;true -> exit({vaild_for_sql,player_activity_task,player_id, Record#db_player_activity_task.player_id}) end,
    if is_integer(Record#db_player_activity_task.activity_id) -> noop ;true -> exit({vaild_for_sql,player_activity_task,activity_id, Record#db_player_activity_task.activity_id}) end,
    if is_integer(Record#db_player_activity_task.task_type) -> noop ;true -> exit({vaild_for_sql,player_activity_task,task_type, Record#db_player_activity_task.task_type}) end,
    if is_integer(Record#db_player_activity_task.value) -> noop ;true -> exit({vaild_for_sql,player_activity_task,value, Record#db_player_activity_task.value}) end,
    if is_integer(Record#db_player_activity_task.change_time) -> noop ;true -> exit({vaild_for_sql,player_activity_task,change_time, Record#db_player_activity_task.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_activity_info) ->
    if is_integer(Record#db_player_activity_info.player_id) -> noop ;true -> exit({vaild_for_sql,player_activity_info,player_id, Record#db_player_activity_info.player_id}) end,
    if is_integer(Record#db_player_activity_info.activity_id) -> noop ;true -> exit({vaild_for_sql,player_activity_info,activity_id, Record#db_player_activity_info.activity_id}) end,
    if is_integer(Record#db_player_activity_info.state) -> noop ;true -> exit({vaild_for_sql,player_activity_info,state, Record#db_player_activity_info.state}) end,
    if is_integer(Record#db_player_activity_info.last_open_time) -> noop ;true -> exit({vaild_for_sql,player_activity_info,last_open_time, Record#db_player_activity_info.last_open_time}) end,
    if is_integer(Record#db_player_activity_info.last_close_time) -> noop ;true -> exit({vaild_for_sql,player_activity_info,last_close_time, Record#db_player_activity_info.last_close_time}) end,
    if is_integer(Record#db_player_activity_info.config_open_time) -> noop ;true -> exit({vaild_for_sql,player_activity_info,config_open_time, Record#db_player_activity_info.config_open_time}) end,
    if is_integer(Record#db_player_activity_info.config_close_time) -> noop ;true -> exit({vaild_for_sql,player_activity_info,config_close_time, Record#db_player_activity_info.config_close_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_activity_game_info) ->
    if is_integer(Record#db_player_activity_game_info.player_id) -> noop ;true -> exit({vaild_for_sql,player_activity_game_info,player_id, Record#db_player_activity_game_info.player_id}) end,
    if is_integer(Record#db_player_activity_game_info.activity_id) -> noop ;true -> exit({vaild_for_sql,player_activity_game_info,activity_id, Record#db_player_activity_game_info.activity_id}) end,
    if is_integer(Record#db_player_activity_game_info.game_id) -> noop ;true -> exit({vaild_for_sql,player_activity_game_info,game_id, Record#db_player_activity_game_info.game_id}) end,
    if is_integer(Record#db_player_activity_game_info.activity_start_time) -> noop ;true -> exit({vaild_for_sql,player_activity_game_info,activity_start_time, Record#db_player_activity_game_info.activity_start_time}) end,
    if is_integer(Record#db_player_activity_game_info.state) -> noop ;true -> exit({vaild_for_sql,player_activity_game_info,state, Record#db_player_activity_game_info.state}) end,
    if is_integer(Record#db_player_activity_game_info.times) -> noop ;true -> exit({vaild_for_sql,player_activity_game_info,times, Record#db_player_activity_game_info.times}) end,
    if is_integer(Record#db_player_activity_game_info.change_time) -> noop ;true -> exit({vaild_for_sql,player_activity_game_info,change_time, Record#db_player_activity_game_info.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_activity_game) ->
    if is_integer(Record#db_player_activity_game.player_id) -> noop ;true -> exit({vaild_for_sql,player_activity_game,player_id, Record#db_player_activity_game.player_id}) end,
    if is_integer(Record#db_player_activity_game.activity_id) -> noop ;true -> exit({vaild_for_sql,player_activity_game,activity_id, Record#db_player_activity_game.activity_id}) end,
    if is_integer(Record#db_player_activity_game.activity_start_time) -> noop ;true -> exit({vaild_for_sql,player_activity_game,activity_start_time, Record#db_player_activity_game.activity_start_time}) end,
    if is_integer(Record#db_player_activity_game.value) -> noop ;true -> exit({vaild_for_sql,player_activity_game,value, Record#db_player_activity_game.value}) end,
    if is_integer(Record#db_player_activity_game.change_time) -> noop ;true -> exit({vaild_for_sql,player_activity_game,change_time, Record#db_player_activity_game.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_activity_condition) ->
    if is_integer(Record#db_player_activity_condition.player_id) -> noop ;true -> exit({vaild_for_sql,player_activity_condition,player_id, Record#db_player_activity_condition.player_id}) end,
    if is_integer(Record#db_player_activity_condition.activity_id) -> noop ;true -> exit({vaild_for_sql,player_activity_condition,activity_id, Record#db_player_activity_condition.activity_id}) end,
    if is_integer(Record#db_player_activity_condition.condition_id) -> noop ;true -> exit({vaild_for_sql,player_activity_condition,condition_id, Record#db_player_activity_condition.condition_id}) end,
    if is_integer(Record#db_player_activity_condition.value) -> noop ;true -> exit({vaild_for_sql,player_activity_condition,value, Record#db_player_activity_condition.value}) end,
    if is_integer(Record#db_player_activity_condition.activity_time) -> noop ;true -> exit({vaild_for_sql,player_activity_condition,activity_time, Record#db_player_activity_condition.activity_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player_achievement) ->
    if is_integer(Record#db_player_achievement.player_id) -> noop ;true -> exit({vaild_for_sql,player_achievement,player_id, Record#db_player_achievement.player_id}) end,
    if is_integer(Record#db_player_achievement.type) -> noop ;true -> exit({vaild_for_sql,player_achievement,type, Record#db_player_achievement.type}) end,
    if is_integer(Record#db_player_achievement.id) -> noop ;true -> exit({vaild_for_sql,player_achievement,id, Record#db_player_achievement.id}) end,
    if is_integer(Record#db_player_achievement.state) -> noop ;true -> exit({vaild_for_sql,player_achievement,state, Record#db_player_achievement.state}) end,
    if is_integer(Record#db_player_achievement.change_time) -> noop ;true -> exit({vaild_for_sql,player_achievement,change_time, Record#db_player_achievement.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_player) ->
    if is_integer(Record#db_player.id) -> noop ;true -> exit({vaild_for_sql,player,id, Record#db_player.id}) end,
    if is_list(Record#db_player.acc_id) -> noop ;true -> exit({vaild_for_sql,player,acc_id, Record#db_player.acc_id}) end,
    if is_list(Record#db_player.server_id) -> noop ;true -> exit({vaild_for_sql,player,server_id, Record#db_player.server_id}) end,
    if is_list(Record#db_player.nickname) -> noop ;true -> exit({vaild_for_sql,player,nickname, Record#db_player.nickname}) end,
    if is_integer(Record#db_player.sex) -> noop ;true -> exit({vaild_for_sql,player,sex, Record#db_player.sex}) end,
    if is_integer(Record#db_player.forbid_type) -> noop ;true -> exit({vaild_for_sql,player,forbid_type, Record#db_player.forbid_type}) end,
    if is_integer(Record#db_player.forbid_time) -> noop ;true -> exit({vaild_for_sql,player,forbid_time, Record#db_player.forbid_time}) end,
    if is_integer(Record#db_player.reg_time) -> noop ;true -> exit({vaild_for_sql,player,reg_time, Record#db_player.reg_time}) end,
    if is_integer(Record#db_player.last_login_time) -> noop ;true -> exit({vaild_for_sql,player,last_login_time, Record#db_player.last_login_time}) end,
    if is_integer(Record#db_player.last_offline_time) -> noop ;true -> exit({vaild_for_sql,player,last_offline_time, Record#db_player.last_offline_time}) end,
    if is_integer(Record#db_player.total_online_time) -> noop ;true -> exit({vaild_for_sql,player,total_online_time, Record#db_player.total_online_time}) end,
    if is_list(Record#db_player.last_login_ip) -> noop ;true -> exit({vaild_for_sql,player,last_login_ip, Record#db_player.last_login_ip}) end,
    if is_list(Record#db_player.from) -> noop ;true -> exit({vaild_for_sql,player,from, Record#db_player.from}) end,
    if is_integer(Record#db_player.login_times) -> noop ;true -> exit({vaild_for_sql,player,login_times, Record#db_player.login_times}) end,
    if is_integer(Record#db_player.cumulative_day) -> noop ;true -> exit({vaild_for_sql,player,cumulative_day, Record#db_player.cumulative_day}) end,
    if is_integer(Record#db_player.continuous_day) -> noop ;true -> exit({vaild_for_sql,player,continuous_day, Record#db_player.continuous_day}) end,
    if is_integer(Record#db_player.total_recharge_ingot) -> noop ;true -> exit({vaild_for_sql,player,total_recharge_ingot, Record#db_player.total_recharge_ingot}) end,
    if is_integer(Record#db_player.last_recharge_time) -> noop ;true -> exit({vaild_for_sql,player,last_recharge_time, Record#db_player.last_recharge_time}) end,
    if is_integer(Record#db_player.recharge_times) -> noop ;true -> exit({vaild_for_sql,player,recharge_times, Record#db_player.recharge_times}) end,
    if is_integer(Record#db_player.is_pass_fcm) -> noop ;true -> exit({vaild_for_sql,player,is_pass_fcm, Record#db_player.is_pass_fcm}) end,
    if is_integer(Record#db_player.type) -> noop ;true -> exit({vaild_for_sql,player,type, Record#db_player.type}) end,
    if is_integer(Record#db_player.is_online) -> noop ;true -> exit({vaild_for_sql,player,is_online, Record#db_player.is_online}) end,
    if is_list(Record#db_player.channel) -> noop ;true -> exit({vaild_for_sql,player,channel, Record#db_player.channel}) end,
    if is_list(Record#db_player.friend_code) -> noop ;true -> exit({vaild_for_sql,player,friend_code, Record#db_player.friend_code}) end,
    if is_list(Record#db_player.oauth_source) -> noop ;true -> exit({vaild_for_sql,player,oauth_source, Record#db_player.oauth_source}) end;
ensure_to_sql(Record) when is_record(Record, db_one_vs_one_rank_data) ->
    if is_integer(Record#db_one_vs_one_rank_data.type) -> noop ;true -> exit({vaild_for_sql,one_vs_one_rank_data,type, Record#db_one_vs_one_rank_data.type}) end,
    if is_integer(Record#db_one_vs_one_rank_data.player_id) -> noop ;true -> exit({vaild_for_sql,one_vs_one_rank_data,player_id, Record#db_one_vs_one_rank_data.player_id}) end,
    if is_integer(Record#db_one_vs_one_rank_data.score) -> noop ;true -> exit({vaild_for_sql,one_vs_one_rank_data,score, Record#db_one_vs_one_rank_data.score}) end,
    if is_integer(Record#db_one_vs_one_rank_data.time) -> noop ;true -> exit({vaild_for_sql,one_vs_one_rank_data,time, Record#db_one_vs_one_rank_data.time}) end;
ensure_to_sql(Record) when is_record(Record, db_oauth_order_log) ->
    if is_list(Record#db_oauth_order_log.order_id) -> noop ;true -> exit({vaild_for_sql,oauth_order_log,order_id, Record#db_oauth_order_log.order_id}) end,
    if is_integer(Record#db_oauth_order_log.player_id) -> noop ;true -> exit({vaild_for_sql,oauth_order_log,player_id, Record#db_oauth_order_log.player_id}) end,
    if is_integer(Record#db_oauth_order_log.buyer_player_id) -> noop ;true -> exit({vaild_for_sql,oauth_order_log,buyer_player_id, Record#db_oauth_order_log.buyer_player_id}) end,
    if is_integer(Record#db_oauth_order_log.prop_id) -> noop ;true -> exit({vaild_for_sql,oauth_order_log,prop_id, Record#db_oauth_order_log.prop_id}) end,
    if is_integer(Record#db_oauth_order_log.change_type) -> noop ;true -> exit({vaild_for_sql,oauth_order_log,change_type, Record#db_oauth_order_log.change_type}) end,
    if is_integer(Record#db_oauth_order_log.change_num) -> noop ;true -> exit({vaild_for_sql,oauth_order_log,change_num, Record#db_oauth_order_log.change_num}) end,
    if is_integer(Record#db_oauth_order_log.status) -> noop ;true -> exit({vaild_for_sql,oauth_order_log,status, Record#db_oauth_order_log.status}) end,
    if is_float(Record#db_oauth_order_log.amount) -> noop ;true -> exit({vaild_for_sql,oauth_order_log,amount, Record#db_oauth_order_log.amount}) end,
    if is_list(Record#db_oauth_order_log.ip) -> noop ;true -> exit({vaild_for_sql,oauth_order_log,ip, Record#db_oauth_order_log.ip}) end,
    if is_integer(Record#db_oauth_order_log.create_time) -> noop ;true -> exit({vaild_for_sql,oauth_order_log,create_time, Record#db_oauth_order_log.create_time}) end,
    if is_integer(Record#db_oauth_order_log.update_time) -> noop ;true -> exit({vaild_for_sql,oauth_order_log,update_time, Record#db_oauth_order_log.update_time}) end;
ensure_to_sql(Record) when is_record(Record, db_mission_ranking) ->
    if is_integer(Record#db_mission_ranking.mission_type) -> noop ;true -> exit({vaild_for_sql,mission_ranking,mission_type, Record#db_mission_ranking.mission_type}) end,
    if is_integer(Record#db_mission_ranking.mission_id) -> noop ;true -> exit({vaild_for_sql,mission_ranking,mission_id, Record#db_mission_ranking.mission_id}) end,
    if is_integer(Record#db_mission_ranking.id) -> noop ;true -> exit({vaild_for_sql,mission_ranking,id, Record#db_mission_ranking.id}) end,
    if is_integer(Record#db_mission_ranking.player_id) -> noop ;true -> exit({vaild_for_sql,mission_ranking,player_id, Record#db_mission_ranking.player_id}) end,
    if is_integer(Record#db_mission_ranking.rank_id) -> noop ;true -> exit({vaild_for_sql,mission_ranking,rank_id, Record#db_mission_ranking.rank_id}) end,
    if is_list(Record#db_mission_ranking.nickname) -> noop ;true -> exit({vaild_for_sql,mission_ranking,nickname, Record#db_mission_ranking.nickname}) end,
    if is_integer(Record#db_mission_ranking.hurt) -> noop ;true -> exit({vaild_for_sql,mission_ranking,hurt, Record#db_mission_ranking.hurt}) end,
    if is_integer(Record#db_mission_ranking.time) -> noop ;true -> exit({vaild_for_sql,mission_ranking,time, Record#db_mission_ranking.time}) end;
ensure_to_sql(Record) when is_record(Record, db_mission_guess_boss) ->
    if is_integer(Record#db_mission_guess_boss.id) -> noop ;true -> exit({vaild_for_sql,mission_guess_boss,id, Record#db_mission_guess_boss.id}) end,
    if is_integer(Record#db_mission_guess_boss.boss_id) -> noop ;true -> exit({vaild_for_sql,mission_guess_boss,boss_id, Record#db_mission_guess_boss.boss_id}) end,
    if is_integer(Record#db_mission_guess_boss.player_total_cost) -> noop ;true -> exit({vaild_for_sql,mission_guess_boss,player_total_cost, Record#db_mission_guess_boss.player_total_cost}) end,
    if is_integer(Record#db_mission_guess_boss.player_total_award) -> noop ;true -> exit({vaild_for_sql,mission_guess_boss,player_total_award, Record#db_mission_guess_boss.player_total_award}) end,
    if is_integer(Record#db_mission_guess_boss.time) -> noop ;true -> exit({vaild_for_sql,mission_guess_boss,time, Record#db_mission_guess_boss.time}) end;
ensure_to_sql(Record) when is_record(Record, db_match_scene_data) ->
    if is_integer(Record#db_match_scene_data.id) -> noop ;true -> exit({vaild_for_sql,match_scene_data,id, Record#db_match_scene_data.id}) end,
    if is_integer(Record#db_match_scene_data.player_id) -> noop ;true -> exit({vaild_for_sql,match_scene_data,player_id, Record#db_match_scene_data.player_id}) end,
    if is_integer(Record#db_match_scene_data.score) -> noop ;true -> exit({vaild_for_sql,match_scene_data,score, Record#db_match_scene_data.score}) end,
    if is_integer(Record#db_match_scene_data.award) -> noop ;true -> exit({vaild_for_sql,match_scene_data,award, Record#db_match_scene_data.award}) end,
    if is_integer(Record#db_match_scene_data.last_time) -> noop ;true -> exit({vaild_for_sql,match_scene_data,last_time, Record#db_match_scene_data.last_time}) end;
ensure_to_sql(Record) when is_record(Record, db_login_notice) ->
    if is_list(Record#db_login_notice.platform_id) -> noop ;true -> exit({vaild_for_sql,login_notice,platform_id, Record#db_login_notice.platform_id}) end,
    if is_list(Record#db_login_notice.channel_id) -> noop ;true -> exit({vaild_for_sql,login_notice,channel_id, Record#db_login_notice.channel_id}) end,
    if is_list(Record#db_login_notice.content) -> noop ;true -> exit({vaild_for_sql,login_notice,content, Record#db_login_notice.content}) end;
ensure_to_sql(Record) when is_record(Record, db_laba_adjust) ->
    if is_integer(Record#db_laba_adjust.laba_id) -> noop ;true -> exit({vaild_for_sql,laba_adjust,laba_id, Record#db_laba_adjust.laba_id}) end,
    if is_integer(Record#db_laba_adjust.cost_rate) -> noop ;true -> exit({vaild_for_sql,laba_adjust,cost_rate, Record#db_laba_adjust.cost_rate}) end,
    if is_integer(Record#db_laba_adjust.pool) orelse Record#db_laba_adjust.pool =:= undefined-> noop ;true -> exit({vaild_for_sql,laba_adjust,pool, Record#db_laba_adjust.pool}) end;
ensure_to_sql(Record) when is_record(Record, db_jiangjinchi) ->
    if is_integer(Record#db_jiangjinchi.scene_id) -> noop ;true -> exit({vaild_for_sql,jiangjinchi,scene_id, Record#db_jiangjinchi.scene_id}) end,
    if is_integer(Record#db_jiangjinchi.pool) -> noop ;true -> exit({vaild_for_sql,jiangjinchi,pool, Record#db_jiangjinchi.pool}) end,
    if is_integer(Record#db_jiangjinchi.change_time) -> noop ;true -> exit({vaild_for_sql,jiangjinchi,change_time, Record#db_jiangjinchi.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_gift_code_type) ->
    if is_integer(Record#db_gift_code_type.type) -> noop ;true -> exit({vaild_for_sql,gift_code_type,type, Record#db_gift_code_type.type}) end,
    if is_list(Record#db_gift_code_type.name) -> noop ;true -> exit({vaild_for_sql,gift_code_type,name, Record#db_gift_code_type.name}) end,
    if is_list(Record#db_gift_code_type.platform_id) -> noop ;true -> exit({vaild_for_sql,gift_code_type,platform_id, Record#db_gift_code_type.platform_id}) end,
    if is_list(Record#db_gift_code_type.channel_list) -> noop ;true -> exit({vaild_for_sql,gift_code_type,channel_list, Record#db_gift_code_type.channel_list}) end,
    if is_list(Record#db_gift_code_type.award_list) -> noop ;true -> exit({vaild_for_sql,gift_code_type,award_list, Record#db_gift_code_type.award_list}) end,
    if is_integer(Record#db_gift_code_type.user_id) -> noop ;true -> exit({vaild_for_sql,gift_code_type,user_id, Record#db_gift_code_type.user_id}) end,
    if is_integer(Record#db_gift_code_type.kind) -> noop ;true -> exit({vaild_for_sql,gift_code_type,kind, Record#db_gift_code_type.kind}) end,
    if is_integer(Record#db_gift_code_type.num) -> noop ;true -> exit({vaild_for_sql,gift_code_type,num, Record#db_gift_code_type.num}) end,
    if is_integer(Record#db_gift_code_type.allow_role_repeated_get) -> noop ;true -> exit({vaild_for_sql,gift_code_type,allow_role_repeated_get, Record#db_gift_code_type.allow_role_repeated_get}) end,
    if is_integer(Record#db_gift_code_type.vip_limit) -> noop ;true -> exit({vaild_for_sql,gift_code_type,vip_limit, Record#db_gift_code_type.vip_limit}) end,
    if is_integer(Record#db_gift_code_type.level_limit) -> noop ;true -> exit({vaild_for_sql,gift_code_type,level_limit, Record#db_gift_code_type.level_limit}) end,
    if is_integer(Record#db_gift_code_type.expire_time) -> noop ;true -> exit({vaild_for_sql,gift_code_type,expire_time, Record#db_gift_code_type.expire_time}) end,
    if is_integer(Record#db_gift_code_type.update_time) -> noop ;true -> exit({vaild_for_sql,gift_code_type,update_time, Record#db_gift_code_type.update_time}) end;
ensure_to_sql(Record) when is_record(Record, db_gift_code) ->
    if is_list(Record#db_gift_code.gift_code) -> noop ;true -> exit({vaild_for_sql,gift_code,gift_code, Record#db_gift_code.gift_code}) end,
    if is_integer(Record#db_gift_code.gift_code_type) -> noop ;true -> exit({vaild_for_sql,gift_code,gift_code_type, Record#db_gift_code.gift_code_type}) end;
ensure_to_sql(Record) when is_record(Record, db_consume_statistics) ->
    if is_integer(Record#db_consume_statistics.player_id) -> noop ;true -> exit({vaild_for_sql,consume_statistics,player_id, Record#db_consume_statistics.player_id}) end,
    if is_integer(Record#db_consume_statistics.prop_id) -> noop ;true -> exit({vaild_for_sql,consume_statistics,prop_id, Record#db_consume_statistics.prop_id}) end,
    if is_integer(Record#db_consume_statistics.type) -> noop ;true -> exit({vaild_for_sql,consume_statistics,type, Record#db_consume_statistics.type}) end,
    if is_integer(Record#db_consume_statistics.log_type) -> noop ;true -> exit({vaild_for_sql,consume_statistics,log_type, Record#db_consume_statistics.log_type}) end,
    if is_integer(Record#db_consume_statistics.value) -> noop ;true -> exit({vaild_for_sql,consume_statistics,value, Record#db_consume_statistics.value}) end,
    if is_integer(Record#db_consume_statistics.scene_id) -> noop ;true -> exit({vaild_for_sql,consume_statistics,scene_id, Record#db_consume_statistics.scene_id}) end;
ensure_to_sql(Record) when is_record(Record, db_client_versin) ->
    if is_list(Record#db_client_versin.version) -> noop ;true -> exit({vaild_for_sql,client_versin,version, Record#db_client_versin.version}) end,
    if is_integer(Record#db_client_versin.is_release) -> noop ;true -> exit({vaild_for_sql,client_versin,is_release, Record#db_client_versin.is_release}) end,
    if is_integer(Record#db_client_versin.time) -> noop ;true -> exit({vaild_for_sql,client_versin,time, Record#db_client_versin.time}) end;
ensure_to_sql(Record) when is_record(Record, db_charge_order_request_record) ->
    if is_list(Record#db_charge_order_request_record.order_id) -> noop ;true -> exit({vaild_for_sql,charge_order_request_record,order_id, Record#db_charge_order_request_record.order_id}) end,
    if is_list(Record#db_charge_order_request_record.param_str) -> noop ;true -> exit({vaild_for_sql,charge_order_request_record,param_str, Record#db_charge_order_request_record.param_str}) end,
    if is_integer(Record#db_charge_order_request_record.change_time) -> noop ;true -> exit({vaild_for_sql,charge_order_request_record,change_time, Record#db_charge_order_request_record.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_charge_ip_white_record) ->
    if is_list(Record#db_charge_ip_white_record.ip) -> noop ;true -> exit({vaild_for_sql,charge_ip_white_record,ip, Record#db_charge_ip_white_record.ip}) end,
    if is_list(Record#db_charge_ip_white_record.name) -> noop ;true -> exit({vaild_for_sql,charge_ip_white_record,name, Record#db_charge_ip_white_record.name}) end,
    if is_integer(Record#db_charge_ip_white_record.state) -> noop ;true -> exit({vaild_for_sql,charge_ip_white_record,state, Record#db_charge_ip_white_record.state}) end,
    if is_integer(Record#db_charge_ip_white_record.record_time) -> noop ;true -> exit({vaild_for_sql,charge_ip_white_record,record_time, Record#db_charge_ip_white_record.record_time}) end;
ensure_to_sql(Record) when is_record(Record, db_charge_info_record) ->
    if is_list(Record#db_charge_info_record.order_id) -> noop ;true -> exit({vaild_for_sql,charge_info_record,order_id, Record#db_charge_info_record.order_id}) end,
    if is_integer(Record#db_charge_info_record.charge_type) -> noop ;true -> exit({vaild_for_sql,charge_info_record,charge_type, Record#db_charge_info_record.charge_type}) end,
    if is_list(Record#db_charge_info_record.ip) -> noop ;true -> exit({vaild_for_sql,charge_info_record,ip, Record#db_charge_info_record.ip}) end,
    if is_list(Record#db_charge_info_record.part_id) -> noop ;true -> exit({vaild_for_sql,charge_info_record,part_id, Record#db_charge_info_record.part_id}) end,
    if is_list(Record#db_charge_info_record.server_id) -> noop ;true -> exit({vaild_for_sql,charge_info_record,server_id, Record#db_charge_info_record.server_id}) end,
    if is_list(Record#db_charge_info_record.node) -> noop ;true -> exit({vaild_for_sql,charge_info_record,node, Record#db_charge_info_record.node}) end,
    if is_integer(Record#db_charge_info_record.game_charge_id) -> noop ;true -> exit({vaild_for_sql,charge_info_record,game_charge_id, Record#db_charge_info_record.game_charge_id}) end,
    if is_integer(Record#db_charge_info_record.charge_item_id) -> noop ;true -> exit({vaild_for_sql,charge_info_record,charge_item_id, Record#db_charge_info_record.charge_item_id}) end,
    if is_list(Record#db_charge_info_record.acc_id) -> noop ;true -> exit({vaild_for_sql,charge_info_record,acc_id, Record#db_charge_info_record.acc_id}) end,
    if is_integer(Record#db_charge_info_record.player_id) -> noop ;true -> exit({vaild_for_sql,charge_info_record,player_id, Record#db_charge_info_record.player_id}) end,
    if is_integer(Record#db_charge_info_record.is_first) -> noop ;true -> exit({vaild_for_sql,charge_info_record,is_first, Record#db_charge_info_record.is_first}) end,
    if is_integer(Record#db_charge_info_record.curr_level) -> noop ;true -> exit({vaild_for_sql,charge_info_record,curr_level, Record#db_charge_info_record.curr_level}) end,
    if is_integer(Record#db_charge_info_record.curr_task_id) -> noop ;true -> exit({vaild_for_sql,charge_info_record,curr_task_id, Record#db_charge_info_record.curr_task_id}) end,
    if is_integer(Record#db_charge_info_record.reg_time) -> noop ;true -> exit({vaild_for_sql,charge_info_record,reg_time, Record#db_charge_info_record.reg_time}) end,
    if is_integer(Record#db_charge_info_record.first_time) -> noop ;true -> exit({vaild_for_sql,charge_info_record,first_time, Record#db_charge_info_record.first_time}) end,
    if is_integer(Record#db_charge_info_record.curr_power) -> noop ;true -> exit({vaild_for_sql,charge_info_record,curr_power, Record#db_charge_info_record.curr_power}) end,
    if is_float(Record#db_charge_info_record.money) -> noop ;true -> exit({vaild_for_sql,charge_info_record,money, Record#db_charge_info_record.money}) end,
    if is_integer(Record#db_charge_info_record.ingot) -> noop ;true -> exit({vaild_for_sql,charge_info_record,ingot, Record#db_charge_info_record.ingot}) end,
    if is_integer(Record#db_charge_info_record.record_time) -> noop ;true -> exit({vaild_for_sql,charge_info_record,record_time, Record#db_charge_info_record.record_time}) end,
    if is_list(Record#db_charge_info_record.channel) -> noop ;true -> exit({vaild_for_sql,charge_info_record,channel, Record#db_charge_info_record.channel}) end,
    if is_integer(Record#db_charge_info_record.status) -> noop ;true -> exit({vaild_for_sql,charge_info_record,status, Record#db_charge_info_record.status}) end,
    if is_integer(Record#db_charge_info_record.source) -> noop ;true -> exit({vaild_for_sql,charge_info_record,source, Record#db_charge_info_record.source}) end,
    if is_integer(Record#db_charge_info_record.gold) -> noop ;true -> exit({vaild_for_sql,charge_info_record,gold, Record#db_charge_info_record.gold}) end,
    if is_integer(Record#db_charge_info_record.bounty) -> noop ;true -> exit({vaild_for_sql,charge_info_record,bounty, Record#db_charge_info_record.bounty}) end,
    if is_integer(Record#db_charge_info_record.coupon) -> noop ;true -> exit({vaild_for_sql,charge_info_record,coupon, Record#db_charge_info_record.coupon}) end;
ensure_to_sql(Record) when is_record(Record, db_c_server_node) ->
    if is_list(Record#db_c_server_node.node) -> noop ;true -> exit({vaild_for_sql,c_server_node,node, Record#db_c_server_node.node}) end,
    if is_list(Record#db_c_server_node.ip) -> noop ;true -> exit({vaild_for_sql,c_server_node,ip, Record#db_c_server_node.ip}) end,
    if is_integer(Record#db_c_server_node.port) -> noop ;true -> exit({vaild_for_sql,c_server_node,port, Record#db_c_server_node.port}) end,
    if is_integer(Record#db_c_server_node.web_port) -> noop ;true -> exit({vaild_for_sql,c_server_node,web_port, Record#db_c_server_node.web_port}) end,
    if is_list(Record#db_c_server_node.db_host) -> noop ;true -> exit({vaild_for_sql,c_server_node,db_host, Record#db_c_server_node.db_host}) end,
    if is_integer(Record#db_c_server_node.db_port) -> noop ;true -> exit({vaild_for_sql,c_server_node,db_port, Record#db_c_server_node.db_port}) end,
    if is_list(Record#db_c_server_node.db_name) -> noop ;true -> exit({vaild_for_sql,c_server_node,db_name, Record#db_c_server_node.db_name}) end,
    if is_integer(Record#db_c_server_node.type) -> noop ;true -> exit({vaild_for_sql,c_server_node,type, Record#db_c_server_node.type}) end,
    if is_list(Record#db_c_server_node.zone_node) -> noop ;true -> exit({vaild_for_sql,c_server_node,zone_node, Record#db_c_server_node.zone_node}) end,
    if is_integer(Record#db_c_server_node.open_time) -> noop ;true -> exit({vaild_for_sql,c_server_node,open_time, Record#db_c_server_node.open_time}) end,
    if is_integer(Record#db_c_server_node.state) -> noop ;true -> exit({vaild_for_sql,c_server_node,state, Record#db_c_server_node.state}) end,
    if is_integer(Record#db_c_server_node.run_state) -> noop ;true -> exit({vaild_for_sql,c_server_node,run_state, Record#db_c_server_node.run_state}) end,
    if is_list(Record#db_c_server_node.platform_id) -> noop ;true -> exit({vaild_for_sql,c_server_node,platform_id, Record#db_c_server_node.platform_id}) end;
ensure_to_sql(Record) when is_record(Record, db_c_game_server) ->
    if is_list(Record#db_c_game_server.platform_id) -> noop ;true -> exit({vaild_for_sql,c_game_server,platform_id, Record#db_c_game_server.platform_id}) end,
    if is_list(Record#db_c_game_server.sid) -> noop ;true -> exit({vaild_for_sql,c_game_server,sid, Record#db_c_game_server.sid}) end,
    if is_list(Record#db_c_game_server.desc) -> noop ;true -> exit({vaild_for_sql,c_game_server,desc, Record#db_c_game_server.desc}) end,
    if is_integer(Record#db_c_game_server.is_show) -> noop ;true -> exit({vaild_for_sql,c_game_server,is_show, Record#db_c_game_server.is_show}) end,
    if is_list(Record#db_c_game_server.node) -> noop ;true -> exit({vaild_for_sql,c_game_server,node, Record#db_c_game_server.node}) end;
ensure_to_sql(Record) when is_record(Record, db_brave_one) ->
    if is_integer(Record#db_brave_one.player_id) -> noop ;true -> exit({vaild_for_sql,brave_one,player_id, Record#db_brave_one.player_id}) end,
    if is_integer(Record#db_brave_one.id) -> noop ;true -> exit({vaild_for_sql,brave_one,id, Record#db_brave_one.id}) end,
    if is_integer(Record#db_brave_one.pos_id) -> noop ;true -> exit({vaild_for_sql,brave_one,pos_id, Record#db_brave_one.pos_id}) end,
    if is_integer(Record#db_brave_one.brave_type) -> noop ;true -> exit({vaild_for_sql,brave_one,brave_type, Record#db_brave_one.brave_type}) end,
    if is_integer(Record#db_brave_one.start_time) -> noop ;true -> exit({vaild_for_sql,brave_one,start_time, Record#db_brave_one.start_time}) end,
    if is_integer(Record#db_brave_one.fight_player_id) -> noop ;true -> exit({vaild_for_sql,brave_one,fight_player_id, Record#db_brave_one.fight_player_id}) end,
    if is_integer(Record#db_brave_one.change_time) -> noop ;true -> exit({vaild_for_sql,brave_one,change_time, Record#db_brave_one.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_boss_one_on_one) ->
    if is_integer(Record#db_boss_one_on_one.id) -> noop ;true -> exit({vaild_for_sql,boss_one_on_one,id, Record#db_boss_one_on_one.id}) end,
    if is_integer(Record#db_boss_one_on_one.home_boss) -> noop ;true -> exit({vaild_for_sql,boss_one_on_one,home_boss, Record#db_boss_one_on_one.home_boss}) end,
    if is_integer(Record#db_boss_one_on_one.away_boss) -> noop ;true -> exit({vaild_for_sql,boss_one_on_one,away_boss, Record#db_boss_one_on_one.away_boss}) end,
    if is_integer(Record#db_boss_one_on_one.player_total_cost) -> noop ;true -> exit({vaild_for_sql,boss_one_on_one,player_total_cost, Record#db_boss_one_on_one.player_total_cost}) end,
    if is_integer(Record#db_boss_one_on_one.player_total_award) -> noop ;true -> exit({vaild_for_sql,boss_one_on_one,player_total_award, Record#db_boss_one_on_one.player_total_award}) end,
    if is_integer(Record#db_boss_one_on_one.winner) -> noop ;true -> exit({vaild_for_sql,boss_one_on_one,winner, Record#db_boss_one_on_one.winner}) end,
    if is_integer(Record#db_boss_one_on_one.created_time) -> noop ;true -> exit({vaild_for_sql,boss_one_on_one,created_time, Record#db_boss_one_on_one.created_time}) end;
ensure_to_sql(Record) when is_record(Record, db_activity_info) ->
    if is_integer(Record#db_activity_info.activity_id) -> noop ;true -> exit({vaild_for_sql,activity_info,activity_id, Record#db_activity_info.activity_id}) end,
    if is_integer(Record#db_activity_info.state) -> noop ;true -> exit({vaild_for_sql,activity_info,state, Record#db_activity_info.state}) end,
    if is_integer(Record#db_activity_info.last_open_time) -> noop ;true -> exit({vaild_for_sql,activity_info,last_open_time, Record#db_activity_info.last_open_time}) end,
    if is_integer(Record#db_activity_info.last_close_time) -> noop ;true -> exit({vaild_for_sql,activity_info,last_close_time, Record#db_activity_info.last_close_time}) end,
    if is_integer(Record#db_activity_info.config_open_time) -> noop ;true -> exit({vaild_for_sql,activity_info,config_open_time, Record#db_activity_info.config_open_time}) end,
    if is_integer(Record#db_activity_info.config_close_time) -> noop ;true -> exit({vaild_for_sql,activity_info,config_close_time, Record#db_activity_info.config_close_time}) end;
ensure_to_sql(Record) when is_record(Record, db_activity_award) ->
    if is_integer(Record#db_activity_award.activity_id) -> noop ;true -> exit({vaild_for_sql,activity_award,activity_id, Record#db_activity_award.activity_id}) end,
    if is_integer(Record#db_activity_award.start_time) -> noop ;true -> exit({vaild_for_sql,activity_award,start_time, Record#db_activity_award.start_time}) end,
    if is_integer(Record#db_activity_award.state) -> noop ;true -> exit({vaild_for_sql,activity_award,state, Record#db_activity_award.state}) end,
    if is_integer(Record#db_activity_award.change_time) -> noop ;true -> exit({vaild_for_sql,activity_award,change_time, Record#db_activity_award.change_time}) end;
ensure_to_sql(Record) when is_record(Record, db_account_share_data) ->
    if is_list(Record#db_account_share_data.platform_id) -> noop ;true -> exit({vaild_for_sql,account_share_data,platform_id, Record#db_account_share_data.platform_id}) end,
    if is_list(Record#db_account_share_data.account) -> noop ;true -> exit({vaild_for_sql,account_share_data,account, Record#db_account_share_data.account}) end,
    if is_integer(Record#db_account_share_data.last_share_time) -> noop ;true -> exit({vaild_for_sql,account_share_data,last_share_time, Record#db_account_share_data.last_share_time}) end,
    if is_integer(Record#db_account_share_data.finish_share_times) -> noop ;true -> exit({vaild_for_sql,account_share_data,finish_share_times, Record#db_account_share_data.finish_share_times}) end;
ensure_to_sql(Record) when is_record(Record, db_account_charge_white) ->
    if is_list(Record#db_account_charge_white.platform_id) -> noop ;true -> exit({vaild_for_sql,account_charge_white,platform_id, Record#db_account_charge_white.platform_id}) end,
    if is_list(Record#db_account_charge_white.account) -> noop ;true -> exit({vaild_for_sql,account_charge_white,account, Record#db_account_charge_white.account}) end,
    if is_integer(Record#db_account_charge_white.is_white) -> noop ;true -> exit({vaild_for_sql,account_charge_white,is_white, Record#db_account_charge_white.is_white}) end;
ensure_to_sql(Record) when is_record(Record, db_account) ->
    if is_list(Record#db_account.acc_id) -> noop ;true -> exit({vaild_for_sql,account,acc_id, Record#db_account.acc_id}) end,
    if is_list(Record#db_account.server_id) -> noop ;true -> exit({vaild_for_sql,account,server_id, Record#db_account.server_id}) end,
    if is_integer(Record#db_account.is_create_role) -> noop ;true -> exit({vaild_for_sql,account,is_create_role, Record#db_account.is_create_role}) end,
    if is_integer(Record#db_account.player_id) -> noop ;true -> exit({vaild_for_sql,account,player_id, Record#db_account.player_id}) end,
    if is_integer(Record#db_account.is_enter_game) -> noop ;true -> exit({vaild_for_sql,account,is_enter_game, Record#db_account.is_enter_game}) end,
    if is_integer(Record#db_account.is_finish_first_task) -> noop ;true -> exit({vaild_for_sql,account,is_finish_first_task, Record#db_account.is_finish_first_task}) end,
    if is_integer(Record#db_account.time) -> noop ;true -> exit({vaild_for_sql,account,time, Record#db_account.time}) end,
    if is_list(Record#db_account.channel) -> noop ;true -> exit({vaild_for_sql,account,channel, Record#db_account.channel}) end.

generate_update_sql (wheel_result_record_accumulate, Record, [], Out) ->
     Type = int_to_bin(Record#db_wheel_result_record_accumulate.type),
    UId = int_to_bin(Record#db_wheel_result_record_accumulate.u_id),
    RecordType = int_to_bin(Record#db_wheel_result_record_accumulate.record_type),
    Id = int_to_bin(Record#db_wheel_result_record_accumulate.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `record_type` = ", RecordType/binary,        " AND `u_id` = ", UId/binary,        " AND `type` = ", Type/binary, ";\n">> | Out];
generate_update_sql(wheel_result_record_accumulate, Record, [8|Changes], Out)->
    Time = int_to_bin(Record#db_wheel_result_record_accumulate.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (wheel_result_record_accumulate, Record, Changes, Out1);
generate_update_sql(wheel_result_record_accumulate, Record, [7|Changes], Out)->
    Num = int_to_bin(Record#db_wheel_result_record_accumulate.num ),
    Out1 = case length(Out) of 1 -> [<<"`num` = ", Num/binary>> | Out]; _ -> [<<",`num` = ", Num/binary>> | Out] end,
    generate_update_sql (wheel_result_record_accumulate, Record, Changes, Out1);
generate_update_sql(wheel_result_record_accumulate, Record, [6|Changes], Out)->
    Id = int_to_bin(Record#db_wheel_result_record_accumulate.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (wheel_result_record_accumulate, Record, Changes, Out1);
generate_update_sql(wheel_result_record_accumulate, Record, [5|Changes], Out)->
    RecordType = int_to_bin(Record#db_wheel_result_record_accumulate.record_type ),
    Out1 = case length(Out) of 1 -> [<<"`record_type` = ", RecordType/binary>> | Out]; _ -> [<<",`record_type` = ", RecordType/binary>> | Out] end,
    generate_update_sql (wheel_result_record_accumulate, Record, Changes, Out1);
generate_update_sql(wheel_result_record_accumulate, Record, [4|Changes], Out)->
    UId = int_to_bin(Record#db_wheel_result_record_accumulate.u_id ),
    Out1 = case length(Out) of 1 -> [<<"`u_id` = ", UId/binary>> | Out]; _ -> [<<",`u_id` = ", UId/binary>> | Out] end,
    generate_update_sql (wheel_result_record_accumulate, Record, Changes, Out1);
generate_update_sql(wheel_result_record_accumulate, Record, [3|Changes], Out)->
    Type = int_to_bin(Record#db_wheel_result_record_accumulate.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (wheel_result_record_accumulate, Record, Changes, Out1);
generate_update_sql (wheel_result_record, Record, [], Out) ->
     Type = int_to_bin(Record#db_wheel_result_record.type),
    Id = int_to_bin(Record#db_wheel_result_record.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `type` = ", Type/binary, ";\n">> | Out];
generate_update_sql(wheel_result_record, Record, [6|Changes], Out)->
    Time = int_to_bin(Record#db_wheel_result_record.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (wheel_result_record, Record, Changes, Out1);
generate_update_sql(wheel_result_record, Record, [5|Changes], Out)->
    ResultId = int_to_bin(Record#db_wheel_result_record.result_id ),
    Out1 = case length(Out) of 1 -> [<<"`result_id` = ", ResultId/binary>> | Out]; _ -> [<<",`result_id` = ", ResultId/binary>> | Out] end,
    generate_update_sql (wheel_result_record, Record, Changes, Out1);
generate_update_sql(wheel_result_record, Record, [4|Changes], Out)->
    Id = int_to_bin(Record#db_wheel_result_record.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (wheel_result_record, Record, Changes, Out1);
generate_update_sql(wheel_result_record, Record, [3|Changes], Out)->
    Type = int_to_bin(Record#db_wheel_result_record.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (wheel_result_record, Record, Changes, Out1);
generate_update_sql (wheel_pool, Record, [], Out) ->
     Type = int_to_bin(Record#db_wheel_pool.type),
    [<<" WHERE `type` = ", Type/binary, ";\n">> | Out];
generate_update_sql(wheel_pool, Record, [5|Changes], Out)->
    Id = int_to_bin(Record#db_wheel_pool.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (wheel_pool, Record, Changes, Out1);
generate_update_sql(wheel_pool, Record, [4|Changes], Out)->
    Value = int_to_bin(Record#db_wheel_pool.value ),
    Out1 = case length(Out) of 1 -> [<<"`value` = ", Value/binary>> | Out]; _ -> [<<",`value` = ", Value/binary>> | Out] end,
    generate_update_sql (wheel_pool, Record, Changes, Out1);
generate_update_sql(wheel_pool, Record, [3|Changes], Out)->
    Type = int_to_bin(Record#db_wheel_pool.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (wheel_pool, Record, Changes, Out1);
generate_update_sql (wheel_player_bet_record_today, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_wheel_player_bet_record_today.player_id),
    Type = int_to_bin(Record#db_wheel_player_bet_record_today.type),
    Id = int_to_bin(Record#db_wheel_player_bet_record_today.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `type` = ", Type/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(wheel_player_bet_record_today, Record, [8|Changes], Out)->
    Time = int_to_bin(Record#db_wheel_player_bet_record_today.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (wheel_player_bet_record_today, Record, Changes, Out1);
generate_update_sql(wheel_player_bet_record_today, Record, [7|Changes], Out)->
    AwardNum = int_to_bin(Record#db_wheel_player_bet_record_today.award_num ),
    Out1 = case length(Out) of 1 -> [<<"`award_num` = ", AwardNum/binary>> | Out]; _ -> [<<",`award_num` = ", AwardNum/binary>> | Out] end,
    generate_update_sql (wheel_player_bet_record_today, Record, Changes, Out1);
generate_update_sql(wheel_player_bet_record_today, Record, [6|Changes], Out)->
    BetNum = int_to_bin(Record#db_wheel_player_bet_record_today.bet_num ),
    Out1 = case length(Out) of 1 -> [<<"`bet_num` = ", BetNum/binary>> | Out]; _ -> [<<",`bet_num` = ", BetNum/binary>> | Out] end,
    generate_update_sql (wheel_player_bet_record_today, Record, Changes, Out1);
generate_update_sql(wheel_player_bet_record_today, Record, [5|Changes], Out)->
    Id = int_to_bin(Record#db_wheel_player_bet_record_today.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (wheel_player_bet_record_today, Record, Changes, Out1);
generate_update_sql(wheel_player_bet_record_today, Record, [4|Changes], Out)->
    Type = int_to_bin(Record#db_wheel_player_bet_record_today.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (wheel_player_bet_record_today, Record, Changes, Out1);
generate_update_sql(wheel_player_bet_record_today, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_wheel_player_bet_record_today.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (wheel_player_bet_record_today, Record, Changes, Out1);
generate_update_sql (wheel_player_bet_record, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_wheel_player_bet_record.player_id),
    Type = int_to_bin(Record#db_wheel_player_bet_record.type),
    Id = int_to_bin(Record#db_wheel_player_bet_record.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `type` = ", Type/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(wheel_player_bet_record, Record, [8|Changes], Out)->
    Time = int_to_bin(Record#db_wheel_player_bet_record.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (wheel_player_bet_record, Record, Changes, Out1);
generate_update_sql(wheel_player_bet_record, Record, [7|Changes], Out)->
    AwardNum = int_to_bin(Record#db_wheel_player_bet_record.award_num ),
    Out1 = case length(Out) of 1 -> [<<"`award_num` = ", AwardNum/binary>> | Out]; _ -> [<<",`award_num` = ", AwardNum/binary>> | Out] end,
    generate_update_sql (wheel_player_bet_record, Record, Changes, Out1);
generate_update_sql(wheel_player_bet_record, Record, [6|Changes], Out)->
    BetNum = int_to_bin(Record#db_wheel_player_bet_record.bet_num ),
    Out1 = case length(Out) of 1 -> [<<"`bet_num` = ", BetNum/binary>> | Out]; _ -> [<<",`bet_num` = ", BetNum/binary>> | Out] end,
    generate_update_sql (wheel_player_bet_record, Record, Changes, Out1);
generate_update_sql(wheel_player_bet_record, Record, [5|Changes], Out)->
    Id = int_to_bin(Record#db_wheel_player_bet_record.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (wheel_player_bet_record, Record, Changes, Out1);
generate_update_sql(wheel_player_bet_record, Record, [4|Changes], Out)->
    Type = int_to_bin(Record#db_wheel_player_bet_record.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (wheel_player_bet_record, Record, Changes, Out1);
generate_update_sql(wheel_player_bet_record, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_wheel_player_bet_record.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (wheel_player_bet_record, Record, Changes, Out1);
generate_update_sql (unique_id_data, Record, [], Out) ->
     Type = int_to_bin(Record#db_unique_id_data.type),
    [<<" WHERE `type` = ", Type/binary, ";\n">> | Out];
generate_update_sql(unique_id_data, Record, [4|Changes], Out)->
    Id = int_to_bin(Record#db_unique_id_data.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (unique_id_data, Record, Changes, Out1);
generate_update_sql(unique_id_data, Record, [3|Changes], Out)->
    Type = int_to_bin(Record#db_unique_id_data.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (unique_id_data, Record, Changes, Out1);
generate_update_sql (tongxingzheng_month_task, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_tongxingzheng_month_task.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(tongxingzheng_month_task, Record, [4|Changes], Out)->
    TaskList = list_to_bin(Record#db_tongxingzheng_month_task.task_list ),
    Out1 = case length(Out) of 1 -> [<<"`task_list` = ", TaskList/binary>> | Out]; _ -> [<<",`task_list` = ", TaskList/binary>> | Out] end,
    generate_update_sql (tongxingzheng_month_task, Record, Changes, Out1);
generate_update_sql(tongxingzheng_month_task, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_tongxingzheng_month_task.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (tongxingzheng_month_task, Record, Changes, Out1);
generate_update_sql (tongxingzheng_daily_task, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_tongxingzheng_daily_task.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(tongxingzheng_daily_task, Record, [4|Changes], Out)->
    TaskList = list_to_bin(Record#db_tongxingzheng_daily_task.task_list ),
    Out1 = case length(Out) of 1 -> [<<"`task_list` = ", TaskList/binary>> | Out]; _ -> [<<",`task_list` = ", TaskList/binary>> | Out] end,
    generate_update_sql (tongxingzheng_daily_task, Record, Changes, Out1);
generate_update_sql(tongxingzheng_daily_task, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_tongxingzheng_daily_task.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (tongxingzheng_daily_task, Record, Changes, Out1);
generate_update_sql (timer_data, Record, [], Out) ->
     TimerId = int_to_bin(Record#db_timer_data.timer_id),
    [<<" WHERE `timer_id` = ", TimerId/binary, ";\n">> | Out];
generate_update_sql(timer_data, Record, [4|Changes], Out)->
    LastTime = int_to_bin(Record#db_timer_data.last_time ),
    Out1 = case length(Out) of 1 -> [<<"`last_time` = ", LastTime/binary>> | Out]; _ -> [<<",`last_time` = ", LastTime/binary>> | Out] end,
    generate_update_sql (timer_data, Record, Changes, Out1);
generate_update_sql(timer_data, Record, [3|Changes], Out)->
    TimerId = int_to_bin(Record#db_timer_data.timer_id ),
    Out1 = case length(Out) of 1 -> [<<"`timer_id` = ", TimerId/binary>> | Out]; _ -> [<<",`timer_id` = ", TimerId/binary>> | Out] end,
    generate_update_sql (timer_data, Record, Changes, Out1);
generate_update_sql (test, Record, [], Out) ->
     Id = int_to_bin(Record#db_test.id),
    [<<" WHERE `id` = ", Id/binary, ";\n">> | Out];
generate_update_sql(test, Record, [5|Changes], Out)->
    Str = list_to_bin(Record#db_test.str ),
    Out1 = case length(Out) of 1 -> [<<"`str` = ", Str/binary>> | Out]; _ -> [<<",`str` = ", Str/binary>> | Out] end,
    generate_update_sql (test, Record, Changes, Out1);
generate_update_sql(test, Record, [4|Changes], Out)->
    Num = int_to_bin(Record#db_test.num ),
    Out1 = case length(Out) of 1 -> [<<"`num` = ", Num/binary>> | Out]; _ -> [<<",`num` = ", Num/binary>> | Out] end,
    generate_update_sql (test, Record, Changes, Out1);
generate_update_sql(test, Record, [3|Changes], Out)->
    Id = int_to_bin(Record#db_test.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (test, Record, Changes, Out1);
generate_update_sql (server_state, Record, [], Out) ->
     Time = int_to_bin(Record#db_server_state.time),
    [<<" WHERE `time` = ", Time/binary, ";\n">> | Out];
generate_update_sql(server_state, Record, [8|Changes], Out)->
    DbErrorCount = int_to_bin(Record#db_server_state.db_error_count ),
    Out1 = case length(Out) of 1 -> [<<"`db_error_count` = ", DbErrorCount/binary>> | Out]; _ -> [<<",`db_error_count` = ", DbErrorCount/binary>> | Out] end,
    generate_update_sql (server_state, Record, Changes, Out1);
generate_update_sql(server_state, Record, [7|Changes], Out)->
    ErrorCount = int_to_bin(Record#db_server_state.error_count ),
    Out1 = case length(Out) of 1 -> [<<"`error_count` = ", ErrorCount/binary>> | Out]; _ -> [<<",`error_count` = ", ErrorCount/binary>> | Out] end,
    generate_update_sql (server_state, Record, Changes, Out1);
generate_update_sql(server_state, Record, [6|Changes], Out)->
    OnlineCount = int_to_bin(Record#db_server_state.online_count ),
    Out1 = case length(Out) of 1 -> [<<"`online_count` = ", OnlineCount/binary>> | Out]; _ -> [<<",`online_count` = ", OnlineCount/binary>> | Out] end,
    generate_update_sql (server_state, Record, Changes, Out1);
generate_update_sql(server_state, Record, [5|Changes], Out)->
    LoginCount = int_to_bin(Record#db_server_state.login_count ),
    Out1 = case length(Out) of 1 -> [<<"`login_count` = ", LoginCount/binary>> | Out]; _ -> [<<",`login_count` = ", LoginCount/binary>> | Out] end,
    generate_update_sql (server_state, Record, Changes, Out1);
generate_update_sql(server_state, Record, [4|Changes], Out)->
    CreateCount = int_to_bin(Record#db_server_state.create_count ),
    Out1 = case length(Out) of 1 -> [<<"`create_count` = ", CreateCount/binary>> | Out]; _ -> [<<",`create_count` = ", CreateCount/binary>> | Out] end,
    generate_update_sql (server_state, Record, Changes, Out1);
generate_update_sql(server_state, Record, [3|Changes], Out)->
    Time = int_to_bin(Record#db_server_state.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (server_state, Record, Changes, Out1);
generate_update_sql (server_player_fight_adjust, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_server_player_fight_adjust.player_id),
    PropId = int_to_bin(Record#db_server_player_fight_adjust.prop_id),
    [<<" WHERE `prop_id` = ", PropId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(server_player_fight_adjust, Record, [8|Changes], Out)->
    BottomTimesTime = int_to_bin(Record#db_server_player_fight_adjust.bottom_times_time ),
    Out1 = case length(Out) of 1 -> [<<"`bottom_times_time` = ", BottomTimesTime/binary>> | Out]; _ -> [<<",`bottom_times_time` = ", BottomTimesTime/binary>> | Out] end,
    generate_update_sql (server_player_fight_adjust, Record, Changes, Out1);
generate_update_sql(server_player_fight_adjust, Record, [7|Changes], Out)->
    BottomTimes = int_to_bin(Record#db_server_player_fight_adjust.bottom_times ),
    Out1 = case length(Out) of 1 -> [<<"`bottom_times` = ", BottomTimes/binary>> | Out]; _ -> [<<",`bottom_times` = ", BottomTimes/binary>> | Out] end,
    generate_update_sql (server_player_fight_adjust, Record, Changes, Out1);
generate_update_sql(server_player_fight_adjust, Record, [6|Changes], Out)->
    Times = int_to_bin(Record#db_server_player_fight_adjust.times ),
    Out1 = case length(Out) of 1 -> [<<"`times` = ", Times/binary>> | Out]; _ -> [<<",`times` = ", Times/binary>> | Out] end,
    generate_update_sql (server_player_fight_adjust, Record, Changes, Out1);
generate_update_sql(server_player_fight_adjust, Record, [5|Changes], Out)->
    Id = int_to_bin(Record#db_server_player_fight_adjust.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (server_player_fight_adjust, Record, Changes, Out1);
generate_update_sql(server_player_fight_adjust, Record, [4|Changes], Out)->
    PropId = int_to_bin(Record#db_server_player_fight_adjust.prop_id ),
    Out1 = case length(Out) of 1 -> [<<"`prop_id` = ", PropId/binary>> | Out]; _ -> [<<",`prop_id` = ", PropId/binary>> | Out] end,
    generate_update_sql (server_player_fight_adjust, Record, Changes, Out1);
generate_update_sql(server_player_fight_adjust, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_server_player_fight_adjust.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (server_player_fight_adjust, Record, Changes, Out1);
generate_update_sql (server_game_config, Record, [], Out) ->
     ConfigId = int_to_bin(Record#db_server_game_config.config_id),
    [<<" WHERE `config_id` = ", ConfigId/binary, ";\n">> | Out];
generate_update_sql(server_game_config, Record, [6|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_server_game_config.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (server_game_config, Record, Changes, Out1);
generate_update_sql(server_game_config, Record, [5|Changes], Out)->
    StrData = list_to_bin(Record#db_server_game_config.str_data ),
    Out1 = case length(Out) of 1 -> [<<"`str_data` = ", StrData/binary>> | Out]; _ -> [<<",`str_data` = ", StrData/binary>> | Out] end,
    generate_update_sql (server_game_config, Record, Changes, Out1);
generate_update_sql(server_game_config, Record, [4|Changes], Out)->
    IntData = int_to_bin(Record#db_server_game_config.int_data ),
    Out1 = case length(Out) of 1 -> [<<"`int_data` = ", IntData/binary>> | Out]; _ -> [<<",`int_data` = ", IntData/binary>> | Out] end,
    generate_update_sql (server_game_config, Record, Changes, Out1);
generate_update_sql(server_game_config, Record, [3|Changes], Out)->
    ConfigId = int_to_bin(Record#db_server_game_config.config_id ),
    Out1 = case length(Out) of 1 -> [<<"`config_id` = ", ConfigId/binary>> | Out]; _ -> [<<",`config_id` = ", ConfigId/binary>> | Out] end,
    generate_update_sql (server_game_config, Record, Changes, Out1);
generate_update_sql (server_fight_adjust, Record, [], Out) ->
     PropId = int_to_bin(Record#db_server_fight_adjust.prop_id),
    [<<" WHERE `prop_id` = ", PropId/binary, ";\n">> | Out];
generate_update_sql(server_fight_adjust, Record, [6|Changes], Out)->
    Award = int_to_bin(Record#db_server_fight_adjust.award ),
    Out1 = case length(Out) of 1 -> [<<"`award` = ", Award/binary>> | Out]; _ -> [<<",`award` = ", Award/binary>> | Out] end,
    generate_update_sql (server_fight_adjust, Record, Changes, Out1);
generate_update_sql(server_fight_adjust, Record, [5|Changes], Out)->
    Cost = int_to_bin(Record#db_server_fight_adjust.cost ),
    Out1 = case length(Out) of 1 -> [<<"`cost` = ", Cost/binary>> | Out]; _ -> [<<",`cost` = ", Cost/binary>> | Out] end,
    generate_update_sql (server_fight_adjust, Record, Changes, Out1);
generate_update_sql(server_fight_adjust, Record, [4|Changes], Out)->
    PoolValue = int_to_bin(Record#db_server_fight_adjust.pool_value ),
    Out1 = case length(Out) of 1 -> [<<"`pool_value` = ", PoolValue/binary>> | Out]; _ -> [<<",`pool_value` = ", PoolValue/binary>> | Out] end,
    generate_update_sql (server_fight_adjust, Record, Changes, Out1);
generate_update_sql(server_fight_adjust, Record, [3|Changes], Out)->
    PropId = int_to_bin(Record#db_server_fight_adjust.prop_id ),
    Out1 = case length(Out) of 1 -> [<<"`prop_id` = ", PropId/binary>> | Out]; _ -> [<<",`prop_id` = ", PropId/binary>> | Out] end,
    generate_update_sql (server_fight_adjust, Record, Changes, Out1);
generate_update_sql (server_data, Record, [], Out) ->
     Id = int_to_bin(Record#db_server_data.id),
    Key2 = int_to_bin(Record#db_server_data.key2),
    [<<" WHERE `key2` = ", Key2/binary,        " AND `id` = ", Id/binary, ";\n">> | Out];
generate_update_sql(server_data, Record, [7|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_server_data.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (server_data, Record, Changes, Out1);
generate_update_sql(server_data, Record, [6|Changes], Out)->
    StrData = list_to_bin(Record#db_server_data.str_data ),
    Out1 = case length(Out) of 1 -> [<<"`str_data` = ", StrData/binary>> | Out]; _ -> [<<",`str_data` = ", StrData/binary>> | Out] end,
    generate_update_sql (server_data, Record, Changes, Out1);
generate_update_sql(server_data, Record, [5|Changes], Out)->
    IntData = int_to_bin(Record#db_server_data.int_data ),
    Out1 = case length(Out) of 1 -> [<<"`int_data` = ", IntData/binary>> | Out]; _ -> [<<",`int_data` = ", IntData/binary>> | Out] end,
    generate_update_sql (server_data, Record, Changes, Out1);
generate_update_sql(server_data, Record, [4|Changes], Out)->
    Key2 = int_to_bin(Record#db_server_data.key2 ),
    Out1 = case length(Out) of 1 -> [<<"`key2` = ", Key2/binary>> | Out]; _ -> [<<",`key2` = ", Key2/binary>> | Out] end,
    generate_update_sql (server_data, Record, Changes, Out1);
generate_update_sql(server_data, Record, [3|Changes], Out)->
    Id = int_to_bin(Record#db_server_data.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (server_data, Record, Changes, Out1);
generate_update_sql (scene_log, Record, [], Out) ->
     SceneId = int_to_bin(Record#db_scene_log.scene_id),
    [<<" WHERE `scene_id` = ", SceneId/binary, ";\n">> | Out];
generate_update_sql(scene_log, Record, [7|Changes], Out)->
    CostTime = int_to_bin(Record#db_scene_log.cost_time ),
    Out1 = case length(Out) of 1 -> [<<"`cost_time` = ", CostTime/binary>> | Out]; _ -> [<<",`cost_time` = ", CostTime/binary>> | Out] end,
    generate_update_sql (scene_log, Record, Changes, Out1);
generate_update_sql(scene_log, Record, [6|Changes], Out)->
    Times = int_to_bin(Record#db_scene_log.times ),
    Out1 = case length(Out) of 1 -> [<<"`times` = ", Times/binary>> | Out]; _ -> [<<",`times` = ", Times/binary>> | Out] end,
    generate_update_sql (scene_log, Record, Changes, Out1);
generate_update_sql(scene_log, Record, [5|Changes], Out)->
    AwardList = list_to_bin(Record#db_scene_log.award_list ),
    Out1 = case length(Out) of 1 -> [<<"`award_list` = ", AwardList/binary>> | Out]; _ -> [<<",`award_list` = ", AwardList/binary>> | Out] end,
    generate_update_sql (scene_log, Record, Changes, Out1);
generate_update_sql(scene_log, Record, [4|Changes], Out)->
    CostList = list_to_bin(Record#db_scene_log.cost_list ),
    Out1 = case length(Out) of 1 -> [<<"`cost_list` = ", CostList/binary>> | Out]; _ -> [<<",`cost_list` = ", CostList/binary>> | Out] end,
    generate_update_sql (scene_log, Record, Changes, Out1);
generate_update_sql(scene_log, Record, [3|Changes], Out)->
    SceneId = int_to_bin(Record#db_scene_log.scene_id ),
    Out1 = case length(Out) of 1 -> [<<"`scene_id` = ", SceneId/binary>> | Out]; _ -> [<<",`scene_id` = ", SceneId/binary>> | Out] end,
    generate_update_sql (scene_log, Record, Changes, Out1);
generate_update_sql (scene_boss_adjust, Record, [], Out) ->
     SceneId = int_to_bin(Record#db_scene_boss_adjust.scene_id),
    [<<" WHERE `scene_id` = ", SceneId/binary, ";\n">> | Out];
generate_update_sql(scene_boss_adjust, Record, [4|Changes], Out)->
    PoolValue = int_to_bin(Record#db_scene_boss_adjust.pool_value ),
    Out1 = case length(Out) of 1 -> [<<"`pool_value` = ", PoolValue/binary>> | Out]; _ -> [<<",`pool_value` = ", PoolValue/binary>> | Out] end,
    generate_update_sql (scene_boss_adjust, Record, Changes, Out1);
generate_update_sql(scene_boss_adjust, Record, [3|Changes], Out)->
    SceneId = int_to_bin(Record#db_scene_boss_adjust.scene_id ),
    Out1 = case length(Out) of 1 -> [<<"`scene_id` = ", SceneId/binary>> | Out]; _ -> [<<",`scene_id` = ", SceneId/binary>> | Out] end,
    generate_update_sql (scene_boss_adjust, Record, Changes, Out1);
generate_update_sql (scene_adjust, Record, [], Out) ->
     SceneId = int_to_bin(Record#db_scene_adjust.scene_id),
    [<<" WHERE `scene_id` = ", SceneId/binary, ";\n">> | Out];
generate_update_sql(scene_adjust, Record, [4|Changes], Out)->
    PoolValue = int_to_bin(Record#db_scene_adjust.pool_value ),
    Out1 = case length(Out) of 1 -> [<<"`pool_value` = ", PoolValue/binary>> | Out]; _ -> [<<",`pool_value` = ", PoolValue/binary>> | Out] end,
    generate_update_sql (scene_adjust, Record, Changes, Out1);
generate_update_sql(scene_adjust, Record, [3|Changes], Out)->
    SceneId = int_to_bin(Record#db_scene_adjust.scene_id ),
    Out1 = case length(Out) of 1 -> [<<"`scene_id` = ", SceneId/binary>> | Out]; _ -> [<<",`scene_id` = ", SceneId/binary>> | Out] end,
    generate_update_sql (scene_adjust, Record, Changes, Out1);
generate_update_sql (robot_player_scene_cache, Record, [], Out) ->
     Id = int_to_bin(Record#db_robot_player_scene_cache.id),
    [<<" WHERE `id` = ", Id/binary, ";\n">> | Out];
generate_update_sql(robot_player_scene_cache, Record, [12|Changes], Out)->
    ShenLongType = int_to_bin(Record#db_robot_player_scene_cache.shen_long_type ),
    Out1 = case length(Out) of 1 -> [<<"`shen_long_type` = ", ShenLongType/binary>> | Out]; _ -> [<<",`shen_long_type` = ", ShenLongType/binary>> | Out] end,
    generate_update_sql (robot_player_scene_cache, Record, Changes, Out1);
generate_update_sql(robot_player_scene_cache, Record, [11|Changes], Out)->
    WingsId = int_to_bin(Record#db_robot_player_scene_cache.wings_id ),
    Out1 = case length(Out) of 1 -> [<<"`wings_id` = ", WingsId/binary>> | Out]; _ -> [<<",`wings_id` = ", WingsId/binary>> | Out] end,
    generate_update_sql (robot_player_scene_cache, Record, Changes, Out1);
generate_update_sql(robot_player_scene_cache, Record, [10|Changes], Out)->
    WeaponId = int_to_bin(Record#db_robot_player_scene_cache.weapon_id ),
    Out1 = case length(Out) of 1 -> [<<"`weapon_id` = ", WeaponId/binary>> | Out]; _ -> [<<",`weapon_id` = ", WeaponId/binary>> | Out] end,
    generate_update_sql (robot_player_scene_cache, Record, Changes, Out1);
generate_update_sql(robot_player_scene_cache, Record, [9|Changes], Out)->
    MagicWeaponId = int_to_bin(Record#db_robot_player_scene_cache.magic_weapon_id ),
    Out1 = case length(Out) of 1 -> [<<"`magic_weapon_id` = ", MagicWeaponId/binary>> | Out]; _ -> [<<",`magic_weapon_id` = ", MagicWeaponId/binary>> | Out] end,
    generate_update_sql (robot_player_scene_cache, Record, Changes, Out1);
generate_update_sql(robot_player_scene_cache, Record, [8|Changes], Out)->
    TitleId = int_to_bin(Record#db_robot_player_scene_cache.title_id ),
    Out1 = case length(Out) of 1 -> [<<"`title_id` = ", TitleId/binary>> | Out]; _ -> [<<",`title_id` = ", TitleId/binary>> | Out] end,
    generate_update_sql (robot_player_scene_cache, Record, Changes, Out1);
generate_update_sql(robot_player_scene_cache, Record, [7|Changes], Out)->
    ClotheId = int_to_bin(Record#db_robot_player_scene_cache.clothe_id ),
    Out1 = case length(Out) of 1 -> [<<"`clothe_id` = ", ClotheId/binary>> | Out]; _ -> [<<",`clothe_id` = ", ClotheId/binary>> | Out] end,
    generate_update_sql (robot_player_scene_cache, Record, Changes, Out1);
generate_update_sql(robot_player_scene_cache, Record, [6|Changes], Out)->
    Level = int_to_bin(Record#db_robot_player_scene_cache.level ),
    Out1 = case length(Out) of 1 -> [<<"`level` = ", Level/binary>> | Out]; _ -> [<<",`level` = ", Level/binary>> | Out] end,
    generate_update_sql (robot_player_scene_cache, Record, Changes, Out1);
generate_update_sql(robot_player_scene_cache, Record, [5|Changes], Out)->
    ServerId = list_to_bin(Record#db_robot_player_scene_cache.server_id ),
    Out1 = case length(Out) of 1 -> [<<"`server_id` = ", ServerId/binary>> | Out]; _ -> [<<",`server_id` = ", ServerId/binary>> | Out] end,
    generate_update_sql (robot_player_scene_cache, Record, Changes, Out1);
generate_update_sql(robot_player_scene_cache, Record, [4|Changes], Out)->
    PlayerId = int_to_bin(Record#db_robot_player_scene_cache.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (robot_player_scene_cache, Record, Changes, Out1);
generate_update_sql(robot_player_scene_cache, Record, [3|Changes], Out)->
    Id = int_to_bin(Record#db_robot_player_scene_cache.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (robot_player_scene_cache, Record, Changes, Out1);
generate_update_sql (robot_player_data, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_robot_player_data.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(robot_player_data, Record, [6|Changes], Out)->
    Sex = int_to_bin(Record#db_robot_player_data.sex ),
    Out1 = case length(Out) of 1 -> [<<"`sex` = ", Sex/binary>> | Out]; _ -> [<<",`sex` = ", Sex/binary>> | Out] end,
    generate_update_sql (robot_player_data, Record, Changes, Out1);
generate_update_sql(robot_player_data, Record, [5|Changes], Out)->
    ServerId = list_to_bin(Record#db_robot_player_data.server_id ),
    Out1 = case length(Out) of 1 -> [<<"`server_id` = ", ServerId/binary>> | Out]; _ -> [<<",`server_id` = ", ServerId/binary>> | Out] end,
    generate_update_sql (robot_player_data, Record, Changes, Out1);
generate_update_sql(robot_player_data, Record, [4|Changes], Out)->
    Nickname = list_to_bin(Record#db_robot_player_data.nickname ),
    Out1 = case length(Out) of 1 -> [<<"`nickname` = ", Nickname/binary>> | Out]; _ -> [<<",`nickname` = ", Nickname/binary>> | Out] end,
    generate_update_sql (robot_player_data, Record, Changes, Out1);
generate_update_sql(robot_player_data, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_robot_player_data.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (robot_player_data, Record, Changes, Out1);
generate_update_sql (red_packet_condition, Record, [], Out) ->
     Id = int_to_bin(Record#db_red_packet_condition.id),
    [<<" WHERE `id` = ", Id/binary, ";\n">> | Out];
generate_update_sql(red_packet_condition, Record, [5|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_red_packet_condition.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (red_packet_condition, Record, Changes, Out1);
generate_update_sql(red_packet_condition, Record, [4|Changes], Out)->
    Value = int_to_bin(Record#db_red_packet_condition.value ),
    Out1 = case length(Out) of 1 -> [<<"`value` = ", Value/binary>> | Out]; _ -> [<<",`value` = ", Value/binary>> | Out] end,
    generate_update_sql (red_packet_condition, Record, Changes, Out1);
generate_update_sql(red_packet_condition, Record, [3|Changes], Out)->
    Id = int_to_bin(Record#db_red_packet_condition.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (red_packet_condition, Record, Changes, Out1);
generate_update_sql (rank_info, Record, [], Out) ->
     RankId = int_to_bin(Record#db_rank_info.rank_id),
    PlayerId = int_to_bin(Record#db_rank_info.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary,        " AND `rank_id` = ", RankId/binary, ";\n">> | Out];
generate_update_sql(rank_info, Record, [9|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_rank_info.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (rank_info, Record, Changes, Out1);
generate_update_sql(rank_info, Record, [8|Changes], Out)->
    OldValue = int_to_bin(Record#db_rank_info.old_value ),
    Out1 = case length(Out) of 1 -> [<<"`old_value` = ", OldValue/binary>> | Out]; _ -> [<<",`old_value` = ", OldValue/binary>> | Out] end,
    generate_update_sql (rank_info, Record, Changes, Out1);
generate_update_sql(rank_info, Record, [7|Changes], Out)->
    Value = int_to_bin(Record#db_rank_info.value ),
    Out1 = case length(Out) of 1 -> [<<"`value` = ", Value/binary>> | Out]; _ -> [<<",`value` = ", Value/binary>> | Out] end,
    generate_update_sql (rank_info, Record, Changes, Out1);
generate_update_sql(rank_info, Record, [6|Changes], Out)->
    OldRank = int_to_bin(Record#db_rank_info.old_rank ),
    Out1 = case length(Out) of 1 -> [<<"`old_rank` = ", OldRank/binary>> | Out]; _ -> [<<",`old_rank` = ", OldRank/binary>> | Out] end,
    generate_update_sql (rank_info, Record, Changes, Out1);
generate_update_sql(rank_info, Record, [5|Changes], Out)->
    Rank = int_to_bin(Record#db_rank_info.rank ),
    Out1 = case length(Out) of 1 -> [<<"`rank` = ", Rank/binary>> | Out]; _ -> [<<",`rank` = ", Rank/binary>> | Out] end,
    generate_update_sql (rank_info, Record, Changes, Out1);
generate_update_sql(rank_info, Record, [4|Changes], Out)->
    PlayerId = int_to_bin(Record#db_rank_info.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (rank_info, Record, Changes, Out1);
generate_update_sql(rank_info, Record, [3|Changes], Out)->
    RankId = int_to_bin(Record#db_rank_info.rank_id ),
    Out1 = case length(Out) of 1 -> [<<"`rank_id` = ", RankId/binary>> | Out]; _ -> [<<",`rank_id` = ", RankId/binary>> | Out] end,
    generate_update_sql (rank_info, Record, Changes, Out1);
generate_update_sql (promote_record, Record, [], Out) ->
     RealId = int_to_bin(Record#db_promote_record.real_id),
    [<<" WHERE `real_id` = ", RealId/binary, ";\n">> | Out];
generate_update_sql(promote_record, Record, [8|Changes], Out)->
    Time = int_to_bin(Record#db_promote_record.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (promote_record, Record, Changes, Out1);
generate_update_sql(promote_record, Record, [7|Changes], Out)->
    Param = list_to_bin(Record#db_promote_record.param ),
    Out1 = case length(Out) of 1 -> [<<"`param` = ", Param/binary>> | Out]; _ -> [<<",`param` = ", Param/binary>> | Out] end,
    generate_update_sql (promote_record, Record, Changes, Out1);
generate_update_sql(promote_record, Record, [6|Changes], Out)->
    Id = int_to_bin(Record#db_promote_record.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (promote_record, Record, Changes, Out1);
generate_update_sql(promote_record, Record, [5|Changes], Out)->
    AccId = list_to_bin(Record#db_promote_record.acc_id ),
    Out1 = case length(Out) of 1 -> [<<"`acc_id` = ", AccId/binary>> | Out]; _ -> [<<",`acc_id` = ", AccId/binary>> | Out] end,
    generate_update_sql (promote_record, Record, Changes, Out1);
generate_update_sql(promote_record, Record, [4|Changes], Out)->
    PlatformId = list_to_bin(Record#db_promote_record.platform_id ),
    Out1 = case length(Out) of 1 -> [<<"`platform_id` = ", PlatformId/binary>> | Out]; _ -> [<<",`platform_id` = ", PlatformId/binary>> | Out] end,
    generate_update_sql (promote_record, Record, Changes, Out1);
generate_update_sql(promote_record, Record, [3|Changes], Out)->
    RealId = int_to_bin(Record#db_promote_record.real_id ),
    Out1 = case length(Out) of 1 -> [<<"`real_id` = ", RealId/binary>> | Out]; _ -> [<<",`real_id` = ", RealId/binary>> | Out] end,
    generate_update_sql (promote_record, Record, Changes, Out1);
generate_update_sql (promote_info, Record, [], Out) ->
     PlatformId = list_to_bin(Record#db_promote_info.platform_id),
    AccId = list_to_bin(Record#db_promote_info.acc_id),
    Level = int_to_bin(Record#db_promote_info.level),
    [<<" WHERE `level` = ", Level/binary,        " AND `acc_id` = ", AccId/binary,        " AND `platform_id` = ", PlatformId/binary, ";\n">> | Out];
generate_update_sql(promote_info, Record, [9|Changes], Out)->
    Time = int_to_bin(Record#db_promote_info.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (promote_info, Record, Changes, Out1);
generate_update_sql(promote_info, Record, [8|Changes], Out)->
    VipExp = int_to_bin(Record#db_promote_info.vip_exp ),
    Out1 = case length(Out) of 1 -> [<<"`vip_exp` = ", VipExp/binary>> | Out]; _ -> [<<",`vip_exp` = ", VipExp/binary>> | Out] end,
    generate_update_sql (promote_info, Record, Changes, Out1);
generate_update_sql(promote_info, Record, [7|Changes], Out)->
    Mana = int_to_bin(Record#db_promote_info.mana ),
    Out1 = case length(Out) of 1 -> [<<"`mana` = ", Mana/binary>> | Out]; _ -> [<<",`mana` = ", Mana/binary>> | Out] end,
    generate_update_sql (promote_info, Record, Changes, Out1);
generate_update_sql(promote_info, Record, [6|Changes], Out)->
    Number = int_to_bin(Record#db_promote_info.number ),
    Out1 = case length(Out) of 1 -> [<<"`number` = ", Number/binary>> | Out]; _ -> [<<",`number` = ", Number/binary>> | Out] end,
    generate_update_sql (promote_info, Record, Changes, Out1);
generate_update_sql(promote_info, Record, [5|Changes], Out)->
    Level = int_to_bin(Record#db_promote_info.level ),
    Out1 = case length(Out) of 1 -> [<<"`level` = ", Level/binary>> | Out]; _ -> [<<",`level` = ", Level/binary>> | Out] end,
    generate_update_sql (promote_info, Record, Changes, Out1);
generate_update_sql(promote_info, Record, [4|Changes], Out)->
    AccId = list_to_bin(Record#db_promote_info.acc_id ),
    Out1 = case length(Out) of 1 -> [<<"`acc_id` = ", AccId/binary>> | Out]; _ -> [<<",`acc_id` = ", AccId/binary>> | Out] end,
    generate_update_sql (promote_info, Record, Changes, Out1);
generate_update_sql(promote_info, Record, [3|Changes], Out)->
    PlatformId = list_to_bin(Record#db_promote_info.platform_id ),
    Out1 = case length(Out) of 1 -> [<<"`platform_id` = ", PlatformId/binary>> | Out]; _ -> [<<",`platform_id` = ", PlatformId/binary>> | Out] end,
    generate_update_sql (promote_info, Record, Changes, Out1);
generate_update_sql (promote, Record, [], Out) ->
     PlatformId = list_to_bin(Record#db_promote.platform_id),
    AccId = list_to_bin(Record#db_promote.acc_id),
    [<<" WHERE `acc_id` = ", AccId/binary,        " AND `platform_id` = ", PlatformId/binary, ";\n">> | Out];
generate_update_sql(promote, Record, [8|Changes], Out)->
    IsRed = int_to_bin(Record#db_promote.is_red ),
    Out1 = case length(Out) of 1 -> [<<"`is_red` = ", IsRed/binary>> | Out]; _ -> [<<",`is_red` = ", IsRed/binary>> | Out] end,
    generate_update_sql (promote, Record, Changes, Out1);
generate_update_sql(promote, Record, [7|Changes], Out)->
    TimesTime = int_to_bin(Record#db_promote.times_time ),
    Out1 = case length(Out) of 1 -> [<<"`times_time` = ", TimesTime/binary>> | Out]; _ -> [<<",`times_time` = ", TimesTime/binary>> | Out] end,
    generate_update_sql (promote, Record, Changes, Out1);
generate_update_sql(promote, Record, [6|Changes], Out)->
    UseTimes = int_to_bin(Record#db_promote.use_times ),
    Out1 = case length(Out) of 1 -> [<<"`use_times` = ", UseTimes/binary>> | Out]; _ -> [<<",`use_times` = ", UseTimes/binary>> | Out] end,
    generate_update_sql (promote, Record, Changes, Out1);
generate_update_sql(promote, Record, [5|Changes], Out)->
    InvitePlayerId = int_to_bin(Record#db_promote.invite_player_id ),
    Out1 = case length(Out) of 1 -> [<<"`invite_player_id` = ", InvitePlayerId/binary>> | Out]; _ -> [<<",`invite_player_id` = ", InvitePlayerId/binary>> | Out] end,
    generate_update_sql (promote, Record, Changes, Out1);
generate_update_sql(promote, Record, [4|Changes], Out)->
    AccId = list_to_bin(Record#db_promote.acc_id ),
    Out1 = case length(Out) of 1 -> [<<"`acc_id` = ", AccId/binary>> | Out]; _ -> [<<",`acc_id` = ", AccId/binary>> | Out] end,
    generate_update_sql (promote, Record, Changes, Out1);
generate_update_sql(promote, Record, [3|Changes], Out)->
    PlatformId = list_to_bin(Record#db_promote.platform_id ),
    Out1 = case length(Out) of 1 -> [<<"`platform_id` = ", PlatformId/binary>> | Out]; _ -> [<<",`platform_id` = ", PlatformId/binary>> | Out] end,
    generate_update_sql (promote, Record, Changes, Out1);
generate_update_sql (player_vip_award, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_vip_award.player_id),
    Level = int_to_bin(Record#db_player_vip_award.level),
    [<<" WHERE `level` = ", Level/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_vip_award, Record, [6|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_vip_award.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_vip_award, Record, Changes, Out1);
generate_update_sql(player_vip_award, Record, [5|Changes], Out)->
    State = int_to_bin(Record#db_player_vip_award.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_vip_award, Record, Changes, Out1);
generate_update_sql(player_vip_award, Record, [4|Changes], Out)->
    Level = int_to_bin(Record#db_player_vip_award.level ),
    Out1 = case length(Out) of 1 -> [<<"`level` = ", Level/binary>> | Out]; _ -> [<<",`level` = ", Level/binary>> | Out] end,
    generate_update_sql (player_vip_award, Record, Changes, Out1);
generate_update_sql(player_vip_award, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_vip_award.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_vip_award, Record, Changes, Out1);
generate_update_sql (player_vip, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_vip.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_vip, Record, [6|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_vip.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_vip, Record, Changes, Out1);
generate_update_sql(player_vip, Record, [5|Changes], Out)->
    Exp = int_to_bin(Record#db_player_vip.exp ),
    Out1 = case length(Out) of 1 -> [<<"`exp` = ", Exp/binary>> | Out]; _ -> [<<",`exp` = ", Exp/binary>> | Out] end,
    generate_update_sql (player_vip, Record, Changes, Out1);
generate_update_sql(player_vip, Record, [4|Changes], Out)->
    Level = int_to_bin(Record#db_player_vip.level ),
    Out1 = case length(Out) of 1 -> [<<"`level` = ", Level/binary>> | Out]; _ -> [<<",`level` = ", Level/binary>> | Out] end,
    generate_update_sql (player_vip, Record, Changes, Out1);
generate_update_sql(player_vip, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_vip.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_vip, Record, Changes, Out1);
generate_update_sql (player_title, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_title.player_id),
    TitleId = int_to_bin(Record#db_player_title.title_id),
    [<<" WHERE `title_id` = ", TitleId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_title, Record, [7|Changes], Out)->
    CreateTime = int_to_bin(Record#db_player_title.create_time ),
    Out1 = case length(Out) of 1 -> [<<"`create_time` = ", CreateTime/binary>> | Out]; _ -> [<<",`create_time` = ", CreateTime/binary>> | Out] end,
    generate_update_sql (player_title, Record, Changes, Out1);
generate_update_sql(player_title, Record, [6|Changes], Out)->
    State = int_to_bin(Record#db_player_title.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_title, Record, Changes, Out1);
generate_update_sql(player_title, Record, [5|Changes], Out)->
    TitleLevel = int_to_bin(Record#db_player_title.title_level ),
    Out1 = case length(Out) of 1 -> [<<"`title_level` = ", TitleLevel/binary>> | Out]; _ -> [<<",`title_level` = ", TitleLevel/binary>> | Out] end,
    generate_update_sql (player_title, Record, Changes, Out1);
generate_update_sql(player_title, Record, [4|Changes], Out)->
    TitleId = int_to_bin(Record#db_player_title.title_id ),
    Out1 = case length(Out) of 1 -> [<<"`title_id` = ", TitleId/binary>> | Out]; _ -> [<<",`title_id` = ", TitleId/binary>> | Out] end,
    generate_update_sql (player_title, Record, Changes, Out1);
generate_update_sql(player_title, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_title.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_title, Record, Changes, Out1);
generate_update_sql (player_times_data, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_times_data.player_id),
    TimesId = int_to_bin(Record#db_player_times_data.times_id),
    [<<" WHERE `times_id` = ", TimesId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_times_data, Record, [9|Changes], Out)->
    LastRecoverTime = int_to_bin(Record#db_player_times_data.last_recover_time ),
    Out1 = case length(Out) of 1 -> [<<"`last_recover_time` = ", LastRecoverTime/binary>> | Out]; _ -> [<<",`last_recover_time` = ", LastRecoverTime/binary>> | Out] end,
    generate_update_sql (player_times_data, Record, Changes, Out1);
generate_update_sql(player_times_data, Record, [8|Changes], Out)->
    UpdateTime = int_to_bin(Record#db_player_times_data.update_time ),
    Out1 = case length(Out) of 1 -> [<<"`update_time` = ", UpdateTime/binary>> | Out]; _ -> [<<",`update_time` = ", UpdateTime/binary>> | Out] end,
    generate_update_sql (player_times_data, Record, Changes, Out1);
generate_update_sql(player_times_data, Record, [7|Changes], Out)->
    BuyTimes = int_to_bin(Record#db_player_times_data.buy_times ),
    Out1 = case length(Out) of 1 -> [<<"`buy_times` = ", BuyTimes/binary>> | Out]; _ -> [<<",`buy_times` = ", BuyTimes/binary>> | Out] end,
    generate_update_sql (player_times_data, Record, Changes, Out1);
generate_update_sql(player_times_data, Record, [6|Changes], Out)->
    LeftTimes = int_to_bin(Record#db_player_times_data.left_times ),
    Out1 = case length(Out) of 1 -> [<<"`left_times` = ", LeftTimes/binary>> | Out]; _ -> [<<",`left_times` = ", LeftTimes/binary>> | Out] end,
    generate_update_sql (player_times_data, Record, Changes, Out1);
generate_update_sql(player_times_data, Record, [5|Changes], Out)->
    UseTimes = int_to_bin(Record#db_player_times_data.use_times ),
    Out1 = case length(Out) of 1 -> [<<"`use_times` = ", UseTimes/binary>> | Out]; _ -> [<<",`use_times` = ", UseTimes/binary>> | Out] end,
    generate_update_sql (player_times_data, Record, Changes, Out1);
generate_update_sql(player_times_data, Record, [4|Changes], Out)->
    TimesId = int_to_bin(Record#db_player_times_data.times_id ),
    Out1 = case length(Out) of 1 -> [<<"`times_id` = ", TimesId/binary>> | Out]; _ -> [<<",`times_id` = ", TimesId/binary>> | Out] end,
    generate_update_sql (player_times_data, Record, Changes, Out1);
generate_update_sql(player_times_data, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_times_data.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_times_data, Record, Changes, Out1);
generate_update_sql (player_task_share_award, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_task_share_award.player_id),
    TaskId = int_to_bin(Record#db_player_task_share_award.task_id),
    [<<" WHERE `task_id` = ", TaskId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_task_share_award, Record, [6|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_task_share_award.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_task_share_award, Record, Changes, Out1);
generate_update_sql(player_task_share_award, Record, [5|Changes], Out)->
    Type = int_to_bin(Record#db_player_task_share_award.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (player_task_share_award, Record, Changes, Out1);
generate_update_sql(player_task_share_award, Record, [4|Changes], Out)->
    TaskId = int_to_bin(Record#db_player_task_share_award.task_id ),
    Out1 = case length(Out) of 1 -> [<<"`task_id` = ", TaskId/binary>> | Out]; _ -> [<<",`task_id` = ", TaskId/binary>> | Out] end,
    generate_update_sql (player_task_share_award, Record, Changes, Out1);
generate_update_sql(player_task_share_award, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_task_share_award.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_task_share_award, Record, Changes, Out1);
generate_update_sql (player_task, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_task.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_task, Record, [7|Changes], Out)->
    UpdateTime = int_to_bin(Record#db_player_task.update_time ),
    Out1 = case length(Out) of 1 -> [<<"`update_time` = ", UpdateTime/binary>> | Out]; _ -> [<<",`update_time` = ", UpdateTime/binary>> | Out] end,
    generate_update_sql (player_task, Record, Changes, Out1);
generate_update_sql(player_task, Record, [6|Changes], Out)->
    Num = int_to_bin(Record#db_player_task.num ),
    Out1 = case length(Out) of 1 -> [<<"`num` = ", Num/binary>> | Out]; _ -> [<<",`num` = ", Num/binary>> | Out] end,
    generate_update_sql (player_task, Record, Changes, Out1);
generate_update_sql(player_task, Record, [5|Changes], Out)->
    Status = int_to_bin(Record#db_player_task.status ),
    Out1 = case length(Out) of 1 -> [<<"`status` = ", Status/binary>> | Out]; _ -> [<<",`status` = ", Status/binary>> | Out] end,
    generate_update_sql (player_task, Record, Changes, Out1);
generate_update_sql(player_task, Record, [4|Changes], Out)->
    TaskId = int_to_bin(Record#db_player_task.task_id ),
    Out1 = case length(Out) of 1 -> [<<"`task_id` = ", TaskId/binary>> | Out]; _ -> [<<",`task_id` = ", TaskId/binary>> | Out] end,
    generate_update_sql (player_task, Record, Changes, Out1);
generate_update_sql(player_task, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_task.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_task, Record, Changes, Out1);
generate_update_sql (player_sys_common, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_sys_common.player_id),
    Id = int_to_bin(Record#db_player_sys_common.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_sys_common, Record, [5|Changes], Out)->
    State = int_to_bin(Record#db_player_sys_common.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_sys_common, Record, Changes, Out1);
generate_update_sql(player_sys_common, Record, [4|Changes], Out)->
    Id = int_to_bin(Record#db_player_sys_common.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_sys_common, Record, Changes, Out1);
generate_update_sql(player_sys_common, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_sys_common.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_sys_common, Record, Changes, Out1);
generate_update_sql (player_sys_attr, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_sys_attr.player_id),
    FunId = int_to_bin(Record#db_player_sys_attr.fun_id),
    [<<" WHERE `fun_id` = ", FunId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_sys_attr, Record, [22|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_sys_attr.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [21|Changes], Out)->
    RateBlock = int_to_bin(Record#db_player_sys_attr.rate_block ),
    Out1 = case length(Out) of 1 -> [<<"`rate_block` = ", RateBlock/binary>> | Out]; _ -> [<<",`rate_block` = ", RateBlock/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [20|Changes], Out)->
    RateResistBlock = int_to_bin(Record#db_player_sys_attr.rate_resist_block ),
    Out1 = case length(Out) of 1 -> [<<"`rate_resist_block` = ", RateResistBlock/binary>> | Out]; _ -> [<<",`rate_resist_block` = ", RateResistBlock/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [19|Changes], Out)->
    HpReflex = int_to_bin(Record#db_player_sys_attr.hp_reflex ),
    Out1 = case length(Out) of 1 -> [<<"`hp_reflex` = ", HpReflex/binary>> | Out]; _ -> [<<",`hp_reflex` = ", HpReflex/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [18|Changes], Out)->
    CritHurtReduce = int_to_bin(Record#db_player_sys_attr.crit_hurt_reduce ),
    Out1 = case length(Out) of 1 -> [<<"`crit_hurt_reduce` = ", CritHurtReduce/binary>> | Out]; _ -> [<<",`crit_hurt_reduce` = ", CritHurtReduce/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [17|Changes], Out)->
    CritHurtAdd = int_to_bin(Record#db_player_sys_attr.crit_hurt_add ),
    Out1 = case length(Out) of 1 -> [<<"`crit_hurt_add` = ", CritHurtAdd/binary>> | Out]; _ -> [<<",`crit_hurt_add` = ", CritHurtAdd/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [16|Changes], Out)->
    HurtReduce = int_to_bin(Record#db_player_sys_attr.hurt_reduce ),
    Out1 = case length(Out) of 1 -> [<<"`hurt_reduce` = ", HurtReduce/binary>> | Out]; _ -> [<<",`hurt_reduce` = ", HurtReduce/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [15|Changes], Out)->
    HurtAdd = int_to_bin(Record#db_player_sys_attr.hurt_add ),
    Out1 = case length(Out) of 1 -> [<<"`hurt_add` = ", HurtAdd/binary>> | Out]; _ -> [<<",`hurt_add` = ", HurtAdd/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [14|Changes], Out)->
    CritTime = int_to_bin(Record#db_player_sys_attr.crit_time ),
    Out1 = case length(Out) of 1 -> [<<"`crit_time` = ", CritTime/binary>> | Out]; _ -> [<<",`crit_time` = ", CritTime/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [13|Changes], Out)->
    Speed = int_to_bin(Record#db_player_sys_attr.speed ),
    Out1 = case length(Out) of 1 -> [<<"`speed` = ", Speed/binary>> | Out]; _ -> [<<",`speed` = ", Speed/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [12|Changes], Out)->
    Tenacity = int_to_bin(Record#db_player_sys_attr.tenacity ),
    Out1 = case length(Out) of 1 -> [<<"`tenacity` = ", Tenacity/binary>> | Out]; _ -> [<<",`tenacity` = ", Tenacity/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [11|Changes], Out)->
    Critical = int_to_bin(Record#db_player_sys_attr.critical ),
    Out1 = case length(Out) of 1 -> [<<"`critical` = ", Critical/binary>> | Out]; _ -> [<<",`critical` = ", Critical/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [10|Changes], Out)->
    Dodge = int_to_bin(Record#db_player_sys_attr.dodge ),
    Out1 = case length(Out) of 1 -> [<<"`dodge` = ", Dodge/binary>> | Out]; _ -> [<<",`dodge` = ", Dodge/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [9|Changes], Out)->
    Hit = int_to_bin(Record#db_player_sys_attr.hit ),
    Out1 = case length(Out) of 1 -> [<<"`hit` = ", Hit/binary>> | Out]; _ -> [<<",`hit` = ", Hit/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [8|Changes], Out)->
    Defense = int_to_bin(Record#db_player_sys_attr.defense ),
    Out1 = case length(Out) of 1 -> [<<"`defense` = ", Defense/binary>> | Out]; _ -> [<<",`defense` = ", Defense/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [7|Changes], Out)->
    Attack = int_to_bin(Record#db_player_sys_attr.attack ),
    Out1 = case length(Out) of 1 -> [<<"`attack` = ", Attack/binary>> | Out]; _ -> [<<",`attack` = ", Attack/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [6|Changes], Out)->
    Hp = int_to_bin(Record#db_player_sys_attr.hp ),
    Out1 = case length(Out) of 1 -> [<<"`hp` = ", Hp/binary>> | Out]; _ -> [<<",`hp` = ", Hp/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [5|Changes], Out)->
    Power = int_to_bin(Record#db_player_sys_attr.power ),
    Out1 = case length(Out) of 1 -> [<<"`power` = ", Power/binary>> | Out]; _ -> [<<",`power` = ", Power/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [4|Changes], Out)->
    FunId = int_to_bin(Record#db_player_sys_attr.fun_id ),
    Out1 = case length(Out) of 1 -> [<<"`fun_id` = ", FunId/binary>> | Out]; _ -> [<<",`fun_id` = ", FunId/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql(player_sys_attr, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_sys_attr.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_sys_attr, Record, Changes, Out1);
generate_update_sql (player_special_prop, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_special_prop.player_id),
    PropObjId = int_to_bin(Record#db_player_special_prop.prop_obj_id),
    [<<" WHERE `prop_obj_id` = ", PropObjId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_special_prop, Record, [6|Changes], Out)->
    ExpireTime = int_to_bin(Record#db_player_special_prop.expire_time ),
    Out1 = case length(Out) of 1 -> [<<"`expire_time` = ", ExpireTime/binary>> | Out]; _ -> [<<",`expire_time` = ", ExpireTime/binary>> | Out] end,
    generate_update_sql (player_special_prop, Record, Changes, Out1);
generate_update_sql(player_special_prop, Record, [5|Changes], Out)->
    PropId = int_to_bin(Record#db_player_special_prop.prop_id ),
    Out1 = case length(Out) of 1 -> [<<"`prop_id` = ", PropId/binary>> | Out]; _ -> [<<",`prop_id` = ", PropId/binary>> | Out] end,
    generate_update_sql (player_special_prop, Record, Changes, Out1);
generate_update_sql(player_special_prop, Record, [4|Changes], Out)->
    PropObjId = int_to_bin(Record#db_player_special_prop.prop_obj_id ),
    Out1 = case length(Out) of 1 -> [<<"`prop_obj_id` = ", PropObjId/binary>> | Out]; _ -> [<<",`prop_obj_id` = ", PropObjId/binary>> | Out] end,
    generate_update_sql (player_special_prop, Record, Changes, Out1);
generate_update_sql(player_special_prop, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_special_prop.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_special_prop, Record, Changes, Out1);
generate_update_sql (player_shop, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_shop.player_id),
    Id = int_to_bin(Record#db_player_shop.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_shop, Record, [8|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_shop.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_shop, Record, Changes, Out1);
generate_update_sql(player_shop, Record, [7|Changes], Out)->
    AwardState = int_to_bin(Record#db_player_shop.award_state ),
    Out1 = case length(Out) of 1 -> [<<"`award_state` = ", AwardState/binary>> | Out]; _ -> [<<",`award_state` = ", AwardState/binary>> | Out] end,
    generate_update_sql (player_shop, Record, Changes, Out1);
generate_update_sql(player_shop, Record, [6|Changes], Out)->
    BuyCount = int_to_bin(Record#db_player_shop.buy_count ),
    Out1 = case length(Out) of 1 -> [<<"`buy_count` = ", BuyCount/binary>> | Out]; _ -> [<<",`buy_count` = ", BuyCount/binary>> | Out] end,
    generate_update_sql (player_shop, Record, Changes, Out1);
generate_update_sql(player_shop, Record, [5|Changes], Out)->
    LimitType = int_to_bin(Record#db_player_shop.limit_type ),
    Out1 = case length(Out) of 1 -> [<<"`limit_type` = ", LimitType/binary>> | Out]; _ -> [<<",`limit_type` = ", LimitType/binary>> | Out] end,
    generate_update_sql (player_shop, Record, Changes, Out1);
generate_update_sql(player_shop, Record, [4|Changes], Out)->
    Id = int_to_bin(Record#db_player_shop.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_shop, Record, Changes, Out1);
generate_update_sql(player_shop, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_shop.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_shop, Record, Changes, Out1);
generate_update_sql (player_shen_long, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_shen_long.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_shen_long, Record, [5|Changes], Out)->
    Time = int_to_bin(Record#db_player_shen_long.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (player_shen_long, Record, Changes, Out1);
generate_update_sql(player_shen_long, Record, [4|Changes], Out)->
    Type = int_to_bin(Record#db_player_shen_long.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (player_shen_long, Record, Changes, Out1);
generate_update_sql(player_shen_long, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_shen_long.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_shen_long, Record, Changes, Out1);
generate_update_sql (player_share_task_award, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_share_task_award.player_id),
    TaskType = int_to_bin(Record#db_player_share_task_award.task_type),
    TaskId = int_to_bin(Record#db_player_share_task_award.task_id),
    [<<" WHERE `task_id` = ", TaskId/binary,        " AND `task_type` = ", TaskType/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_share_task_award, Record, [6|Changes], Out)->
    State = int_to_bin(Record#db_player_share_task_award.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_share_task_award, Record, Changes, Out1);
generate_update_sql(player_share_task_award, Record, [5|Changes], Out)->
    TaskId = int_to_bin(Record#db_player_share_task_award.task_id ),
    Out1 = case length(Out) of 1 -> [<<"`task_id` = ", TaskId/binary>> | Out]; _ -> [<<",`task_id` = ", TaskId/binary>> | Out] end,
    generate_update_sql (player_share_task_award, Record, Changes, Out1);
generate_update_sql(player_share_task_award, Record, [4|Changes], Out)->
    TaskType = int_to_bin(Record#db_player_share_task_award.task_type ),
    Out1 = case length(Out) of 1 -> [<<"`task_type` = ", TaskType/binary>> | Out]; _ -> [<<",`task_type` = ", TaskType/binary>> | Out] end,
    generate_update_sql (player_share_task_award, Record, Changes, Out1);
generate_update_sql(player_share_task_award, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_share_task_award.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_share_task_award, Record, Changes, Out1);
generate_update_sql (player_share_task, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_share_task.player_id),
    TaskType = int_to_bin(Record#db_player_share_task.task_type),
    [<<" WHERE `task_type` = ", TaskType/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_share_task, Record, [6|Changes], Out)->
    State = int_to_bin(Record#db_player_share_task.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_share_task, Record, Changes, Out1);
generate_update_sql(player_share_task, Record, [5|Changes], Out)->
    Value = int_to_bin(Record#db_player_share_task.value ),
    Out1 = case length(Out) of 1 -> [<<"`value` = ", Value/binary>> | Out]; _ -> [<<",`value` = ", Value/binary>> | Out] end,
    generate_update_sql (player_share_task, Record, Changes, Out1);
generate_update_sql(player_share_task, Record, [4|Changes], Out)->
    TaskType = int_to_bin(Record#db_player_share_task.task_type ),
    Out1 = case length(Out) of 1 -> [<<"`task_type` = ", TaskType/binary>> | Out]; _ -> [<<",`task_type` = ", TaskType/binary>> | Out] end,
    generate_update_sql (player_share_task, Record, Changes, Out1);
generate_update_sql(player_share_task, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_share_task.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_share_task, Record, Changes, Out1);
generate_update_sql (player_share_friend, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_share_friend.player_id),
    Id = int_to_bin(Record#db_player_share_friend.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_share_friend, Record, [6|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_share_friend.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_share_friend, Record, Changes, Out1);
generate_update_sql(player_share_friend, Record, [5|Changes], Out)->
    State = int_to_bin(Record#db_player_share_friend.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_share_friend, Record, Changes, Out1);
generate_update_sql(player_share_friend, Record, [4|Changes], Out)->
    Id = int_to_bin(Record#db_player_share_friend.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_share_friend, Record, Changes, Out1);
generate_update_sql(player_share_friend, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_share_friend.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_share_friend, Record, Changes, Out1);
generate_update_sql (player_share, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_share.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_share, Record, [5|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_share.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_share, Record, Changes, Out1);
generate_update_sql(player_share, Record, [4|Changes], Out)->
    Count = int_to_bin(Record#db_player_share.count ),
    Out1 = case length(Out) of 1 -> [<<"`count` = ", Count/binary>> | Out]; _ -> [<<",`count` = ", Count/binary>> | Out] end,
    generate_update_sql (player_share, Record, Changes, Out1);
generate_update_sql(player_share, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_share.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_share, Record, Changes, Out1);
generate_update_sql (player_seven_login, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_seven_login.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_seven_login, Record, [4|Changes], Out)->
    GiveAwardValue = int_to_bin(Record#db_player_seven_login.give_award_value ),
    Out1 = case length(Out) of 1 -> [<<"`give_award_value` = ", GiveAwardValue/binary>> | Out]; _ -> [<<",`give_award_value` = ", GiveAwardValue/binary>> | Out] end,
    generate_update_sql (player_seven_login, Record, Changes, Out1);
generate_update_sql(player_seven_login, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_seven_login.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_seven_login, Record, Changes, Out1);
generate_update_sql (player_server_data, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_server_data.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_server_data, Record, [5|Changes], Out)->
    ServerId = list_to_bin(Record#db_player_server_data.server_id ),
    Out1 = case length(Out) of 1 -> [<<"`server_id` = ", ServerId/binary>> | Out]; _ -> [<<",`server_id` = ", ServerId/binary>> | Out] end,
    generate_update_sql (player_server_data, Record, Changes, Out1);
generate_update_sql(player_server_data, Record, [4|Changes], Out)->
    PlatformId = list_to_bin(Record#db_player_server_data.platform_id ),
    Out1 = case length(Out) of 1 -> [<<"`platform_id` = ", PlatformId/binary>> | Out]; _ -> [<<",`platform_id` = ", PlatformId/binary>> | Out] end,
    generate_update_sql (player_server_data, Record, Changes, Out1);
generate_update_sql(player_server_data, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_server_data.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_server_data, Record, Changes, Out1);
generate_update_sql (player_send_gamebar_msg, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_send_gamebar_msg.player_id),
    MsgType = int_to_bin(Record#db_player_send_gamebar_msg.msg_type),
    [<<" WHERE `msg_type` = ", MsgType/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_send_gamebar_msg, Record, [6|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_send_gamebar_msg.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_send_gamebar_msg, Record, Changes, Out1);
generate_update_sql(player_send_gamebar_msg, Record, [5|Changes], Out)->
    MsgId = int_to_bin(Record#db_player_send_gamebar_msg.msg_id ),
    Out1 = case length(Out) of 1 -> [<<"`msg_id` = ", MsgId/binary>> | Out]; _ -> [<<",`msg_id` = ", MsgId/binary>> | Out] end,
    generate_update_sql (player_send_gamebar_msg, Record, Changes, Out1);
generate_update_sql(player_send_gamebar_msg, Record, [4|Changes], Out)->
    MsgType = int_to_bin(Record#db_player_send_gamebar_msg.msg_type ),
    Out1 = case length(Out) of 1 -> [<<"`msg_type` = ", MsgType/binary>> | Out]; _ -> [<<",`msg_type` = ", MsgType/binary>> | Out] end,
    generate_update_sql (player_send_gamebar_msg, Record, Changes, Out1);
generate_update_sql(player_send_gamebar_msg, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_send_gamebar_msg.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_send_gamebar_msg, Record, Changes, Out1);
generate_update_sql (player_prop, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_prop.player_id),
    PropId = int_to_bin(Record#db_player_prop.prop_id),
    [<<" WHERE `prop_id` = ", PropId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_prop, Record, [6|Changes], Out)->
    ExpireTime = int_to_bin(Record#db_player_prop.expire_time ),
    Out1 = case length(Out) of 1 -> [<<"`expire_time` = ", ExpireTime/binary>> | Out]; _ -> [<<",`expire_time` = ", ExpireTime/binary>> | Out] end,
    generate_update_sql (player_prop, Record, Changes, Out1);
generate_update_sql(player_prop, Record, [5|Changes], Out)->
    Num = int_to_bin(Record#db_player_prop.num ),
    Out1 = case length(Out) of 1 -> [<<"`num` = ", Num/binary>> | Out]; _ -> [<<",`num` = ", Num/binary>> | Out] end,
    generate_update_sql (player_prop, Record, Changes, Out1);
generate_update_sql(player_prop, Record, [4|Changes], Out)->
    PropId = int_to_bin(Record#db_player_prop.prop_id ),
    Out1 = case length(Out) of 1 -> [<<"`prop_id` = ", PropId/binary>> | Out]; _ -> [<<",`prop_id` = ", PropId/binary>> | Out] end,
    generate_update_sql (player_prop, Record, Changes, Out1);
generate_update_sql(player_prop, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_prop.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_prop, Record, Changes, Out1);
generate_update_sql (player_prerogative_card, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_prerogative_card.player_id),
    Type = int_to_bin(Record#db_player_prerogative_card.type),
    [<<" WHERE `type` = ", Type/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_prerogative_card, Record, [6|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_prerogative_card.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_prerogative_card, Record, Changes, Out1);
generate_update_sql(player_prerogative_card, Record, [5|Changes], Out)->
    State = int_to_bin(Record#db_player_prerogative_card.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_prerogative_card, Record, Changes, Out1);
generate_update_sql(player_prerogative_card, Record, [4|Changes], Out)->
    Type = int_to_bin(Record#db_player_prerogative_card.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (player_prerogative_card, Record, Changes, Out1);
generate_update_sql(player_prerogative_card, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_prerogative_card.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_prerogative_card, Record, Changes, Out1);
generate_update_sql (player_platform_award, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_platform_award.player_id),
    Id = int_to_bin(Record#db_player_platform_award.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_platform_award, Record, [6|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_platform_award.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_platform_award, Record, Changes, Out1);
generate_update_sql(player_platform_award, Record, [5|Changes], Out)->
    State = int_to_bin(Record#db_player_platform_award.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_platform_award, Record, Changes, Out1);
generate_update_sql(player_platform_award, Record, [4|Changes], Out)->
    Id = int_to_bin(Record#db_player_platform_award.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_platform_award, Record, Changes, Out1);
generate_update_sql(player_platform_award, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_platform_award.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_platform_award, Record, Changes, Out1);
generate_update_sql (player_passive_skill, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_passive_skill.player_id),
    PassiveSkillId = int_to_bin(Record#db_player_passive_skill.passive_skill_id),
    [<<" WHERE `passive_skill_id` = ", PassiveSkillId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_passive_skill, Record, [7|Changes], Out)->
    LastTime = int_to_bin(Record#db_player_passive_skill.last_time ),
    Out1 = case length(Out) of 1 -> [<<"`last_time` = ", LastTime/binary>> | Out]; _ -> [<<",`last_time` = ", LastTime/binary>> | Out] end,
    generate_update_sql (player_passive_skill, Record, Changes, Out1);
generate_update_sql(player_passive_skill, Record, [6|Changes], Out)->
    IsEquip = int_to_bin(Record#db_player_passive_skill.is_equip ),
    Out1 = case length(Out) of 1 -> [<<"`is_equip` = ", IsEquip/binary>> | Out]; _ -> [<<",`is_equip` = ", IsEquip/binary>> | Out] end,
    generate_update_sql (player_passive_skill, Record, Changes, Out1);
generate_update_sql(player_passive_skill, Record, [5|Changes], Out)->
    Level = int_to_bin(Record#db_player_passive_skill.level ),
    Out1 = case length(Out) of 1 -> [<<"`level` = ", Level/binary>> | Out]; _ -> [<<",`level` = ", Level/binary>> | Out] end,
    generate_update_sql (player_passive_skill, Record, Changes, Out1);
generate_update_sql(player_passive_skill, Record, [4|Changes], Out)->
    PassiveSkillId = int_to_bin(Record#db_player_passive_skill.passive_skill_id ),
    Out1 = case length(Out) of 1 -> [<<"`passive_skill_id` = ", PassiveSkillId/binary>> | Out]; _ -> [<<",`passive_skill_id` = ", PassiveSkillId/binary>> | Out] end,
    generate_update_sql (player_passive_skill, Record, Changes, Out1);
generate_update_sql(player_passive_skill, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_passive_skill.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_passive_skill, Record, Changes, Out1);
generate_update_sql (player_online_info, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_online_info.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_online_info, Record, [5|Changes], Out)->
    RecordOnlineTimestamps = int_to_bin(Record#db_player_online_info.record_online_timestamps ),
    Out1 = case length(Out) of 1 -> [<<"`record_online_timestamps` = ", RecordOnlineTimestamps/binary>> | Out]; _ -> [<<",`record_online_timestamps` = ", RecordOnlineTimestamps/binary>> | Out] end,
    generate_update_sql (player_online_info, Record, Changes, Out1);
generate_update_sql(player_online_info, Record, [4|Changes], Out)->
    TotalHoursOnlineToday = int_to_bin(Record#db_player_online_info.total_hours_online_today ),
    Out1 = case length(Out) of 1 -> [<<"`total_hours_online_today` = ", TotalHoursOnlineToday/binary>> | Out]; _ -> [<<",`total_hours_online_today` = ", TotalHoursOnlineToday/binary>> | Out] end,
    generate_update_sql (player_online_info, Record, Changes, Out1);
generate_update_sql(player_online_info, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_online_info.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_online_info, Record, Changes, Out1);
generate_update_sql (player_online_award, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_online_award.player_id),
    Id = int_to_bin(Record#db_player_online_award.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_online_award, Record, [6|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_online_award.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_online_award, Record, Changes, Out1);
generate_update_sql(player_online_award, Record, [5|Changes], Out)->
    State = int_to_bin(Record#db_player_online_award.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_online_award, Record, Changes, Out1);
generate_update_sql(player_online_award, Record, [4|Changes], Out)->
    Id = int_to_bin(Record#db_player_online_award.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_online_award, Record, Changes, Out1);
generate_update_sql(player_online_award, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_online_award.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_online_award, Record, Changes, Out1);
generate_update_sql (player_offline_apply, Record, [], Out) ->
     Id = int_to_bin(Record#db_player_offline_apply.id),
    [<<" WHERE `id` = ", Id/binary, ";\n">> | Out];
generate_update_sql(player_offline_apply, Record, [8|Changes], Out)->
    Timestamp = int_to_bin(Record#db_player_offline_apply.timestamp ),
    Out1 = case length(Out) of 1 -> [<<"`timestamp` = ", Timestamp/binary>> | Out]; _ -> [<<",`timestamp` = ", Timestamp/binary>> | Out] end,
    generate_update_sql (player_offline_apply, Record, Changes, Out1);
generate_update_sql(player_offline_apply, Record, [7|Changes], Out)->
    Args = list_to_bin(Record#db_player_offline_apply.args ),
    Out1 = case length(Out) of 1 -> [<<"`args` = ", Args/binary>> | Out]; _ -> [<<",`args` = ", Args/binary>> | Out] end,
    generate_update_sql (player_offline_apply, Record, Changes, Out1);
generate_update_sql(player_offline_apply, Record, [6|Changes], Out)->
    Function = list_to_bin(Record#db_player_offline_apply.function ),
    Out1 = case length(Out) of 1 -> [<<"`function` = ", Function/binary>> | Out]; _ -> [<<",`function` = ", Function/binary>> | Out] end,
    generate_update_sql (player_offline_apply, Record, Changes, Out1);
generate_update_sql(player_offline_apply, Record, [5|Changes], Out)->
    Module = list_to_bin(Record#db_player_offline_apply.module ),
    Out1 = case length(Out) of 1 -> [<<"`module` = ", Module/binary>> | Out]; _ -> [<<",`module` = ", Module/binary>> | Out] end,
    generate_update_sql (player_offline_apply, Record, Changes, Out1);
generate_update_sql(player_offline_apply, Record, [4|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_offline_apply.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_offline_apply, Record, Changes, Out1);
generate_update_sql(player_offline_apply, Record, [3|Changes], Out)->
    Id = int_to_bin(Record#db_player_offline_apply.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_offline_apply, Record, Changes, Out1);
generate_update_sql (player_mission_data, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_mission_data.player_id),
    MissionType = int_to_bin(Record#db_player_mission_data.mission_type),
    [<<" WHERE `mission_type` = ", MissionType/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_mission_data, Record, [6|Changes], Out)->
    Time = int_to_bin(Record#db_player_mission_data.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (player_mission_data, Record, Changes, Out1);
generate_update_sql(player_mission_data, Record, [5|Changes], Out)->
    MissionId = int_to_bin(Record#db_player_mission_data.mission_id ),
    Out1 = case length(Out) of 1 -> [<<"`mission_id` = ", MissionId/binary>> | Out]; _ -> [<<",`mission_id` = ", MissionId/binary>> | Out] end,
    generate_update_sql (player_mission_data, Record, Changes, Out1);
generate_update_sql(player_mission_data, Record, [4|Changes], Out)->
    MissionType = int_to_bin(Record#db_player_mission_data.mission_type ),
    Out1 = case length(Out) of 1 -> [<<"`mission_type` = ", MissionType/binary>> | Out]; _ -> [<<",`mission_type` = ", MissionType/binary>> | Out] end,
    generate_update_sql (player_mission_data, Record, Changes, Out1);
generate_update_sql(player_mission_data, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_mission_data.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_mission_data, Record, Changes, Out1);
generate_update_sql (player_mail, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_mail.player_id),
    MailRealId = int_to_bin(Record#db_player_mail.mail_real_id),
    [<<" WHERE `mail_real_id` = ", MailRealId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_mail, Record, [14|Changes], Out)->
    CreateTime = int_to_bin(Record#db_player_mail.create_time ),
    Out1 = case length(Out) of 1 -> [<<"`create_time` = ", CreateTime/binary>> | Out]; _ -> [<<",`create_time` = ", CreateTime/binary>> | Out] end,
    generate_update_sql (player_mail, Record, Changes, Out1);
generate_update_sql(player_mail, Record, [13|Changes], Out)->
    ValidTime = int_to_bin(Record#db_player_mail.valid_time ),
    Out1 = case length(Out) of 1 -> [<<"`valid_time` = ", ValidTime/binary>> | Out]; _ -> [<<",`valid_time` = ", ValidTime/binary>> | Out] end,
    generate_update_sql (player_mail, Record, Changes, Out1);
generate_update_sql(player_mail, Record, [12|Changes], Out)->
    LogType = int_to_bin(Record#db_player_mail.log_type ),
    Out1 = case length(Out) of 1 -> [<<"`log_type` = ", LogType/binary>> | Out]; _ -> [<<",`log_type` = ", LogType/binary>> | Out] end,
    generate_update_sql (player_mail, Record, Changes, Out1);
generate_update_sql(player_mail, Record, [11|Changes], Out)->
    ItemList = list_to_bin(Record#db_player_mail.item_list ),
    Out1 = case length(Out) of 1 -> [<<"`item_list` = ", ItemList/binary>> | Out]; _ -> [<<",`item_list` = ", ItemList/binary>> | Out] end,
    generate_update_sql (player_mail, Record, Changes, Out1);
generate_update_sql(player_mail, Record, [10|Changes], Out)->
    Param = list_to_bin(Record#db_player_mail.param ),
    Out1 = case length(Out) of 1 -> [<<"`param` = ", Param/binary>> | Out]; _ -> [<<",`param` = ", Param/binary>> | Out] end,
    generate_update_sql (player_mail, Record, Changes, Out1);
generate_update_sql(player_mail, Record, [9|Changes], Out)->
    Content = list_to_bin(Record#db_player_mail.content ),
    Out1 = case length(Out) of 1 -> [<<"`content` = ", Content/binary>> | Out]; _ -> [<<",`content` = ", Content/binary>> | Out] end,
    generate_update_sql (player_mail, Record, Changes, Out1);
generate_update_sql(player_mail, Record, [8|Changes], Out)->
    TitleName = list_to_bin(Record#db_player_mail.title_name ),
    Out1 = case length(Out) of 1 -> [<<"`title_name` = ", TitleName/binary>> | Out]; _ -> [<<",`title_name` = ", TitleName/binary>> | Out] end,
    generate_update_sql (player_mail, Record, Changes, Out1);
generate_update_sql(player_mail, Record, [7|Changes], Out)->
    State = int_to_bin(Record#db_player_mail.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_mail, Record, Changes, Out1);
generate_update_sql(player_mail, Record, [6|Changes], Out)->
    WeightValue = int_to_bin(Record#db_player_mail.weight_value ),
    Out1 = case length(Out) of 1 -> [<<"`weight_value` = ", WeightValue/binary>> | Out]; _ -> [<<",`weight_value` = ", WeightValue/binary>> | Out] end,
    generate_update_sql (player_mail, Record, Changes, Out1);
generate_update_sql(player_mail, Record, [5|Changes], Out)->
    MailId = int_to_bin(Record#db_player_mail.mail_id ),
    Out1 = case length(Out) of 1 -> [<<"`mail_id` = ", MailId/binary>> | Out]; _ -> [<<",`mail_id` = ", MailId/binary>> | Out] end,
    generate_update_sql (player_mail, Record, Changes, Out1);
generate_update_sql(player_mail, Record, [4|Changes], Out)->
    MailRealId = int_to_bin(Record#db_player_mail.mail_real_id ),
    Out1 = case length(Out) of 1 -> [<<"`mail_real_id` = ", MailRealId/binary>> | Out]; _ -> [<<",`mail_real_id` = ", MailRealId/binary>> | Out] end,
    generate_update_sql (player_mail, Record, Changes, Out1);
generate_update_sql(player_mail, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_mail.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_mail, Record, Changes, Out1);
generate_update_sql (player_leichong, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_leichong.player_id),
    ActivityId = int_to_bin(Record#db_player_leichong.activity_id),
    TaskId = int_to_bin(Record#db_player_leichong.task_id),
    [<<" WHERE `task_id` = ", TaskId/binary,        " AND `activity_id` = ", ActivityId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_leichong, Record, [7|Changes], Out)->
    State = int_to_bin(Record#db_player_leichong.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_leichong, Record, Changes, Out1);
generate_update_sql(player_leichong, Record, [6|Changes], Out)->
    Done = int_to_bin(Record#db_player_leichong.done ),
    Out1 = case length(Out) of 1 -> [<<"`done` = ", Done/binary>> | Out]; _ -> [<<",`done` = ", Done/binary>> | Out] end,
    generate_update_sql (player_leichong, Record, Changes, Out1);
generate_update_sql(player_leichong, Record, [5|Changes], Out)->
    TaskId = int_to_bin(Record#db_player_leichong.task_id ),
    Out1 = case length(Out) of 1 -> [<<"`task_id` = ", TaskId/binary>> | Out]; _ -> [<<",`task_id` = ", TaskId/binary>> | Out] end,
    generate_update_sql (player_leichong, Record, Changes, Out1);
generate_update_sql(player_leichong, Record, [4|Changes], Out)->
    ActivityId = int_to_bin(Record#db_player_leichong.activity_id ),
    Out1 = case length(Out) of 1 -> [<<"`activity_id` = ", ActivityId/binary>> | Out]; _ -> [<<",`activity_id` = ", ActivityId/binary>> | Out] end,
    generate_update_sql (player_leichong, Record, Changes, Out1);
generate_update_sql(player_leichong, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_leichong.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_leichong, Record, Changes, Out1);
generate_update_sql (player_laba_data, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_laba_data.player_id),
    LabaId = int_to_bin(Record#db_player_laba_data.laba_id),
    CostRate = int_to_bin(Record#db_player_laba_data.cost_rate),
    [<<" WHERE `cost_rate` = ", CostRate/binary,        " AND `laba_id` = ", LabaId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_laba_data, Record, [6|Changes], Out)->
    MissedTimes = int_to_bin(Record#db_player_laba_data.missed_times ),
    Out1 = case length(Out) of 1 -> [<<"`missed_times` = ", MissedTimes/binary>> | Out]; _ -> [<<",`missed_times` = ", MissedTimes/binary>> | Out] end,
    generate_update_sql (player_laba_data, Record, Changes, Out1);
generate_update_sql(player_laba_data, Record, [5|Changes], Out)->
    CostRate = int_to_bin(Record#db_player_laba_data.cost_rate ),
    Out1 = case length(Out) of 1 -> [<<"`cost_rate` = ", CostRate/binary>> | Out]; _ -> [<<",`cost_rate` = ", CostRate/binary>> | Out] end,
    generate_update_sql (player_laba_data, Record, Changes, Out1);
generate_update_sql(player_laba_data, Record, [4|Changes], Out)->
    LabaId = int_to_bin(Record#db_player_laba_data.laba_id ),
    Out1 = case length(Out) of 1 -> [<<"`laba_id` = ", LabaId/binary>> | Out]; _ -> [<<",`laba_id` = ", LabaId/binary>> | Out] end,
    generate_update_sql (player_laba_data, Record, Changes, Out1);
generate_update_sql(player_laba_data, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_laba_data.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_laba_data, Record, Changes, Out1);
generate_update_sql (player_jiangjinchi, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_jiangjinchi.player_id),
    SceneId = int_to_bin(Record#db_player_jiangjinchi.scene_id),
    [<<" WHERE `scene_id` = ", SceneId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_jiangjinchi, Record, [12|Changes], Out)->
    InitAwardNum = int_to_bin(Record#db_player_jiangjinchi.init_award_num ),
    Out1 = case length(Out) of 1 -> [<<"`init_award_num` = ", InitAwardNum/binary>> | Out]; _ -> [<<",`init_award_num` = ", InitAwardNum/binary>> | Out] end,
    generate_update_sql (player_jiangjinchi, Record, Changes, Out1);
generate_update_sql(player_jiangjinchi, Record, [11|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_jiangjinchi.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_jiangjinchi, Record, Changes, Out1);
generate_update_sql(player_jiangjinchi, Record, [10|Changes], Out)->
    DoubledTimes = int_to_bin(Record#db_player_jiangjinchi.doubled_times ),
    Out1 = case length(Out) of 1 -> [<<"`doubled_times` = ", DoubledTimes/binary>> | Out]; _ -> [<<",`doubled_times` = ", DoubledTimes/binary>> | Out] end,
    generate_update_sql (player_jiangjinchi, Record, Changes, Out1);
generate_update_sql(player_jiangjinchi, Record, [9|Changes], Out)->
    ExtraAwardNum = int_to_bin(Record#db_player_jiangjinchi.extra_award_num ),
    Out1 = case length(Out) of 1 -> [<<"`extra_award_num` = ", ExtraAwardNum/binary>> | Out]; _ -> [<<",`extra_award_num` = ", ExtraAwardNum/binary>> | Out] end,
    generate_update_sql (player_jiangjinchi, Record, Changes, Out1);
generate_update_sql(player_jiangjinchi, Record, [8|Changes], Out)->
    AwardNum = int_to_bin(Record#db_player_jiangjinchi.award_num ),
    Out1 = case length(Out) of 1 -> [<<"`award_num` = ", AwardNum/binary>> | Out]; _ -> [<<",`award_num` = ", AwardNum/binary>> | Out] end,
    generate_update_sql (player_jiangjinchi, Record, Changes, Out1);
generate_update_sql(player_jiangjinchi, Record, [7|Changes], Out)->
    State = int_to_bin(Record#db_player_jiangjinchi.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_jiangjinchi, Record, Changes, Out1);
generate_update_sql(player_jiangjinchi, Record, [6|Changes], Out)->
    AtkTimes = int_to_bin(Record#db_player_jiangjinchi.atk_times ),
    Out1 = case length(Out) of 1 -> [<<"`atk_times` = ", AtkTimes/binary>> | Out]; _ -> [<<",`atk_times` = ", AtkTimes/binary>> | Out] end,
    generate_update_sql (player_jiangjinchi, Record, Changes, Out1);
generate_update_sql(player_jiangjinchi, Record, [5|Changes], Out)->
    AtkCost = int_to_bin(Record#db_player_jiangjinchi.atk_cost ),
    Out1 = case length(Out) of 1 -> [<<"`atk_cost` = ", AtkCost/binary>> | Out]; _ -> [<<",`atk_cost` = ", AtkCost/binary>> | Out] end,
    generate_update_sql (player_jiangjinchi, Record, Changes, Out1);
generate_update_sql(player_jiangjinchi, Record, [4|Changes], Out)->
    SceneId = int_to_bin(Record#db_player_jiangjinchi.scene_id ),
    Out1 = case length(Out) of 1 -> [<<"`scene_id` = ", SceneId/binary>> | Out]; _ -> [<<",`scene_id` = ", SceneId/binary>> | Out] end,
    generate_update_sql (player_jiangjinchi, Record, Changes, Out1);
generate_update_sql(player_jiangjinchi, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_jiangjinchi.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_jiangjinchi, Record, Changes, Out1);
generate_update_sql (player_invite_friend_log, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_invite_friend_log.player_id),
    AccId = list_to_bin(Record#db_player_invite_friend_log.acc_id),
    [<<" WHERE `acc_id` = ", AccId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_invite_friend_log, Record, [8|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_invite_friend_log.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_invite_friend_log, Record, Changes, Out1);
generate_update_sql(player_invite_friend_log, Record, [7|Changes], Out)->
    SharePlayerId = int_to_bin(Record#db_player_invite_friend_log.share_player_id ),
    Out1 = case length(Out) of 1 -> [<<"`share_player_id` = ", SharePlayerId/binary>> | Out]; _ -> [<<",`share_player_id` = ", SharePlayerId/binary>> | Out] end,
    generate_update_sql (player_invite_friend_log, Record, Changes, Out1);
generate_update_sql(player_invite_friend_log, Record, [6|Changes], Out)->
    ServerId = list_to_bin(Record#db_player_invite_friend_log.server_id ),
    Out1 = case length(Out) of 1 -> [<<"`server_id` = ", ServerId/binary>> | Out]; _ -> [<<",`server_id` = ", ServerId/binary>> | Out] end,
    generate_update_sql (player_invite_friend_log, Record, Changes, Out1);
generate_update_sql(player_invite_friend_log, Record, [5|Changes], Out)->
    Type = int_to_bin(Record#db_player_invite_friend_log.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (player_invite_friend_log, Record, Changes, Out1);
generate_update_sql(player_invite_friend_log, Record, [4|Changes], Out)->
    AccId = list_to_bin(Record#db_player_invite_friend_log.acc_id ),
    Out1 = case length(Out) of 1 -> [<<"`acc_id` = ", AccId/binary>> | Out]; _ -> [<<",`acc_id` = ", AccId/binary>> | Out] end,
    generate_update_sql (player_invite_friend_log, Record, Changes, Out1);
generate_update_sql(player_invite_friend_log, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_invite_friend_log.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_invite_friend_log, Record, Changes, Out1);
generate_update_sql (player_invite_friend, Record, [], Out) ->
     AccId = list_to_bin(Record#db_player_invite_friend.acc_id),
    PlayerId = int_to_bin(Record#db_player_invite_friend.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary,        " AND `acc_id` = ", AccId/binary, ";\n">> | Out];
generate_update_sql(player_invite_friend, Record, [4|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_invite_friend.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_invite_friend, Record, Changes, Out1);
generate_update_sql(player_invite_friend, Record, [3|Changes], Out)->
    AccId = list_to_bin(Record#db_player_invite_friend.acc_id ),
    Out1 = case length(Out) of 1 -> [<<"`acc_id` = ", AccId/binary>> | Out]; _ -> [<<",`acc_id` = ", AccId/binary>> | Out] end,
    generate_update_sql (player_invite_friend, Record, Changes, Out1);
generate_update_sql (player_invest_type, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_invest_type.player_id),
    Type = int_to_bin(Record#db_player_invest_type.type),
    [<<" WHERE `type` = ", Type/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_invest_type, Record, [6|Changes], Out)->
    UpdateTime = int_to_bin(Record#db_player_invest_type.update_time ),
    Out1 = case length(Out) of 1 -> [<<"`update_time` = ", UpdateTime/binary>> | Out]; _ -> [<<",`update_time` = ", UpdateTime/binary>> | Out] end,
    generate_update_sql (player_invest_type, Record, Changes, Out1);
generate_update_sql(player_invest_type, Record, [5|Changes], Out)->
    IsBuy = int_to_bin(Record#db_player_invest_type.is_buy ),
    Out1 = case length(Out) of 1 -> [<<"`is_buy` = ", IsBuy/binary>> | Out]; _ -> [<<",`is_buy` = ", IsBuy/binary>> | Out] end,
    generate_update_sql (player_invest_type, Record, Changes, Out1);
generate_update_sql(player_invest_type, Record, [4|Changes], Out)->
    Type = int_to_bin(Record#db_player_invest_type.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (player_invest_type, Record, Changes, Out1);
generate_update_sql(player_invest_type, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_invest_type.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_invest_type, Record, Changes, Out1);
generate_update_sql (player_invest, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_invest.player_id),
    Type = int_to_bin(Record#db_player_invest.type),
    Id = int_to_bin(Record#db_player_invest.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `type` = ", Type/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_invest, Record, [8|Changes], Out)->
    UpdateTime = int_to_bin(Record#db_player_invest.update_time ),
    Out1 = case length(Out) of 1 -> [<<"`update_time` = ", UpdateTime/binary>> | Out]; _ -> [<<",`update_time` = ", UpdateTime/binary>> | Out] end,
    generate_update_sql (player_invest, Record, Changes, Out1);
generate_update_sql(player_invest, Record, [7|Changes], Out)->
    Status = int_to_bin(Record#db_player_invest.status ),
    Out1 = case length(Out) of 1 -> [<<"`status` = ", Status/binary>> | Out]; _ -> [<<",`status` = ", Status/binary>> | Out] end,
    generate_update_sql (player_invest, Record, Changes, Out1);
generate_update_sql(player_invest, Record, [6|Changes], Out)->
    Value = int_to_bin(Record#db_player_invest.value ),
    Out1 = case length(Out) of 1 -> [<<"`value` = ", Value/binary>> | Out]; _ -> [<<",`value` = ", Value/binary>> | Out] end,
    generate_update_sql (player_invest, Record, Changes, Out1);
generate_update_sql(player_invest, Record, [5|Changes], Out)->
    Id = int_to_bin(Record#db_player_invest.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_invest, Record, Changes, Out1);
generate_update_sql(player_invest, Record, [4|Changes], Out)->
    Type = int_to_bin(Record#db_player_invest.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (player_invest, Record, Changes, Out1);
generate_update_sql(player_invest, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_invest.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_invest, Record, Changes, Out1);
generate_update_sql (player_hero_use, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_hero_use.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_hero_use, Record, [6|Changes], Out)->
    Ornaments = int_to_bin(Record#db_player_hero_use.ornaments ),
    Out1 = case length(Out) of 1 -> [<<"`ornaments` = ", Ornaments/binary>> | Out]; _ -> [<<",`ornaments` = ", Ornaments/binary>> | Out] end,
    generate_update_sql (player_hero_use, Record, Changes, Out1);
generate_update_sql(player_hero_use, Record, [5|Changes], Out)->
    Arms = int_to_bin(Record#db_player_hero_use.arms ),
    Out1 = case length(Out) of 1 -> [<<"`arms` = ", Arms/binary>> | Out]; _ -> [<<",`arms` = ", Arms/binary>> | Out] end,
    generate_update_sql (player_hero_use, Record, Changes, Out1);
generate_update_sql(player_hero_use, Record, [4|Changes], Out)->
    HeroId = int_to_bin(Record#db_player_hero_use.hero_id ),
    Out1 = case length(Out) of 1 -> [<<"`hero_id` = ", HeroId/binary>> | Out]; _ -> [<<",`hero_id` = ", HeroId/binary>> | Out] end,
    generate_update_sql (player_hero_use, Record, Changes, Out1);
generate_update_sql(player_hero_use, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_hero_use.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_hero_use, Record, Changes, Out1);
generate_update_sql (player_hero_parts, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_hero_parts.player_id),
    PartsId = int_to_bin(Record#db_player_hero_parts.parts_id),
    [<<" WHERE `parts_id` = ", PartsId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_hero_parts, Record, [4|Changes], Out)->
    PartsId = int_to_bin(Record#db_player_hero_parts.parts_id ),
    Out1 = case length(Out) of 1 -> [<<"`parts_id` = ", PartsId/binary>> | Out]; _ -> [<<",`parts_id` = ", PartsId/binary>> | Out] end,
    generate_update_sql (player_hero_parts, Record, Changes, Out1);
generate_update_sql(player_hero_parts, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_hero_parts.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_hero_parts, Record, Changes, Out1);
generate_update_sql (player_hero, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_hero.player_id),
    HeroId = int_to_bin(Record#db_player_hero.hero_id),
    [<<" WHERE `hero_id` = ", HeroId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_hero, Record, [5|Changes], Out)->
    Star = int_to_bin(Record#db_player_hero.star ),
    Out1 = case length(Out) of 1 -> [<<"`star` = ", Star/binary>> | Out]; _ -> [<<",`star` = ", Star/binary>> | Out] end,
    generate_update_sql (player_hero, Record, Changes, Out1);
generate_update_sql(player_hero, Record, [4|Changes], Out)->
    HeroId = int_to_bin(Record#db_player_hero.hero_id ),
    Out1 = case length(Out) of 1 -> [<<"`hero_id` = ", HeroId/binary>> | Out]; _ -> [<<",`hero_id` = ", HeroId/binary>> | Out] end,
    generate_update_sql (player_hero, Record, Changes, Out1);
generate_update_sql(player_hero, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_hero.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_hero, Record, Changes, Out1);
generate_update_sql (player_gift_mail_log, Record, [], Out) ->
     Sender = int_to_bin(Record#db_player_gift_mail_log.sender),
    CreateTime = int_to_bin(Record#db_player_gift_mail_log.create_time),
    [<<" WHERE `create_time` = ", CreateTime/binary,        " AND `sender` = ", Sender/binary, ";\n">> | Out];
generate_update_sql(player_gift_mail_log, Record, [7|Changes], Out)->
    ItemList = list_to_bin(Record#db_player_gift_mail_log.item_list ),
    Out1 = case length(Out) of 1 -> [<<"`item_list` = ", ItemList/binary>> | Out]; _ -> [<<",`item_list` = ", ItemList/binary>> | Out] end,
    generate_update_sql (player_gift_mail_log, Record, Changes, Out1);
generate_update_sql(player_gift_mail_log, Record, [6|Changes], Out)->
    ReceiverNickname = list_to_bin(Record#db_player_gift_mail_log.receiver_nickname ),
    Out1 = case length(Out) of 1 -> [<<"`receiver_nickname` = ", ReceiverNickname/binary>> | Out]; _ -> [<<",`receiver_nickname` = ", ReceiverNickname/binary>> | Out] end,
    generate_update_sql (player_gift_mail_log, Record, Changes, Out1);
generate_update_sql(player_gift_mail_log, Record, [5|Changes], Out)->
    Receiver = int_to_bin(Record#db_player_gift_mail_log.receiver ),
    Out1 = case length(Out) of 1 -> [<<"`receiver` = ", Receiver/binary>> | Out]; _ -> [<<",`receiver` = ", Receiver/binary>> | Out] end,
    generate_update_sql (player_gift_mail_log, Record, Changes, Out1);
generate_update_sql(player_gift_mail_log, Record, [4|Changes], Out)->
    CreateTime = int_to_bin(Record#db_player_gift_mail_log.create_time ),
    Out1 = case length(Out) of 1 -> [<<"`create_time` = ", CreateTime/binary>> | Out]; _ -> [<<",`create_time` = ", CreateTime/binary>> | Out] end,
    generate_update_sql (player_gift_mail_log, Record, Changes, Out1);
generate_update_sql(player_gift_mail_log, Record, [3|Changes], Out)->
    Sender = int_to_bin(Record#db_player_gift_mail_log.sender ),
    Out1 = case length(Out) of 1 -> [<<"`sender` = ", Sender/binary>> | Out]; _ -> [<<",`sender` = ", Sender/binary>> | Out] end,
    generate_update_sql (player_gift_mail_log, Record, Changes, Out1);
generate_update_sql (player_gift_mail, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_gift_mail.player_id),
    MailRealId = int_to_bin(Record#db_player_gift_mail.mail_real_id),
    [<<" WHERE `mail_real_id` = ", MailRealId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_gift_mail, Record, [16|Changes], Out)->
    CreateTime = int_to_bin(Record#db_player_gift_mail.create_time ),
    Out1 = case length(Out) of 1 -> [<<"`create_time` = ", CreateTime/binary>> | Out]; _ -> [<<",`create_time` = ", CreateTime/binary>> | Out] end,
    generate_update_sql (player_gift_mail, Record, Changes, Out1);
generate_update_sql(player_gift_mail, Record, [15|Changes], Out)->
    ItemList = list_to_bin(Record#db_player_gift_mail.item_list ),
    Out1 = case length(Out) of 1 -> [<<"`item_list` = ", ItemList/binary>> | Out]; _ -> [<<",`item_list` = ", ItemList/binary>> | Out] end,
    generate_update_sql (player_gift_mail, Record, Changes, Out1);
generate_update_sql(player_gift_mail, Record, [14|Changes], Out)->
    ContentParam = list_to_bin(Record#db_player_gift_mail.content_param ),
    Out1 = case length(Out) of 1 -> [<<"`content_param` = ", ContentParam/binary>> | Out]; _ -> [<<",`content_param` = ", ContentParam/binary>> | Out] end,
    generate_update_sql (player_gift_mail, Record, Changes, Out1);
generate_update_sql(player_gift_mail, Record, [13|Changes], Out)->
    Content = list_to_bin(Record#db_player_gift_mail.content ),
    Out1 = case length(Out) of 1 -> [<<"`content` = ", Content/binary>> | Out]; _ -> [<<",`content` = ", Content/binary>> | Out] end,
    generate_update_sql (player_gift_mail, Record, Changes, Out1);
generate_update_sql(player_gift_mail, Record, [12|Changes], Out)->
    TitleParam = list_to_bin(Record#db_player_gift_mail.title_param ),
    Out1 = case length(Out) of 1 -> [<<"`title_param` = ", TitleParam/binary>> | Out]; _ -> [<<",`title_param` = ", TitleParam/binary>> | Out] end,
    generate_update_sql (player_gift_mail, Record, Changes, Out1);
generate_update_sql(player_gift_mail, Record, [11|Changes], Out)->
    TitleContent = list_to_bin(Record#db_player_gift_mail.title_content ),
    Out1 = case length(Out) of 1 -> [<<"`title_content` = ", TitleContent/binary>> | Out]; _ -> [<<",`title_content` = ", TitleContent/binary>> | Out] end,
    generate_update_sql (player_gift_mail, Record, Changes, Out1);
generate_update_sql(player_gift_mail, Record, [10|Changes], Out)->
    MailId = int_to_bin(Record#db_player_gift_mail.mail_id ),
    Out1 = case length(Out) of 1 -> [<<"`mail_id` = ", MailId/binary>> | Out]; _ -> [<<",`mail_id` = ", MailId/binary>> | Out] end,
    generate_update_sql (player_gift_mail, Record, Changes, Out1);
generate_update_sql(player_gift_mail, Record, [9|Changes], Out)->
    IsDel = int_to_bin(Record#db_player_gift_mail.is_del ),
    Out1 = case length(Out) of 1 -> [<<"`is_del` = ", IsDel/binary>> | Out]; _ -> [<<",`is_del` = ", IsDel/binary>> | Out] end,
    generate_update_sql (player_gift_mail, Record, Changes, Out1);
generate_update_sql(player_gift_mail, Record, [8|Changes], Out)->
    State = int_to_bin(Record#db_player_gift_mail.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_gift_mail, Record, Changes, Out1);
generate_update_sql(player_gift_mail, Record, [7|Changes], Out)->
    IsRead = int_to_bin(Record#db_player_gift_mail.is_read ),
    Out1 = case length(Out) of 1 -> [<<"`is_read` = ", IsRead/binary>> | Out]; _ -> [<<",`is_read` = ", IsRead/binary>> | Out] end,
    generate_update_sql (player_gift_mail, Record, Changes, Out1);
generate_update_sql(player_gift_mail, Record, [6|Changes], Out)->
    WeightValue = int_to_bin(Record#db_player_gift_mail.weight_value ),
    Out1 = case length(Out) of 1 -> [<<"`weight_value` = ", WeightValue/binary>> | Out]; _ -> [<<",`weight_value` = ", WeightValue/binary>> | Out] end,
    generate_update_sql (player_gift_mail, Record, Changes, Out1);
generate_update_sql(player_gift_mail, Record, [5|Changes], Out)->
    MailRealId = int_to_bin(Record#db_player_gift_mail.mail_real_id ),
    Out1 = case length(Out) of 1 -> [<<"`mail_real_id` = ", MailRealId/binary>> | Out]; _ -> [<<",`mail_real_id` = ", MailRealId/binary>> | Out] end,
    generate_update_sql (player_gift_mail, Record, Changes, Out1);
generate_update_sql(player_gift_mail, Record, [4|Changes], Out)->
    Sender = int_to_bin(Record#db_player_gift_mail.sender ),
    Out1 = case length(Out) of 1 -> [<<"`sender` = ", Sender/binary>> | Out]; _ -> [<<",`sender` = ", Sender/binary>> | Out] end,
    generate_update_sql (player_gift_mail, Record, Changes, Out1);
generate_update_sql(player_gift_mail, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_gift_mail.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_gift_mail, Record, Changes, Out1);
generate_update_sql (player_gift_code, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_gift_code.player_id),
    GiftCodeType = int_to_bin(Record#db_player_gift_code.gift_code_type),
    [<<" WHERE `gift_code_type` = ", GiftCodeType/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_gift_code, Record, [6|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_gift_code.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_gift_code, Record, Changes, Out1);
generate_update_sql(player_gift_code, Record, [5|Changes], Out)->
    Times = int_to_bin(Record#db_player_gift_code.times ),
    Out1 = case length(Out) of 1 -> [<<"`times` = ", Times/binary>> | Out]; _ -> [<<",`times` = ", Times/binary>> | Out] end,
    generate_update_sql (player_gift_code, Record, Changes, Out1);
generate_update_sql(player_gift_code, Record, [4|Changes], Out)->
    GiftCodeType = int_to_bin(Record#db_player_gift_code.gift_code_type ),
    Out1 = case length(Out) of 1 -> [<<"`gift_code_type` = ", GiftCodeType/binary>> | Out]; _ -> [<<",`gift_code_type` = ", GiftCodeType/binary>> | Out] end,
    generate_update_sql (player_gift_code, Record, Changes, Out1);
generate_update_sql(player_gift_code, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_gift_code.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_gift_code, Record, Changes, Out1);
generate_update_sql (player_game_data, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_game_data.player_id),
    DataId = int_to_bin(Record#db_player_game_data.data_id),
    [<<" WHERE `data_id` = ", DataId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_game_data, Record, [6|Changes], Out)->
    StrData = list_to_bin(Record#db_player_game_data.str_data ),
    Out1 = case length(Out) of 1 -> [<<"`str_data` = ", StrData/binary>> | Out]; _ -> [<<",`str_data` = ", StrData/binary>> | Out] end,
    generate_update_sql (player_game_data, Record, Changes, Out1);
generate_update_sql(player_game_data, Record, [5|Changes], Out)->
    IntData = int_to_bin(Record#db_player_game_data.int_data ),
    Out1 = case length(Out) of 1 -> [<<"`int_data` = ", IntData/binary>> | Out]; _ -> [<<",`int_data` = ", IntData/binary>> | Out] end,
    generate_update_sql (player_game_data, Record, Changes, Out1);
generate_update_sql(player_game_data, Record, [4|Changes], Out)->
    DataId = int_to_bin(Record#db_player_game_data.data_id ),
    Out1 = case length(Out) of 1 -> [<<"`data_id` = ", DataId/binary>> | Out]; _ -> [<<",`data_id` = ", DataId/binary>> | Out] end,
    generate_update_sql (player_game_data, Record, Changes, Out1);
generate_update_sql(player_game_data, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_game_data.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_game_data, Record, Changes, Out1);
generate_update_sql (player_game_config, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_game_config.player_id),
    ConfigId = int_to_bin(Record#db_player_game_config.config_id),
    [<<" WHERE `config_id` = ", ConfigId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_game_config, Record, [7|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_game_config.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_game_config, Record, Changes, Out1);
generate_update_sql(player_game_config, Record, [6|Changes], Out)->
    StrData = list_to_bin(Record#db_player_game_config.str_data ),
    Out1 = case length(Out) of 1 -> [<<"`str_data` = ", StrData/binary>> | Out]; _ -> [<<",`str_data` = ", StrData/binary>> | Out] end,
    generate_update_sql (player_game_config, Record, Changes, Out1);
generate_update_sql(player_game_config, Record, [5|Changes], Out)->
    IntData = int_to_bin(Record#db_player_game_config.int_data ),
    Out1 = case length(Out) of 1 -> [<<"`int_data` = ", IntData/binary>> | Out]; _ -> [<<",`int_data` = ", IntData/binary>> | Out] end,
    generate_update_sql (player_game_config, Record, Changes, Out1);
generate_update_sql(player_game_config, Record, [4|Changes], Out)->
    ConfigId = int_to_bin(Record#db_player_game_config.config_id ),
    Out1 = case length(Out) of 1 -> [<<"`config_id` = ", ConfigId/binary>> | Out]; _ -> [<<",`config_id` = ", ConfigId/binary>> | Out] end,
    generate_update_sql (player_game_config, Record, Changes, Out1);
generate_update_sql(player_game_config, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_game_config.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_game_config, Record, Changes, Out1);
generate_update_sql (player_function, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_function.player_id),
    FunctionId = int_to_bin(Record#db_player_function.function_id),
    [<<" WHERE `function_id` = ", FunctionId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_function, Record, [7|Changes], Out)->
    Time = int_to_bin(Record#db_player_function.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (player_function, Record, Changes, Out1);
generate_update_sql(player_function, Record, [6|Changes], Out)->
    GetState = int_to_bin(Record#db_player_function.get_state ),
    Out1 = case length(Out) of 1 -> [<<"`get_state` = ", GetState/binary>> | Out]; _ -> [<<",`get_state` = ", GetState/binary>> | Out] end,
    generate_update_sql (player_function, Record, Changes, Out1);
generate_update_sql(player_function, Record, [5|Changes], Out)->
    State = int_to_bin(Record#db_player_function.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_function, Record, Changes, Out1);
generate_update_sql(player_function, Record, [4|Changes], Out)->
    FunctionId = int_to_bin(Record#db_player_function.function_id ),
    Out1 = case length(Out) of 1 -> [<<"`function_id` = ", FunctionId/binary>> | Out]; _ -> [<<",`function_id` = ", FunctionId/binary>> | Out] end,
    generate_update_sql (player_function, Record, Changes, Out1);
generate_update_sql(player_function, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_function.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_function, Record, Changes, Out1);
generate_update_sql (player_first_charge_day, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_first_charge_day.player_id),
    Type = int_to_bin(Record#db_player_first_charge_day.type),
    Day = int_to_bin(Record#db_player_first_charge_day.day),
    [<<" WHERE `day` = ", Day/binary,        " AND `type` = ", Type/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_first_charge_day, Record, [6|Changes], Out)->
    Time = int_to_bin(Record#db_player_first_charge_day.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (player_first_charge_day, Record, Changes, Out1);
generate_update_sql(player_first_charge_day, Record, [5|Changes], Out)->
    Day = int_to_bin(Record#db_player_first_charge_day.day ),
    Out1 = case length(Out) of 1 -> [<<"`day` = ", Day/binary>> | Out]; _ -> [<<",`day` = ", Day/binary>> | Out] end,
    generate_update_sql (player_first_charge_day, Record, Changes, Out1);
generate_update_sql(player_first_charge_day, Record, [4|Changes], Out)->
    Type = int_to_bin(Record#db_player_first_charge_day.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (player_first_charge_day, Record, Changes, Out1);
generate_update_sql(player_first_charge_day, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_first_charge_day.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_first_charge_day, Record, Changes, Out1);
generate_update_sql (player_first_charge, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_first_charge.player_id),
    Type = int_to_bin(Record#db_player_first_charge.type),
    [<<" WHERE `type` = ", Type/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_first_charge, Record, [7|Changes], Out)->
    Time = int_to_bin(Record#db_player_first_charge.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (player_first_charge, Record, Changes, Out1);
generate_update_sql(player_first_charge, Record, [6|Changes], Out)->
    LoginDay = int_to_bin(Record#db_player_first_charge.login_day ),
    Out1 = case length(Out) of 1 -> [<<"`login_day` = ", LoginDay/binary>> | Out]; _ -> [<<",`login_day` = ", LoginDay/binary>> | Out] end,
    generate_update_sql (player_first_charge, Record, Changes, Out1);
generate_update_sql(player_first_charge, Record, [5|Changes], Out)->
    RechargeId = int_to_bin(Record#db_player_first_charge.recharge_id ),
    Out1 = case length(Out) of 1 -> [<<"`recharge_id` = ", RechargeId/binary>> | Out]; _ -> [<<",`recharge_id` = ", RechargeId/binary>> | Out] end,
    generate_update_sql (player_first_charge, Record, Changes, Out1);
generate_update_sql(player_first_charge, Record, [4|Changes], Out)->
    Type = int_to_bin(Record#db_player_first_charge.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (player_first_charge, Record, Changes, Out1);
generate_update_sql(player_first_charge, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_first_charge.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_first_charge, Record, Changes, Out1);
generate_update_sql (player_finish_share_task, Record, [], Out) ->
     AccId = list_to_bin(Record#db_player_finish_share_task.acc_id),
    TaskType = int_to_bin(Record#db_player_finish_share_task.task_type),
    PlayerId = int_to_bin(Record#db_player_finish_share_task.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary,        " AND `task_type` = ", TaskType/binary,        " AND `acc_id` = ", AccId/binary, ";\n">> | Out];
generate_update_sql(player_finish_share_task, Record, [6|Changes], Out)->
    State = int_to_bin(Record#db_player_finish_share_task.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_finish_share_task, Record, Changes, Out1);
generate_update_sql(player_finish_share_task, Record, [5|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_finish_share_task.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_finish_share_task, Record, Changes, Out1);
generate_update_sql(player_finish_share_task, Record, [4|Changes], Out)->
    TaskType = int_to_bin(Record#db_player_finish_share_task.task_type ),
    Out1 = case length(Out) of 1 -> [<<"`task_type` = ", TaskType/binary>> | Out]; _ -> [<<",`task_type` = ", TaskType/binary>> | Out] end,
    generate_update_sql (player_finish_share_task, Record, Changes, Out1);
generate_update_sql(player_finish_share_task, Record, [3|Changes], Out)->
    AccId = list_to_bin(Record#db_player_finish_share_task.acc_id ),
    Out1 = case length(Out) of 1 -> [<<"`acc_id` = ", AccId/binary>> | Out]; _ -> [<<",`acc_id` = ", AccId/binary>> | Out] end,
    generate_update_sql (player_finish_share_task, Record, Changes, Out1);
generate_update_sql (player_fight_adjust, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_fight_adjust.player_id),
    PropId = int_to_bin(Record#db_player_fight_adjust.prop_id),
    FightType = int_to_bin(Record#db_player_fight_adjust.fight_type),
    [<<" WHERE `fight_type` = ", FightType/binary,        " AND `prop_id` = ", PropId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_fight_adjust, Record, [16|Changes], Out)->
    Id = int_to_bin(Record#db_player_fight_adjust.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_fight_adjust, Record, Changes, Out1);
generate_update_sql(player_fight_adjust, Record, [15|Changes], Out)->
    IsBottom = int_to_bin(Record#db_player_fight_adjust.is_bottom ),
    Out1 = case length(Out) of 1 -> [<<"`is_bottom` = ", IsBottom/binary>> | Out]; _ -> [<<",`is_bottom` = ", IsBottom/binary>> | Out] end,
    generate_update_sql (player_fight_adjust, Record, Changes, Out1);
generate_update_sql(player_fight_adjust, Record, [14|Changes], Out)->
    BottomTimesTime = int_to_bin(Record#db_player_fight_adjust.bottom_times_time ),
    Out1 = case length(Out) of 1 -> [<<"`bottom_times_time` = ", BottomTimesTime/binary>> | Out]; _ -> [<<",`bottom_times_time` = ", BottomTimesTime/binary>> | Out] end,
    generate_update_sql (player_fight_adjust, Record, Changes, Out1);
generate_update_sql(player_fight_adjust, Record, [13|Changes], Out)->
    BottomTimes = int_to_bin(Record#db_player_fight_adjust.bottom_times ),
    Out1 = case length(Out) of 1 -> [<<"`bottom_times` = ", BottomTimes/binary>> | Out]; _ -> [<<",`bottom_times` = ", BottomTimes/binary>> | Out] end,
    generate_update_sql (player_fight_adjust, Record, Changes, Out1);
generate_update_sql(player_fight_adjust, Record, [12|Changes], Out)->
    Pool2 = int_to_bin(Record#db_player_fight_adjust.pool_2 ),
    Out1 = case length(Out) of 1 -> [<<"`pool_2` = ", Pool2/binary>> | Out]; _ -> [<<",`pool_2` = ", Pool2/binary>> | Out] end,
    generate_update_sql (player_fight_adjust, Record, Changes, Out1);
generate_update_sql(player_fight_adjust, Record, [11|Changes], Out)->
    Pool1 = int_to_bin(Record#db_player_fight_adjust.pool_1 ),
    Out1 = case length(Out) of 1 -> [<<"`pool_1` = ", Pool1/binary>> | Out]; _ -> [<<",`pool_1` = ", Pool1/binary>> | Out] end,
    generate_update_sql (player_fight_adjust, Record, Changes, Out1);
generate_update_sql(player_fight_adjust, Record, [10|Changes], Out)->
    CostPool = int_to_bin(Record#db_player_fight_adjust.cost_pool ),
    Out1 = case length(Out) of 1 -> [<<"`cost_pool` = ", CostPool/binary>> | Out]; _ -> [<<",`cost_pool` = ", CostPool/binary>> | Out] end,
    generate_update_sql (player_fight_adjust, Record, Changes, Out1);
generate_update_sql(player_fight_adjust, Record, [9|Changes], Out)->
    CostRate = int_to_bin(Record#db_player_fight_adjust.cost_rate ),
    Out1 = case length(Out) of 1 -> [<<"`cost_rate` = ", CostRate/binary>> | Out]; _ -> [<<",`cost_rate` = ", CostRate/binary>> | Out] end,
    generate_update_sql (player_fight_adjust, Record, Changes, Out1);
generate_update_sql(player_fight_adjust, Record, [8|Changes], Out)->
    Rate = int_to_bin(Record#db_player_fight_adjust.rate ),
    Out1 = case length(Out) of 1 -> [<<"`rate` = ", Rate/binary>> | Out]; _ -> [<<",`rate` = ", Rate/binary>> | Out] end,
    generate_update_sql (player_fight_adjust, Record, Changes, Out1);
generate_update_sql(player_fight_adjust, Record, [7|Changes], Out)->
    PoolTimes = int_to_bin(Record#db_player_fight_adjust.pool_times ),
    Out1 = case length(Out) of 1 -> [<<"`pool_times` = ", PoolTimes/binary>> | Out]; _ -> [<<",`pool_times` = ", PoolTimes/binary>> | Out] end,
    generate_update_sql (player_fight_adjust, Record, Changes, Out1);
generate_update_sql(player_fight_adjust, Record, [6|Changes], Out)->
    Pool = int_to_bin(Record#db_player_fight_adjust.pool ),
    Out1 = case length(Out) of 1 -> [<<"`pool` = ", Pool/binary>> | Out]; _ -> [<<",`pool` = ", Pool/binary>> | Out] end,
    generate_update_sql (player_fight_adjust, Record, Changes, Out1);
generate_update_sql(player_fight_adjust, Record, [5|Changes], Out)->
    FightType = int_to_bin(Record#db_player_fight_adjust.fight_type ),
    Out1 = case length(Out) of 1 -> [<<"`fight_type` = ", FightType/binary>> | Out]; _ -> [<<",`fight_type` = ", FightType/binary>> | Out] end,
    generate_update_sql (player_fight_adjust, Record, Changes, Out1);
generate_update_sql(player_fight_adjust, Record, [4|Changes], Out)->
    PropId = int_to_bin(Record#db_player_fight_adjust.prop_id ),
    Out1 = case length(Out) of 1 -> [<<"`prop_id` = ", PropId/binary>> | Out]; _ -> [<<",`prop_id` = ", PropId/binary>> | Out] end,
    generate_update_sql (player_fight_adjust, Record, Changes, Out1);
generate_update_sql(player_fight_adjust, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_fight_adjust.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_fight_adjust, Record, Changes, Out1);
generate_update_sql (player_everyday_sign, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_everyday_sign.player_id),
    Today = int_to_bin(Record#db_player_everyday_sign.today),
    [<<" WHERE `today` = ", Today/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_everyday_sign, Record, [6|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_everyday_sign.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_everyday_sign, Record, Changes, Out1);
generate_update_sql(player_everyday_sign, Record, [5|Changes], Out)->
    State = int_to_bin(Record#db_player_everyday_sign.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_everyday_sign, Record, Changes, Out1);
generate_update_sql(player_everyday_sign, Record, [4|Changes], Out)->
    Today = int_to_bin(Record#db_player_everyday_sign.today ),
    Out1 = case length(Out) of 1 -> [<<"`today` = ", Today/binary>> | Out]; _ -> [<<",`today` = ", Today/binary>> | Out] end,
    generate_update_sql (player_everyday_sign, Record, Changes, Out1);
generate_update_sql(player_everyday_sign, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_everyday_sign.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_everyday_sign, Record, Changes, Out1);
generate_update_sql (player_everyday_charge, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_everyday_charge.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_everyday_charge, Record, [6|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_everyday_charge.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_everyday_charge, Record, Changes, Out1);
generate_update_sql(player_everyday_charge, Record, [5|Changes], Out)->
    State = int_to_bin(Record#db_player_everyday_charge.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_everyday_charge, Record, Changes, Out1);
generate_update_sql(player_everyday_charge, Record, [4|Changes], Out)->
    Id = int_to_bin(Record#db_player_everyday_charge.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_everyday_charge, Record, Changes, Out1);
generate_update_sql(player_everyday_charge, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_everyday_charge.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_everyday_charge, Record, Changes, Out1);
generate_update_sql (player_data, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_data.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_data, Record, [37|Changes], Out)->
    GameEventId = int_to_bin(Record#db_player_data.game_event_id ),
    Out1 = case length(Out) of 1 -> [<<"`game_event_id` = ", GameEventId/binary>> | Out]; _ -> [<<",`game_event_id` = ", GameEventId/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [36|Changes], Out)->
    MountStatus = int_to_bin(Record#db_player_data.mount_status ),
    Out1 = case length(Out) of 1 -> [<<"`mount_status` = ", MountStatus/binary>> | Out]; _ -> [<<",`mount_status` = ", MountStatus/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [35|Changes], Out)->
    FightMode = int_to_bin(Record#db_player_data.fight_mode ),
    Out1 = case length(Out) of 1 -> [<<"`fight_mode` = ", FightMode/binary>> | Out]; _ -> [<<",`fight_mode` = ", FightMode/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [34|Changes], Out)->
    Y = int_to_bin(Record#db_player_data.y ),
    Out1 = case length(Out) of 1 -> [<<"`y` = ", Y/binary>> | Out]; _ -> [<<",`y` = ", Y/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [33|Changes], Out)->
    X = int_to_bin(Record#db_player_data.x ),
    Out1 = case length(Out) of 1 -> [<<"`x` = ", X/binary>> | Out]; _ -> [<<",`x` = ", X/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [32|Changes], Out)->
    LastWorldSceneId = int_to_bin(Record#db_player_data.last_world_scene_id ),
    Out1 = case length(Out) of 1 -> [<<"`last_world_scene_id` = ", LastWorldSceneId/binary>> | Out]; _ -> [<<",`last_world_scene_id` = ", LastWorldSceneId/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [31|Changes], Out)->
    Pk = int_to_bin(Record#db_player_data.pk ),
    Out1 = case length(Out) of 1 -> [<<"`pk` = ", Pk/binary>> | Out]; _ -> [<<",`pk` = ", Pk/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [30|Changes], Out)->
    HpReflex = int_to_bin(Record#db_player_data.hp_reflex ),
    Out1 = case length(Out) of 1 -> [<<"`hp_reflex` = ", HpReflex/binary>> | Out]; _ -> [<<",`hp_reflex` = ", HpReflex/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [29|Changes], Out)->
    CritHurtReduce = int_to_bin(Record#db_player_data.crit_hurt_reduce ),
    Out1 = case length(Out) of 1 -> [<<"`crit_hurt_reduce` = ", CritHurtReduce/binary>> | Out]; _ -> [<<",`crit_hurt_reduce` = ", CritHurtReduce/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [28|Changes], Out)->
    CritHurtAdd = int_to_bin(Record#db_player_data.crit_hurt_add ),
    Out1 = case length(Out) of 1 -> [<<"`crit_hurt_add` = ", CritHurtAdd/binary>> | Out]; _ -> [<<",`crit_hurt_add` = ", CritHurtAdd/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [27|Changes], Out)->
    HurtReduce = int_to_bin(Record#db_player_data.hurt_reduce ),
    Out1 = case length(Out) of 1 -> [<<"`hurt_reduce` = ", HurtReduce/binary>> | Out]; _ -> [<<",`hurt_reduce` = ", HurtReduce/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [26|Changes], Out)->
    HurtAdd = int_to_bin(Record#db_player_data.hurt_add ),
    Out1 = case length(Out) of 1 -> [<<"`hurt_add` = ", HurtAdd/binary>> | Out]; _ -> [<<",`hurt_add` = ", HurtAdd/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [25|Changes], Out)->
    CritTime = int_to_bin(Record#db_player_data.crit_time ),
    Out1 = case length(Out) of 1 -> [<<"`crit_time` = ", CritTime/binary>> | Out]; _ -> [<<",`crit_time` = ", CritTime/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [24|Changes], Out)->
    Speed = int_to_bin(Record#db_player_data.speed ),
    Out1 = case length(Out) of 1 -> [<<"`speed` = ", Speed/binary>> | Out]; _ -> [<<",`speed` = ", Speed/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [23|Changes], Out)->
    Power = int_to_bin(Record#db_player_data.power ),
    Out1 = case length(Out) of 1 -> [<<"`power` = ", Power/binary>> | Out]; _ -> [<<",`power` = ", Power/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [22|Changes], Out)->
    RateBlock = int_to_bin(Record#db_player_data.rate_block ),
    Out1 = case length(Out) of 1 -> [<<"`rate_block` = ", RateBlock/binary>> | Out]; _ -> [<<",`rate_block` = ", RateBlock/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [21|Changes], Out)->
    RateResistBlock = int_to_bin(Record#db_player_data.rate_resist_block ),
    Out1 = case length(Out) of 1 -> [<<"`rate_resist_block` = ", RateResistBlock/binary>> | Out]; _ -> [<<",`rate_resist_block` = ", RateResistBlock/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [20|Changes], Out)->
    Critical = int_to_bin(Record#db_player_data.critical ),
    Out1 = case length(Out) of 1 -> [<<"`critical` = ", Critical/binary>> | Out]; _ -> [<<",`critical` = ", Critical/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [19|Changes], Out)->
    Tenacity = int_to_bin(Record#db_player_data.tenacity ),
    Out1 = case length(Out) of 1 -> [<<"`tenacity` = ", Tenacity/binary>> | Out]; _ -> [<<",`tenacity` = ", Tenacity/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [18|Changes], Out)->
    Dodge = int_to_bin(Record#db_player_data.dodge ),
    Out1 = case length(Out) of 1 -> [<<"`dodge` = ", Dodge/binary>> | Out]; _ -> [<<",`dodge` = ", Dodge/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [17|Changes], Out)->
    Hit = int_to_bin(Record#db_player_data.hit ),
    Out1 = case length(Out) of 1 -> [<<"`hit` = ", Hit/binary>> | Out]; _ -> [<<",`hit` = ", Hit/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [16|Changes], Out)->
    Defense = int_to_bin(Record#db_player_data.defense ),
    Out1 = case length(Out) of 1 -> [<<"`defense` = ", Defense/binary>> | Out]; _ -> [<<",`defense` = ", Defense/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [15|Changes], Out)->
    Attack = int_to_bin(Record#db_player_data.attack ),
    Out1 = case length(Out) of 1 -> [<<"`attack` = ", Attack/binary>> | Out]; _ -> [<<",`attack` = ", Attack/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [14|Changes], Out)->
    Hp = int_to_bin(Record#db_player_data.hp ),
    Out1 = case length(Out) of 1 -> [<<"`hp` = ", Hp/binary>> | Out]; _ -> [<<",`hp` = ", Hp/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [13|Changes], Out)->
    MaxHp = int_to_bin(Record#db_player_data.max_hp ),
    Out1 = case length(Out) of 1 -> [<<"`max_hp` = ", MaxHp/binary>> | Out]; _ -> [<<",`max_hp` = ", MaxHp/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [12|Changes], Out)->
    Anger = int_to_bin(Record#db_player_data.anger ),
    Out1 = case length(Out) of 1 -> [<<"`anger` = ", Anger/binary>> | Out]; _ -> [<<",`anger` = ", Anger/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [11|Changes], Out)->
    ChatQiPaoId = int_to_bin(Record#db_player_data.chat_qi_pao_id ),
    Out1 = case length(Out) of 1 -> [<<"`chat_qi_pao_id` = ", ChatQiPaoId/binary>> | Out]; _ -> [<<",`chat_qi_pao_id` = ", ChatQiPaoId/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [10|Changes], Out)->
    HeadFrameId = int_to_bin(Record#db_player_data.head_frame_id ),
    Out1 = case length(Out) of 1 -> [<<"`head_frame_id` = ", HeadFrameId/binary>> | Out]; _ -> [<<",`head_frame_id` = ", HeadFrameId/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [9|Changes], Out)->
    HeadId = int_to_bin(Record#db_player_data.head_id ),
    Out1 = case length(Out) of 1 -> [<<"`head_id` = ", HeadId/binary>> | Out]; _ -> [<<",`head_id` = ", HeadId/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [8|Changes], Out)->
    HonorId = int_to_bin(Record#db_player_data.honor_id ),
    Out1 = case length(Out) of 1 -> [<<"`honor_id` = ", HonorId/binary>> | Out]; _ -> [<<",`honor_id` = ", HonorId/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [7|Changes], Out)->
    TitleId = int_to_bin(Record#db_player_data.title_id ),
    Out1 = case length(Out) of 1 -> [<<"`title_id` = ", TitleId/binary>> | Out]; _ -> [<<",`title_id` = ", TitleId/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [6|Changes], Out)->
    VipLevel = int_to_bin(Record#db_player_data.vip_level ),
    Out1 = case length(Out) of 1 -> [<<"`vip_level` = ", VipLevel/binary>> | Out]; _ -> [<<",`vip_level` = ", VipLevel/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [5|Changes], Out)->
    Level = int_to_bin(Record#db_player_data.level ),
    Out1 = case length(Out) of 1 -> [<<"`level` = ", Level/binary>> | Out]; _ -> [<<",`level` = ", Level/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [4|Changes], Out)->
    Exp = int_to_bin(Record#db_player_data.exp ),
    Out1 = case length(Out) of 1 -> [<<"`exp` = ", Exp/binary>> | Out]; _ -> [<<",`exp` = ", Exp/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql(player_data, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_data.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_data, Record, Changes, Out1);
generate_update_sql (player_daily_task, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_daily_task.player_id),
    Id = int_to_bin(Record#db_player_daily_task.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_daily_task, Record, [7|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_daily_task.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_daily_task, Record, Changes, Out1);
generate_update_sql(player_daily_task, Record, [6|Changes], Out)->
    State = int_to_bin(Record#db_player_daily_task.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_daily_task, Record, Changes, Out1);
generate_update_sql(player_daily_task, Record, [5|Changes], Out)->
    Value = int_to_bin(Record#db_player_daily_task.value ),
    Out1 = case length(Out) of 1 -> [<<"`value` = ", Value/binary>> | Out]; _ -> [<<",`value` = ", Value/binary>> | Out] end,
    generate_update_sql (player_daily_task, Record, Changes, Out1);
generate_update_sql(player_daily_task, Record, [4|Changes], Out)->
    Id = int_to_bin(Record#db_player_daily_task.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_daily_task, Record, Changes, Out1);
generate_update_sql(player_daily_task, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_daily_task.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_daily_task, Record, Changes, Out1);
generate_update_sql (player_daily_points, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_daily_points.player_id),
    Bid = int_to_bin(Record#db_player_daily_points.bid),
    [<<" WHERE `bid` = ", Bid/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_daily_points, Record, [5|Changes], Out)->
    CreateTime = int_to_bin(Record#db_player_daily_points.create_time ),
    Out1 = case length(Out) of 1 -> [<<"`create_time` = ", CreateTime/binary>> | Out]; _ -> [<<",`create_time` = ", CreateTime/binary>> | Out] end,
    generate_update_sql (player_daily_points, Record, Changes, Out1);
generate_update_sql(player_daily_points, Record, [4|Changes], Out)->
    Bid = int_to_bin(Record#db_player_daily_points.bid ),
    Out1 = case length(Out) of 1 -> [<<"`bid` = ", Bid/binary>> | Out]; _ -> [<<",`bid` = ", Bid/binary>> | Out] end,
    generate_update_sql (player_daily_points, Record, Changes, Out1);
generate_update_sql(player_daily_points, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_daily_points.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_daily_points, Record, Changes, Out1);
generate_update_sql (player_conditions_data, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_conditions_data.player_id),
    ConditionsId = int_to_bin(Record#db_player_conditions_data.conditions_id),
    Type = int_to_bin(Record#db_player_conditions_data.type),
    Type2 = int_to_bin(Record#db_player_conditions_data.type2),
    [<<" WHERE `type2` = ", Type2/binary,        " AND `type` = ", Type/binary,        " AND `conditions_id` = ", ConditionsId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_conditions_data, Record, [9|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_conditions_data.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_conditions_data, Record, Changes, Out1);
generate_update_sql(player_conditions_data, Record, [8|Changes], Out)->
    Count = int_to_bin(Record#db_player_conditions_data.count ),
    Out1 = case length(Out) of 1 -> [<<"`count` = ", Count/binary>> | Out]; _ -> [<<",`count` = ", Count/binary>> | Out] end,
    generate_update_sql (player_conditions_data, Record, Changes, Out1);
generate_update_sql(player_conditions_data, Record, [7|Changes], Out)->
    ConditionsType = int_to_bin(Record#db_player_conditions_data.conditions_type ),
    Out1 = case length(Out) of 1 -> [<<"`conditions_type` = ", ConditionsType/binary>> | Out]; _ -> [<<",`conditions_type` = ", ConditionsType/binary>> | Out] end,
    generate_update_sql (player_conditions_data, Record, Changes, Out1);
generate_update_sql(player_conditions_data, Record, [6|Changes], Out)->
    Type2 = int_to_bin(Record#db_player_conditions_data.type2 ),
    Out1 = case length(Out) of 1 -> [<<"`type2` = ", Type2/binary>> | Out]; _ -> [<<",`type2` = ", Type2/binary>> | Out] end,
    generate_update_sql (player_conditions_data, Record, Changes, Out1);
generate_update_sql(player_conditions_data, Record, [5|Changes], Out)->
    Type = int_to_bin(Record#db_player_conditions_data.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (player_conditions_data, Record, Changes, Out1);
generate_update_sql(player_conditions_data, Record, [4|Changes], Out)->
    ConditionsId = int_to_bin(Record#db_player_conditions_data.conditions_id ),
    Out1 = case length(Out) of 1 -> [<<"`conditions_id` = ", ConditionsId/binary>> | Out]; _ -> [<<",`conditions_id` = ", ConditionsId/binary>> | Out] end,
    generate_update_sql (player_conditions_data, Record, Changes, Out1);
generate_update_sql(player_conditions_data, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_conditions_data.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_conditions_data, Record, Changes, Out1);
generate_update_sql (player_condition_activity, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_condition_activity.player_id),
    ActivityId = int_to_bin(Record#db_player_condition_activity.activity_id),
    [<<" WHERE `activity_id` = ", ActivityId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_condition_activity, Record, [6|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_condition_activity.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_condition_activity, Record, Changes, Out1);
generate_update_sql(player_condition_activity, Record, [5|Changes], Out)->
    ActivityTime = int_to_bin(Record#db_player_condition_activity.activity_time ),
    Out1 = case length(Out) of 1 -> [<<"`activity_time` = ", ActivityTime/binary>> | Out]; _ -> [<<",`activity_time` = ", ActivityTime/binary>> | Out] end,
    generate_update_sql (player_condition_activity, Record, Changes, Out1);
generate_update_sql(player_condition_activity, Record, [4|Changes], Out)->
    ActivityId = int_to_bin(Record#db_player_condition_activity.activity_id ),
    Out1 = case length(Out) of 1 -> [<<"`activity_id` = ", ActivityId/binary>> | Out]; _ -> [<<",`activity_id` = ", ActivityId/binary>> | Out] end,
    generate_update_sql (player_condition_activity, Record, Changes, Out1);
generate_update_sql(player_condition_activity, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_condition_activity.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_condition_activity, Record, Changes, Out1);
generate_update_sql (player_client_data, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_client_data.player_id),
    Id = list_to_bin(Record#db_player_client_data.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_client_data, Record, [6|Changes], Out)->
    Time = int_to_bin(Record#db_player_client_data.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (player_client_data, Record, Changes, Out1);
generate_update_sql(player_client_data, Record, [5|Changes], Out)->
    Value = list_to_bin(Record#db_player_client_data.value ),
    Out1 = case length(Out) of 1 -> [<<"`value` = ", Value/binary>> | Out]; _ -> [<<",`value` = ", Value/binary>> | Out] end,
    generate_update_sql (player_client_data, Record, Changes, Out1);
generate_update_sql(player_client_data, Record, [4|Changes], Out)->
    Id = list_to_bin(Record#db_player_client_data.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_client_data, Record, Changes, Out1);
generate_update_sql(player_client_data, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_client_data.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_client_data, Record, Changes, Out1);
generate_update_sql (player_chat_data, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_chat_data.player_id),
    Id = int_to_bin(Record#db_player_chat_data.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_chat_data, Record, [13|Changes], Out)->
    SendTime = int_to_bin(Record#db_player_chat_data.send_time ),
    Out1 = case length(Out) of 1 -> [<<"`send_time` = ", SendTime/binary>> | Out]; _ -> [<<",`send_time` = ", SendTime/binary>> | Out] end,
    generate_update_sql (player_chat_data, Record, Changes, Out1);
generate_update_sql(player_chat_data, Record, [12|Changes], Out)->
    HeadFrameId = int_to_bin(Record#db_player_chat_data.head_frame_id ),
    Out1 = case length(Out) of 1 -> [<<"`head_frame_id` = ", HeadFrameId/binary>> | Out]; _ -> [<<",`head_frame_id` = ", HeadFrameId/binary>> | Out] end,
    generate_update_sql (player_chat_data, Record, Changes, Out1);
generate_update_sql(player_chat_data, Record, [11|Changes], Out)->
    Sex = int_to_bin(Record#db_player_chat_data.sex ),
    Out1 = case length(Out) of 1 -> [<<"`sex` = ", Sex/binary>> | Out]; _ -> [<<",`sex` = ", Sex/binary>> | Out] end,
    generate_update_sql (player_chat_data, Record, Changes, Out1);
generate_update_sql(player_chat_data, Record, [10|Changes], Out)->
    Nickname = list_to_bin(Record#db_player_chat_data.nickname ),
    Out1 = case length(Out) of 1 -> [<<"`nickname` = ", Nickname/binary>> | Out]; _ -> [<<",`nickname` = ", Nickname/binary>> | Out] end,
    generate_update_sql (player_chat_data, Record, Changes, Out1);
generate_update_sql(player_chat_data, Record, [9|Changes], Out)->
    HeadId = int_to_bin(Record#db_player_chat_data.head_id ),
    Out1 = case length(Out) of 1 -> [<<"`head_id` = ", HeadId/binary>> | Out]; _ -> [<<",`head_id` = ", HeadId/binary>> | Out] end,
    generate_update_sql (player_chat_data, Record, Changes, Out1);
generate_update_sql(player_chat_data, Record, [8|Changes], Out)->
    VipLevel = int_to_bin(Record#db_player_chat_data.vip_level ),
    Out1 = case length(Out) of 1 -> [<<"`vip_level` = ", VipLevel/binary>> | Out]; _ -> [<<",`vip_level` = ", VipLevel/binary>> | Out] end,
    generate_update_sql (player_chat_data, Record, Changes, Out1);
generate_update_sql(player_chat_data, Record, [7|Changes], Out)->
    Level = int_to_bin(Record#db_player_chat_data.level ),
    Out1 = case length(Out) of 1 -> [<<"`level` = ", Level/binary>> | Out]; _ -> [<<",`level` = ", Level/binary>> | Out] end,
    generate_update_sql (player_chat_data, Record, Changes, Out1);
generate_update_sql(player_chat_data, Record, [6|Changes], Out)->
    ChatMsg = list_to_bin(Record#db_player_chat_data.chat_msg ),
    Out1 = case length(Out) of 1 -> [<<"`chat_msg` = ", ChatMsg/binary>> | Out]; _ -> [<<",`chat_msg` = ", ChatMsg/binary>> | Out] end,
    generate_update_sql (player_chat_data, Record, Changes, Out1);
generate_update_sql(player_chat_data, Record, [5|Changes], Out)->
    SendPlayerId = int_to_bin(Record#db_player_chat_data.send_player_id ),
    Out1 = case length(Out) of 1 -> [<<"`send_player_id` = ", SendPlayerId/binary>> | Out]; _ -> [<<",`send_player_id` = ", SendPlayerId/binary>> | Out] end,
    generate_update_sql (player_chat_data, Record, Changes, Out1);
generate_update_sql(player_chat_data, Record, [4|Changes], Out)->
    Id = int_to_bin(Record#db_player_chat_data.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_chat_data, Record, Changes, Out1);
generate_update_sql(player_chat_data, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_chat_data.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_chat_data, Record, Changes, Out1);
generate_update_sql (player_charge_shop, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_charge_shop.player_id),
    Id = int_to_bin(Record#db_player_charge_shop.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_charge_shop, Record, [6|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_charge_shop.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_charge_shop, Record, Changes, Out1);
generate_update_sql(player_charge_shop, Record, [5|Changes], Out)->
    Count = int_to_bin(Record#db_player_charge_shop.count ),
    Out1 = case length(Out) of 1 -> [<<"`count` = ", Count/binary>> | Out]; _ -> [<<",`count` = ", Count/binary>> | Out] end,
    generate_update_sql (player_charge_shop, Record, Changes, Out1);
generate_update_sql(player_charge_shop, Record, [4|Changes], Out)->
    Id = int_to_bin(Record#db_player_charge_shop.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_charge_shop, Record, Changes, Out1);
generate_update_sql(player_charge_shop, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_charge_shop.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_charge_shop, Record, Changes, Out1);
generate_update_sql (player_charge_record, Record, [], Out) ->
     OrderId = list_to_bin(Record#db_player_charge_record.order_id),
    [<<" WHERE `order_id` = ", OrderId/binary, ";\n">> | Out];
generate_update_sql(player_charge_record, Record, [16|Changes], Out)->
    CreateTime = int_to_bin(Record#db_player_charge_record.create_time ),
    Out1 = case length(Out) of 1 -> [<<"`create_time` = ", CreateTime/binary>> | Out]; _ -> [<<",`create_time` = ", CreateTime/binary>> | Out] end,
    generate_update_sql (player_charge_record, Record, Changes, Out1);
generate_update_sql(player_charge_record, Record, [15|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_charge_record.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_charge_record, Record, Changes, Out1);
generate_update_sql(player_charge_record, Record, [14|Changes], Out)->
    Source = int_to_bin(Record#db_player_charge_record.source ),
    Out1 = case length(Out) of 1 -> [<<"`source` = ", Source/binary>> | Out]; _ -> [<<",`source` = ", Source/binary>> | Out] end,
    generate_update_sql (player_charge_record, Record, Changes, Out1);
generate_update_sql(player_charge_record, Record, [13|Changes], Out)->
    Rate = float_to_bin(Record#db_player_charge_record.rate ),
    Out1 = case length(Out) of 1 -> [<<"`rate` = ", Rate/binary>> | Out]; _ -> [<<",`rate` = ", Rate/binary>> | Out] end,
    generate_update_sql (player_charge_record, Record, Changes, Out1);
generate_update_sql(player_charge_record, Record, [12|Changes], Out)->
    ChargeState = int_to_bin(Record#db_player_charge_record.charge_state ),
    Out1 = case length(Out) of 1 -> [<<"`charge_state` = ", ChargeState/binary>> | Out]; _ -> [<<",`charge_state` = ", ChargeState/binary>> | Out] end,
    generate_update_sql (player_charge_record, Record, Changes, Out1);
generate_update_sql(player_charge_record, Record, [11|Changes], Out)->
    Money = float_to_bin(Record#db_player_charge_record.money ),
    Out1 = case length(Out) of 1 -> [<<"`money` = ", Money/binary>> | Out]; _ -> [<<",`money` = ", Money/binary>> | Out] end,
    generate_update_sql (player_charge_record, Record, Changes, Out1);
generate_update_sql(player_charge_record, Record, [10|Changes], Out)->
    Value = int_to_bin(Record#db_player_charge_record.value ),
    Out1 = case length(Out) of 1 -> [<<"`value` = ", Value/binary>> | Out]; _ -> [<<",`value` = ", Value/binary>> | Out] end,
    generate_update_sql (player_charge_record, Record, Changes, Out1);
generate_update_sql(player_charge_record, Record, [9|Changes], Out)->
    Ip = list_to_bin(Record#db_player_charge_record.ip ),
    Out1 = case length(Out) of 1 -> [<<"`ip` = ", Ip/binary>> | Out]; _ -> [<<",`ip` = ", Ip/binary>> | Out] end,
    generate_update_sql (player_charge_record, Record, Changes, Out1);
generate_update_sql(player_charge_record, Record, [8|Changes], Out)->
    ChargeItemId = int_to_bin(Record#db_player_charge_record.charge_item_id ),
    Out1 = case length(Out) of 1 -> [<<"`charge_item_id` = ", ChargeItemId/binary>> | Out]; _ -> [<<",`charge_item_id` = ", ChargeItemId/binary>> | Out] end,
    generate_update_sql (player_charge_record, Record, Changes, Out1);
generate_update_sql(player_charge_record, Record, [7|Changes], Out)->
    GameChargeId = int_to_bin(Record#db_player_charge_record.game_charge_id ),
    Out1 = case length(Out) of 1 -> [<<"`game_charge_id` = ", GameChargeId/binary>> | Out]; _ -> [<<",`game_charge_id` = ", GameChargeId/binary>> | Out] end,
    generate_update_sql (player_charge_record, Record, Changes, Out1);
generate_update_sql(player_charge_record, Record, [6|Changes], Out)->
    Type = int_to_bin(Record#db_player_charge_record.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (player_charge_record, Record, Changes, Out1);
generate_update_sql(player_charge_record, Record, [5|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_charge_record.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_charge_record, Record, Changes, Out1);
generate_update_sql(player_charge_record, Record, [4|Changes], Out)->
    PlatformOrderId = list_to_bin(Record#db_player_charge_record.platform_order_id ),
    Out1 = case length(Out) of 1 -> [<<"`platform_order_id` = ", PlatformOrderId/binary>> | Out]; _ -> [<<",`platform_order_id` = ", PlatformOrderId/binary>> | Out] end,
    generate_update_sql (player_charge_record, Record, Changes, Out1);
generate_update_sql(player_charge_record, Record, [3|Changes], Out)->
    OrderId = list_to_bin(Record#db_player_charge_record.order_id ),
    Out1 = case length(Out) of 1 -> [<<"`order_id` = ", OrderId/binary>> | Out]; _ -> [<<",`order_id` = ", OrderId/binary>> | Out] end,
    generate_update_sql (player_charge_record, Record, Changes, Out1);
generate_update_sql (player_charge_info_record, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_charge_info_record.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_charge_info_record, Record, [19|Changes], Out)->
    RefusedMoney = float_to_bin(Record#db_player_charge_info_record.refused_money ),
    Out1 = case length(Out) of 1 -> [<<"`refused_money` = ", RefusedMoney/binary>> | Out]; _ -> [<<",`refused_money` = ", RefusedMoney/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [18|Changes], Out)->
    IsShare = int_to_bin(Record#db_player_charge_info_record.is_share ),
    Out1 = case length(Out) of 1 -> [<<"`is_share` = ", IsShare/binary>> | Out]; _ -> [<<",`is_share` = ", IsShare/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [17|Changes], Out)->
    Channel = list_to_bin(Record#db_player_charge_info_record.channel ),
    Out1 = case length(Out) of 1 -> [<<"`channel` = ", Channel/binary>> | Out]; _ -> [<<",`channel` = ", Channel/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [16|Changes], Out)->
    RecordTime = int_to_bin(Record#db_player_charge_info_record.record_time ),
    Out1 = case length(Out) of 1 -> [<<"`record_time` = ", RecordTime/binary>> | Out]; _ -> [<<",`record_time` = ", RecordTime/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [15|Changes], Out)->
    FirstTime = int_to_bin(Record#db_player_charge_info_record.first_time ),
    Out1 = case length(Out) of 1 -> [<<"`first_time` = ", FirstTime/binary>> | Out]; _ -> [<<",`first_time` = ", FirstTime/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [14|Changes], Out)->
    LastTime = int_to_bin(Record#db_player_charge_info_record.last_time ),
    Out1 = case length(Out) of 1 -> [<<"`last_time` = ", LastTime/binary>> | Out]; _ -> [<<",`last_time` = ", LastTime/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [13|Changes], Out)->
    MinMoney = float_to_bin(Record#db_player_charge_info_record.min_money ),
    Out1 = case length(Out) of 1 -> [<<"`min_money` = ", MinMoney/binary>> | Out]; _ -> [<<",`min_money` = ", MinMoney/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [12|Changes], Out)->
    MaxMoney = float_to_bin(Record#db_player_charge_info_record.max_money ),
    Out1 = case length(Out) of 1 -> [<<"`max_money` = ", MaxMoney/binary>> | Out]; _ -> [<<",`max_money` = ", MaxMoney/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [11|Changes], Out)->
    GmChargeNovipCount = int_to_bin(Record#db_player_charge_info_record.gm_charge_novip_count ),
    Out1 = case length(Out) of 1 -> [<<"`gm_charge_novip_count` = ", GmChargeNovipCount/binary>> | Out]; _ -> [<<",`gm_charge_novip_count` = ", GmChargeNovipCount/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [10|Changes], Out)->
    GmChargeCount = int_to_bin(Record#db_player_charge_info_record.gm_charge_count ),
    Out1 = case length(Out) of 1 -> [<<"`gm_charge_count` = ", GmChargeCount/binary>> | Out]; _ -> [<<",`gm_charge_count` = ", GmChargeCount/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [9|Changes], Out)->
    GmIngotCount = int_to_bin(Record#db_player_charge_info_record.gm_ingot_count ),
    Out1 = case length(Out) of 1 -> [<<"`gm_ingot_count` = ", GmIngotCount/binary>> | Out]; _ -> [<<",`gm_ingot_count` = ", GmIngotCount/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [8|Changes], Out)->
    ChargeTestCount = int_to_bin(Record#db_player_charge_info_record.charge_test_count ),
    Out1 = case length(Out) of 1 -> [<<"`charge_test_count` = ", ChargeTestCount/binary>> | Out]; _ -> [<<",`charge_test_count` = ", ChargeTestCount/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [7|Changes], Out)->
    ChargeCount = int_to_bin(Record#db_player_charge_info_record.charge_count ),
    Out1 = case length(Out) of 1 -> [<<"`charge_count` = ", ChargeCount/binary>> | Out]; _ -> [<<",`charge_count` = ", ChargeCount/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [6|Changes], Out)->
    TotalMoney = float_to_bin(Record#db_player_charge_info_record.total_money ),
    Out1 = case length(Out) of 1 -> [<<"`total_money` = ", TotalMoney/binary>> | Out]; _ -> [<<",`total_money` = ", TotalMoney/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [5|Changes], Out)->
    ServerId = list_to_bin(Record#db_player_charge_info_record.server_id ),
    Out1 = case length(Out) of 1 -> [<<"`server_id` = ", ServerId/binary>> | Out]; _ -> [<<",`server_id` = ", ServerId/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [4|Changes], Out)->
    PartId = list_to_bin(Record#db_player_charge_info_record.part_id ),
    Out1 = case length(Out) of 1 -> [<<"`part_id` = ", PartId/binary>> | Out]; _ -> [<<",`part_id` = ", PartId/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql(player_charge_info_record, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_charge_info_record.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_charge_info_record, Record, Changes, Out1);
generate_update_sql (player_charge_activity, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_charge_activity.player_id),
    Type = int_to_bin(Record#db_player_charge_activity.type),
    Id = int_to_bin(Record#db_player_charge_activity.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `type` = ", Type/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_charge_activity, Record, [9|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_charge_activity.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_charge_activity, Record, Changes, Out1);
generate_update_sql(player_charge_activity, Record, [8|Changes], Out)->
    State = int_to_bin(Record#db_player_charge_activity.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_charge_activity, Record, Changes, Out1);
generate_update_sql(player_charge_activity, Record, [7|Changes], Out)->
    Value = int_to_bin(Record#db_player_charge_activity.value ),
    Out1 = case length(Out) of 1 -> [<<"`value` = ", Value/binary>> | Out]; _ -> [<<",`value` = ", Value/binary>> | Out] end,
    generate_update_sql (player_charge_activity, Record, Changes, Out1);
generate_update_sql(player_charge_activity, Record, [6|Changes], Out)->
    StartTime = int_to_bin(Record#db_player_charge_activity.start_time ),
    Out1 = case length(Out) of 1 -> [<<"`start_time` = ", StartTime/binary>> | Out]; _ -> [<<",`start_time` = ", StartTime/binary>> | Out] end,
    generate_update_sql (player_charge_activity, Record, Changes, Out1);
generate_update_sql(player_charge_activity, Record, [5|Changes], Out)->
    Id = int_to_bin(Record#db_player_charge_activity.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_charge_activity, Record, Changes, Out1);
generate_update_sql(player_charge_activity, Record, [4|Changes], Out)->
    Type = int_to_bin(Record#db_player_charge_activity.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (player_charge_activity, Record, Changes, Out1);
generate_update_sql(player_charge_activity, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_charge_activity.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_charge_activity, Record, Changes, Out1);
generate_update_sql (player_card_title, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_card_title.player_id),
    CardTitleId = int_to_bin(Record#db_player_card_title.card_title_id),
    [<<" WHERE `card_title_id` = ", CardTitleId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_card_title, Record, [4|Changes], Out)->
    CardTitleId = int_to_bin(Record#db_player_card_title.card_title_id ),
    Out1 = case length(Out) of 1 -> [<<"`card_title_id` = ", CardTitleId/binary>> | Out]; _ -> [<<",`card_title_id` = ", CardTitleId/binary>> | Out] end,
    generate_update_sql (player_card_title, Record, Changes, Out1);
generate_update_sql(player_card_title, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_card_title.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_card_title, Record, Changes, Out1);
generate_update_sql (player_card_summon, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_card_summon.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_card_summon, Record, [5|Changes], Out)->
    TenTimesCnt = int_to_bin(Record#db_player_card_summon.ten_times_cnt ),
    Out1 = case length(Out) of 1 -> [<<"`ten_times_cnt` = ", TenTimesCnt/binary>> | Out]; _ -> [<<",`ten_times_cnt` = ", TenTimesCnt/binary>> | Out] end,
    generate_update_sql (player_card_summon, Record, Changes, Out1);
generate_update_sql(player_card_summon, Record, [4|Changes], Out)->
    OnceCnt = int_to_bin(Record#db_player_card_summon.once_cnt ),
    Out1 = case length(Out) of 1 -> [<<"`once_cnt` = ", OnceCnt/binary>> | Out]; _ -> [<<",`once_cnt` = ", OnceCnt/binary>> | Out] end,
    generate_update_sql (player_card_summon, Record, Changes, Out1);
generate_update_sql(player_card_summon, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_card_summon.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_card_summon, Record, Changes, Out1);
generate_update_sql (player_card_book, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_card_book.player_id),
    CardBookId = int_to_bin(Record#db_player_card_book.card_book_id),
    [<<" WHERE `card_book_id` = ", CardBookId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_card_book, Record, [4|Changes], Out)->
    CardBookId = int_to_bin(Record#db_player_card_book.card_book_id ),
    Out1 = case length(Out) of 1 -> [<<"`card_book_id` = ", CardBookId/binary>> | Out]; _ -> [<<",`card_book_id` = ", CardBookId/binary>> | Out] end,
    generate_update_sql (player_card_book, Record, Changes, Out1);
generate_update_sql(player_card_book, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_card_book.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_card_book, Record, Changes, Out1);
generate_update_sql (player_card, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_card.player_id),
    CardId = int_to_bin(Record#db_player_card.card_id),
    [<<" WHERE `card_id` = ", CardId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_card, Record, [6|Changes], Out)->
    Num = int_to_bin(Record#db_player_card.num ),
    Out1 = case length(Out) of 1 -> [<<"`num` = ", Num/binary>> | Out]; _ -> [<<",`num` = ", Num/binary>> | Out] end,
    generate_update_sql (player_card, Record, Changes, Out1);
generate_update_sql(player_card, Record, [5|Changes], Out)->
    State = int_to_bin(Record#db_player_card.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_card, Record, Changes, Out1);
generate_update_sql(player_card, Record, [4|Changes], Out)->
    CardId = int_to_bin(Record#db_player_card.card_id ),
    Out1 = case length(Out) of 1 -> [<<"`card_id` = ", CardId/binary>> | Out]; _ -> [<<",`card_id` = ", CardId/binary>> | Out] end,
    generate_update_sql (player_card, Record, Changes, Out1);
generate_update_sql(player_card, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_card.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_card, Record, Changes, Out1);
generate_update_sql (player_bounty_task, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_bounty_task.player_id),
    Id = int_to_bin(Record#db_player_bounty_task.id),
    [<<" WHERE `id` = ", Id/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_bounty_task, Record, [7|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_bounty_task.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_bounty_task, Record, Changes, Out1);
generate_update_sql(player_bounty_task, Record, [6|Changes], Out)->
    State = int_to_bin(Record#db_player_bounty_task.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_bounty_task, Record, Changes, Out1);
generate_update_sql(player_bounty_task, Record, [5|Changes], Out)->
    Value = int_to_bin(Record#db_player_bounty_task.value ),
    Out1 = case length(Out) of 1 -> [<<"`value` = ", Value/binary>> | Out]; _ -> [<<",`value` = ", Value/binary>> | Out] end,
    generate_update_sql (player_bounty_task, Record, Changes, Out1);
generate_update_sql(player_bounty_task, Record, [4|Changes], Out)->
    Id = int_to_bin(Record#db_player_bounty_task.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_bounty_task, Record, Changes, Out1);
generate_update_sql(player_bounty_task, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_bounty_task.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_bounty_task, Record, Changes, Out1);
generate_update_sql (player_adjust_rebound, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_adjust_rebound.player_id),
    ReboundType = int_to_bin(Record#db_player_adjust_rebound.rebound_type),
    [<<" WHERE `rebound_type` = ", ReboundType/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_adjust_rebound, Record, [6|Changes], Out)->
    TriggerTime = int_to_bin(Record#db_player_adjust_rebound.trigger_time ),
    Out1 = case length(Out) of 1 -> [<<"`trigger_time` = ", TriggerTime/binary>> | Out]; _ -> [<<",`trigger_time` = ", TriggerTime/binary>> | Out] end,
    generate_update_sql (player_adjust_rebound, Record, Changes, Out1);
generate_update_sql(player_adjust_rebound, Record, [5|Changes], Out)->
    TriggerTimes = int_to_bin(Record#db_player_adjust_rebound.trigger_times ),
    Out1 = case length(Out) of 1 -> [<<"`trigger_times` = ", TriggerTimes/binary>> | Out]; _ -> [<<",`trigger_times` = ", TriggerTimes/binary>> | Out] end,
    generate_update_sql (player_adjust_rebound, Record, Changes, Out1);
generate_update_sql(player_adjust_rebound, Record, [4|Changes], Out)->
    ReboundType = int_to_bin(Record#db_player_adjust_rebound.rebound_type ),
    Out1 = case length(Out) of 1 -> [<<"`rebound_type` = ", ReboundType/binary>> | Out]; _ -> [<<",`rebound_type` = ", ReboundType/binary>> | Out] end,
    generate_update_sql (player_adjust_rebound, Record, Changes, Out1);
generate_update_sql(player_adjust_rebound, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_adjust_rebound.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_adjust_rebound, Record, Changes, Out1);
generate_update_sql (player_activity_task, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_activity_task.player_id),
    ActivityId = int_to_bin(Record#db_player_activity_task.activity_id),
    TaskType = int_to_bin(Record#db_player_activity_task.task_type),
    [<<" WHERE `task_type` = ", TaskType/binary,        " AND `activity_id` = ", ActivityId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_activity_task, Record, [7|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_activity_task.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_activity_task, Record, Changes, Out1);
generate_update_sql(player_activity_task, Record, [6|Changes], Out)->
    Value = int_to_bin(Record#db_player_activity_task.value ),
    Out1 = case length(Out) of 1 -> [<<"`value` = ", Value/binary>> | Out]; _ -> [<<",`value` = ", Value/binary>> | Out] end,
    generate_update_sql (player_activity_task, Record, Changes, Out1);
generate_update_sql(player_activity_task, Record, [5|Changes], Out)->
    TaskType = int_to_bin(Record#db_player_activity_task.task_type ),
    Out1 = case length(Out) of 1 -> [<<"`task_type` = ", TaskType/binary>> | Out]; _ -> [<<",`task_type` = ", TaskType/binary>> | Out] end,
    generate_update_sql (player_activity_task, Record, Changes, Out1);
generate_update_sql(player_activity_task, Record, [4|Changes], Out)->
    ActivityId = int_to_bin(Record#db_player_activity_task.activity_id ),
    Out1 = case length(Out) of 1 -> [<<"`activity_id` = ", ActivityId/binary>> | Out]; _ -> [<<",`activity_id` = ", ActivityId/binary>> | Out] end,
    generate_update_sql (player_activity_task, Record, Changes, Out1);
generate_update_sql(player_activity_task, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_activity_task.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_activity_task, Record, Changes, Out1);
generate_update_sql (player_activity_info, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_activity_info.player_id),
    ActivityId = int_to_bin(Record#db_player_activity_info.activity_id),
    [<<" WHERE `activity_id` = ", ActivityId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_activity_info, Record, [9|Changes], Out)->
    ConfigCloseTime = int_to_bin(Record#db_player_activity_info.config_close_time ),
    Out1 = case length(Out) of 1 -> [<<"`config_close_time` = ", ConfigCloseTime/binary>> | Out]; _ -> [<<",`config_close_time` = ", ConfigCloseTime/binary>> | Out] end,
    generate_update_sql (player_activity_info, Record, Changes, Out1);
generate_update_sql(player_activity_info, Record, [8|Changes], Out)->
    ConfigOpenTime = int_to_bin(Record#db_player_activity_info.config_open_time ),
    Out1 = case length(Out) of 1 -> [<<"`config_open_time` = ", ConfigOpenTime/binary>> | Out]; _ -> [<<",`config_open_time` = ", ConfigOpenTime/binary>> | Out] end,
    generate_update_sql (player_activity_info, Record, Changes, Out1);
generate_update_sql(player_activity_info, Record, [7|Changes], Out)->
    LastCloseTime = int_to_bin(Record#db_player_activity_info.last_close_time ),
    Out1 = case length(Out) of 1 -> [<<"`last_close_time` = ", LastCloseTime/binary>> | Out]; _ -> [<<",`last_close_time` = ", LastCloseTime/binary>> | Out] end,
    generate_update_sql (player_activity_info, Record, Changes, Out1);
generate_update_sql(player_activity_info, Record, [6|Changes], Out)->
    LastOpenTime = int_to_bin(Record#db_player_activity_info.last_open_time ),
    Out1 = case length(Out) of 1 -> [<<"`last_open_time` = ", LastOpenTime/binary>> | Out]; _ -> [<<",`last_open_time` = ", LastOpenTime/binary>> | Out] end,
    generate_update_sql (player_activity_info, Record, Changes, Out1);
generate_update_sql(player_activity_info, Record, [5|Changes], Out)->
    State = int_to_bin(Record#db_player_activity_info.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_activity_info, Record, Changes, Out1);
generate_update_sql(player_activity_info, Record, [4|Changes], Out)->
    ActivityId = int_to_bin(Record#db_player_activity_info.activity_id ),
    Out1 = case length(Out) of 1 -> [<<"`activity_id` = ", ActivityId/binary>> | Out]; _ -> [<<",`activity_id` = ", ActivityId/binary>> | Out] end,
    generate_update_sql (player_activity_info, Record, Changes, Out1);
generate_update_sql(player_activity_info, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_activity_info.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_activity_info, Record, Changes, Out1);
generate_update_sql (player_activity_game_info, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_activity_game_info.player_id),
    ActivityId = int_to_bin(Record#db_player_activity_game_info.activity_id),
    GameId = int_to_bin(Record#db_player_activity_game_info.game_id),
    [<<" WHERE `game_id` = ", GameId/binary,        " AND `activity_id` = ", ActivityId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_activity_game_info, Record, [9|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_activity_game_info.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_activity_game_info, Record, Changes, Out1);
generate_update_sql(player_activity_game_info, Record, [8|Changes], Out)->
    Times = int_to_bin(Record#db_player_activity_game_info.times ),
    Out1 = case length(Out) of 1 -> [<<"`times` = ", Times/binary>> | Out]; _ -> [<<",`times` = ", Times/binary>> | Out] end,
    generate_update_sql (player_activity_game_info, Record, Changes, Out1);
generate_update_sql(player_activity_game_info, Record, [7|Changes], Out)->
    State = int_to_bin(Record#db_player_activity_game_info.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_activity_game_info, Record, Changes, Out1);
generate_update_sql(player_activity_game_info, Record, [6|Changes], Out)->
    ActivityStartTime = int_to_bin(Record#db_player_activity_game_info.activity_start_time ),
    Out1 = case length(Out) of 1 -> [<<"`activity_start_time` = ", ActivityStartTime/binary>> | Out]; _ -> [<<",`activity_start_time` = ", ActivityStartTime/binary>> | Out] end,
    generate_update_sql (player_activity_game_info, Record, Changes, Out1);
generate_update_sql(player_activity_game_info, Record, [5|Changes], Out)->
    GameId = int_to_bin(Record#db_player_activity_game_info.game_id ),
    Out1 = case length(Out) of 1 -> [<<"`game_id` = ", GameId/binary>> | Out]; _ -> [<<",`game_id` = ", GameId/binary>> | Out] end,
    generate_update_sql (player_activity_game_info, Record, Changes, Out1);
generate_update_sql(player_activity_game_info, Record, [4|Changes], Out)->
    ActivityId = int_to_bin(Record#db_player_activity_game_info.activity_id ),
    Out1 = case length(Out) of 1 -> [<<"`activity_id` = ", ActivityId/binary>> | Out]; _ -> [<<",`activity_id` = ", ActivityId/binary>> | Out] end,
    generate_update_sql (player_activity_game_info, Record, Changes, Out1);
generate_update_sql(player_activity_game_info, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_activity_game_info.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_activity_game_info, Record, Changes, Out1);
generate_update_sql (player_activity_game, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_activity_game.player_id),
    ActivityId = int_to_bin(Record#db_player_activity_game.activity_id),
    [<<" WHERE `activity_id` = ", ActivityId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_activity_game, Record, [7|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_activity_game.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_activity_game, Record, Changes, Out1);
generate_update_sql(player_activity_game, Record, [6|Changes], Out)->
    Value = int_to_bin(Record#db_player_activity_game.value ),
    Out1 = case length(Out) of 1 -> [<<"`value` = ", Value/binary>> | Out]; _ -> [<<",`value` = ", Value/binary>> | Out] end,
    generate_update_sql (player_activity_game, Record, Changes, Out1);
generate_update_sql(player_activity_game, Record, [5|Changes], Out)->
    ActivityStartTime = int_to_bin(Record#db_player_activity_game.activity_start_time ),
    Out1 = case length(Out) of 1 -> [<<"`activity_start_time` = ", ActivityStartTime/binary>> | Out]; _ -> [<<",`activity_start_time` = ", ActivityStartTime/binary>> | Out] end,
    generate_update_sql (player_activity_game, Record, Changes, Out1);
generate_update_sql(player_activity_game, Record, [4|Changes], Out)->
    ActivityId = int_to_bin(Record#db_player_activity_game.activity_id ),
    Out1 = case length(Out) of 1 -> [<<"`activity_id` = ", ActivityId/binary>> | Out]; _ -> [<<",`activity_id` = ", ActivityId/binary>> | Out] end,
    generate_update_sql (player_activity_game, Record, Changes, Out1);
generate_update_sql(player_activity_game, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_activity_game.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_activity_game, Record, Changes, Out1);
generate_update_sql (player_activity_condition, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_activity_condition.player_id),
    ActivityId = int_to_bin(Record#db_player_activity_condition.activity_id),
    ConditionId = int_to_bin(Record#db_player_activity_condition.condition_id),
    [<<" WHERE `condition_id` = ", ConditionId/binary,        " AND `activity_id` = ", ActivityId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_activity_condition, Record, [7|Changes], Out)->
    ActivityTime = int_to_bin(Record#db_player_activity_condition.activity_time ),
    Out1 = case length(Out) of 1 -> [<<"`activity_time` = ", ActivityTime/binary>> | Out]; _ -> [<<",`activity_time` = ", ActivityTime/binary>> | Out] end,
    generate_update_sql (player_activity_condition, Record, Changes, Out1);
generate_update_sql(player_activity_condition, Record, [6|Changes], Out)->
    Value = int_to_bin(Record#db_player_activity_condition.value ),
    Out1 = case length(Out) of 1 -> [<<"`value` = ", Value/binary>> | Out]; _ -> [<<",`value` = ", Value/binary>> | Out] end,
    generate_update_sql (player_activity_condition, Record, Changes, Out1);
generate_update_sql(player_activity_condition, Record, [5|Changes], Out)->
    ConditionId = int_to_bin(Record#db_player_activity_condition.condition_id ),
    Out1 = case length(Out) of 1 -> [<<"`condition_id` = ", ConditionId/binary>> | Out]; _ -> [<<",`condition_id` = ", ConditionId/binary>> | Out] end,
    generate_update_sql (player_activity_condition, Record, Changes, Out1);
generate_update_sql(player_activity_condition, Record, [4|Changes], Out)->
    ActivityId = int_to_bin(Record#db_player_activity_condition.activity_id ),
    Out1 = case length(Out) of 1 -> [<<"`activity_id` = ", ActivityId/binary>> | Out]; _ -> [<<",`activity_id` = ", ActivityId/binary>> | Out] end,
    generate_update_sql (player_activity_condition, Record, Changes, Out1);
generate_update_sql(player_activity_condition, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_activity_condition.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_activity_condition, Record, Changes, Out1);
generate_update_sql (player_achievement, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_player_achievement.player_id),
    Type = int_to_bin(Record#db_player_achievement.type),
    [<<" WHERE `type` = ", Type/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(player_achievement, Record, [7|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_player_achievement.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (player_achievement, Record, Changes, Out1);
generate_update_sql(player_achievement, Record, [6|Changes], Out)->
    State = int_to_bin(Record#db_player_achievement.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (player_achievement, Record, Changes, Out1);
generate_update_sql(player_achievement, Record, [5|Changes], Out)->
    Id = int_to_bin(Record#db_player_achievement.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player_achievement, Record, Changes, Out1);
generate_update_sql(player_achievement, Record, [4|Changes], Out)->
    Type = int_to_bin(Record#db_player_achievement.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (player_achievement, Record, Changes, Out1);
generate_update_sql(player_achievement, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_player_achievement.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (player_achievement, Record, Changes, Out1);
generate_update_sql (player, Record, [], Out) ->
     Id = int_to_bin(Record#db_player.id),
    [<<" WHERE `id` = ", Id/binary, ";\n">> | Out];
generate_update_sql(player, Record, [27|Changes], Out)->
    OauthSource = list_to_bin(Record#db_player.oauth_source ),
    Out1 = case length(Out) of 1 -> [<<"`oauth_source` = ", OauthSource/binary>> | Out]; _ -> [<<",`oauth_source` = ", OauthSource/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [26|Changes], Out)->
    FriendCode = list_to_bin(Record#db_player.friend_code ),
    Out1 = case length(Out) of 1 -> [<<"`friend_code` = ", FriendCode/binary>> | Out]; _ -> [<<",`friend_code` = ", FriendCode/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [25|Changes], Out)->
    Channel = list_to_bin(Record#db_player.channel ),
    Out1 = case length(Out) of 1 -> [<<"`channel` = ", Channel/binary>> | Out]; _ -> [<<",`channel` = ", Channel/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [24|Changes], Out)->
    IsOnline = int_to_bin(Record#db_player.is_online ),
    Out1 = case length(Out) of 1 -> [<<"`is_online` = ", IsOnline/binary>> | Out]; _ -> [<<",`is_online` = ", IsOnline/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [23|Changes], Out)->
    Type = int_to_bin(Record#db_player.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [22|Changes], Out)->
    IsPassFcm = int_to_bin(Record#db_player.is_pass_fcm ),
    Out1 = case length(Out) of 1 -> [<<"`is_pass_fcm` = ", IsPassFcm/binary>> | Out]; _ -> [<<",`is_pass_fcm` = ", IsPassFcm/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [21|Changes], Out)->
    RechargeTimes = int_to_bin(Record#db_player.recharge_times ),
    Out1 = case length(Out) of 1 -> [<<"`recharge_times` = ", RechargeTimes/binary>> | Out]; _ -> [<<",`recharge_times` = ", RechargeTimes/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [20|Changes], Out)->
    LastRechargeTime = int_to_bin(Record#db_player.last_recharge_time ),
    Out1 = case length(Out) of 1 -> [<<"`last_recharge_time` = ", LastRechargeTime/binary>> | Out]; _ -> [<<",`last_recharge_time` = ", LastRechargeTime/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [19|Changes], Out)->
    TotalRechargeIngot = int_to_bin(Record#db_player.total_recharge_ingot ),
    Out1 = case length(Out) of 1 -> [<<"`total_recharge_ingot` = ", TotalRechargeIngot/binary>> | Out]; _ -> [<<",`total_recharge_ingot` = ", TotalRechargeIngot/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [18|Changes], Out)->
    ContinuousDay = int_to_bin(Record#db_player.continuous_day ),
    Out1 = case length(Out) of 1 -> [<<"`continuous_day` = ", ContinuousDay/binary>> | Out]; _ -> [<<",`continuous_day` = ", ContinuousDay/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [17|Changes], Out)->
    CumulativeDay = int_to_bin(Record#db_player.cumulative_day ),
    Out1 = case length(Out) of 1 -> [<<"`cumulative_day` = ", CumulativeDay/binary>> | Out]; _ -> [<<",`cumulative_day` = ", CumulativeDay/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [16|Changes], Out)->
    LoginTimes = int_to_bin(Record#db_player.login_times ),
    Out1 = case length(Out) of 1 -> [<<"`login_times` = ", LoginTimes/binary>> | Out]; _ -> [<<",`login_times` = ", LoginTimes/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [15|Changes], Out)->
    From = list_to_bin(Record#db_player.from ),
    Out1 = case length(Out) of 1 -> [<<"`from` = ", From/binary>> | Out]; _ -> [<<",`from` = ", From/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [14|Changes], Out)->
    LastLoginIp = list_to_bin(Record#db_player.last_login_ip ),
    Out1 = case length(Out) of 1 -> [<<"`last_login_ip` = ", LastLoginIp/binary>> | Out]; _ -> [<<",`last_login_ip` = ", LastLoginIp/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [13|Changes], Out)->
    TotalOnlineTime = int_to_bin(Record#db_player.total_online_time ),
    Out1 = case length(Out) of 1 -> [<<"`total_online_time` = ", TotalOnlineTime/binary>> | Out]; _ -> [<<",`total_online_time` = ", TotalOnlineTime/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [12|Changes], Out)->
    LastOfflineTime = int_to_bin(Record#db_player.last_offline_time ),
    Out1 = case length(Out) of 1 -> [<<"`last_offline_time` = ", LastOfflineTime/binary>> | Out]; _ -> [<<",`last_offline_time` = ", LastOfflineTime/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [11|Changes], Out)->
    LastLoginTime = int_to_bin(Record#db_player.last_login_time ),
    Out1 = case length(Out) of 1 -> [<<"`last_login_time` = ", LastLoginTime/binary>> | Out]; _ -> [<<",`last_login_time` = ", LastLoginTime/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [10|Changes], Out)->
    RegTime = int_to_bin(Record#db_player.reg_time ),
    Out1 = case length(Out) of 1 -> [<<"`reg_time` = ", RegTime/binary>> | Out]; _ -> [<<",`reg_time` = ", RegTime/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [9|Changes], Out)->
    ForbidTime = int_to_bin(Record#db_player.forbid_time ),
    Out1 = case length(Out) of 1 -> [<<"`forbid_time` = ", ForbidTime/binary>> | Out]; _ -> [<<",`forbid_time` = ", ForbidTime/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [8|Changes], Out)->
    ForbidType = int_to_bin(Record#db_player.forbid_type ),
    Out1 = case length(Out) of 1 -> [<<"`forbid_type` = ", ForbidType/binary>> | Out]; _ -> [<<",`forbid_type` = ", ForbidType/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [7|Changes], Out)->
    Sex = int_to_bin(Record#db_player.sex ),
    Out1 = case length(Out) of 1 -> [<<"`sex` = ", Sex/binary>> | Out]; _ -> [<<",`sex` = ", Sex/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [6|Changes], Out)->
    Nickname = list_to_bin(Record#db_player.nickname ),
    Out1 = case length(Out) of 1 -> [<<"`nickname` = ", Nickname/binary>> | Out]; _ -> [<<",`nickname` = ", Nickname/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [5|Changes], Out)->
    ServerId = list_to_bin(Record#db_player.server_id ),
    Out1 = case length(Out) of 1 -> [<<"`server_id` = ", ServerId/binary>> | Out]; _ -> [<<",`server_id` = ", ServerId/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [4|Changes], Out)->
    AccId = list_to_bin(Record#db_player.acc_id ),
    Out1 = case length(Out) of 1 -> [<<"`acc_id` = ", AccId/binary>> | Out]; _ -> [<<",`acc_id` = ", AccId/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql(player, Record, [3|Changes], Out)->
    Id = int_to_bin(Record#db_player.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (player, Record, Changes, Out1);
generate_update_sql (one_vs_one_rank_data, Record, [], Out) ->
     Type = int_to_bin(Record#db_one_vs_one_rank_data.type),
    PlayerId = int_to_bin(Record#db_one_vs_one_rank_data.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary,        " AND `type` = ", Type/binary, ";\n">> | Out];
generate_update_sql(one_vs_one_rank_data, Record, [6|Changes], Out)->
    Time = int_to_bin(Record#db_one_vs_one_rank_data.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (one_vs_one_rank_data, Record, Changes, Out1);
generate_update_sql(one_vs_one_rank_data, Record, [5|Changes], Out)->
    Score = int_to_bin(Record#db_one_vs_one_rank_data.score ),
    Out1 = case length(Out) of 1 -> [<<"`score` = ", Score/binary>> | Out]; _ -> [<<",`score` = ", Score/binary>> | Out] end,
    generate_update_sql (one_vs_one_rank_data, Record, Changes, Out1);
generate_update_sql(one_vs_one_rank_data, Record, [4|Changes], Out)->
    PlayerId = int_to_bin(Record#db_one_vs_one_rank_data.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (one_vs_one_rank_data, Record, Changes, Out1);
generate_update_sql(one_vs_one_rank_data, Record, [3|Changes], Out)->
    Type = int_to_bin(Record#db_one_vs_one_rank_data.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (one_vs_one_rank_data, Record, Changes, Out1);
generate_update_sql (oauth_order_log, Record, [], Out) ->
     OrderId = list_to_bin(Record#db_oauth_order_log.order_id),
    [<<" WHERE `order_id` = ", OrderId/binary, ";\n">> | Out];
generate_update_sql(oauth_order_log, Record, [13|Changes], Out)->
    UpdateTime = int_to_bin(Record#db_oauth_order_log.update_time ),
    Out1 = case length(Out) of 1 -> [<<"`update_time` = ", UpdateTime/binary>> | Out]; _ -> [<<",`update_time` = ", UpdateTime/binary>> | Out] end,
    generate_update_sql (oauth_order_log, Record, Changes, Out1);
generate_update_sql(oauth_order_log, Record, [12|Changes], Out)->
    CreateTime = int_to_bin(Record#db_oauth_order_log.create_time ),
    Out1 = case length(Out) of 1 -> [<<"`create_time` = ", CreateTime/binary>> | Out]; _ -> [<<",`create_time` = ", CreateTime/binary>> | Out] end,
    generate_update_sql (oauth_order_log, Record, Changes, Out1);
generate_update_sql(oauth_order_log, Record, [11|Changes], Out)->
    Ip = list_to_bin(Record#db_oauth_order_log.ip ),
    Out1 = case length(Out) of 1 -> [<<"`ip` = ", Ip/binary>> | Out]; _ -> [<<",`ip` = ", Ip/binary>> | Out] end,
    generate_update_sql (oauth_order_log, Record, Changes, Out1);
generate_update_sql(oauth_order_log, Record, [10|Changes], Out)->
    Amount = float_to_bin(Record#db_oauth_order_log.amount ),
    Out1 = case length(Out) of 1 -> [<<"`amount` = ", Amount/binary>> | Out]; _ -> [<<",`amount` = ", Amount/binary>> | Out] end,
    generate_update_sql (oauth_order_log, Record, Changes, Out1);
generate_update_sql(oauth_order_log, Record, [9|Changes], Out)->
    Status = int_to_bin(Record#db_oauth_order_log.status ),
    Out1 = case length(Out) of 1 -> [<<"`status` = ", Status/binary>> | Out]; _ -> [<<",`status` = ", Status/binary>> | Out] end,
    generate_update_sql (oauth_order_log, Record, Changes, Out1);
generate_update_sql(oauth_order_log, Record, [8|Changes], Out)->
    ChangeNum = int_to_bin(Record#db_oauth_order_log.change_num ),
    Out1 = case length(Out) of 1 -> [<<"`change_num` = ", ChangeNum/binary>> | Out]; _ -> [<<",`change_num` = ", ChangeNum/binary>> | Out] end,
    generate_update_sql (oauth_order_log, Record, Changes, Out1);
generate_update_sql(oauth_order_log, Record, [7|Changes], Out)->
    ChangeType = int_to_bin(Record#db_oauth_order_log.change_type ),
    Out1 = case length(Out) of 1 -> [<<"`change_type` = ", ChangeType/binary>> | Out]; _ -> [<<",`change_type` = ", ChangeType/binary>> | Out] end,
    generate_update_sql (oauth_order_log, Record, Changes, Out1);
generate_update_sql(oauth_order_log, Record, [6|Changes], Out)->
    PropId = int_to_bin(Record#db_oauth_order_log.prop_id ),
    Out1 = case length(Out) of 1 -> [<<"`prop_id` = ", PropId/binary>> | Out]; _ -> [<<",`prop_id` = ", PropId/binary>> | Out] end,
    generate_update_sql (oauth_order_log, Record, Changes, Out1);
generate_update_sql(oauth_order_log, Record, [5|Changes], Out)->
    BuyerPlayerId = int_to_bin(Record#db_oauth_order_log.buyer_player_id ),
    Out1 = case length(Out) of 1 -> [<<"`buyer_player_id` = ", BuyerPlayerId/binary>> | Out]; _ -> [<<",`buyer_player_id` = ", BuyerPlayerId/binary>> | Out] end,
    generate_update_sql (oauth_order_log, Record, Changes, Out1);
generate_update_sql(oauth_order_log, Record, [4|Changes], Out)->
    PlayerId = int_to_bin(Record#db_oauth_order_log.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (oauth_order_log, Record, Changes, Out1);
generate_update_sql(oauth_order_log, Record, [3|Changes], Out)->
    OrderId = list_to_bin(Record#db_oauth_order_log.order_id ),
    Out1 = case length(Out) of 1 -> [<<"`order_id` = ", OrderId/binary>> | Out]; _ -> [<<",`order_id` = ", OrderId/binary>> | Out] end,
    generate_update_sql (oauth_order_log, Record, Changes, Out1);
generate_update_sql (mission_ranking, Record, [], Out) ->
     MissionType = int_to_bin(Record#db_mission_ranking.mission_type),
    MissionId = int_to_bin(Record#db_mission_ranking.mission_id),
    Id = int_to_bin(Record#db_mission_ranking.id),
    PlayerId = int_to_bin(Record#db_mission_ranking.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary,        " AND `id` = ", Id/binary,        " AND `mission_id` = ", MissionId/binary,        " AND `mission_type` = ", MissionType/binary, ";\n">> | Out];
generate_update_sql(mission_ranking, Record, [10|Changes], Out)->
    Time = int_to_bin(Record#db_mission_ranking.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (mission_ranking, Record, Changes, Out1);
generate_update_sql(mission_ranking, Record, [9|Changes], Out)->
    Hurt = int_to_bin(Record#db_mission_ranking.hurt ),
    Out1 = case length(Out) of 1 -> [<<"`hurt` = ", Hurt/binary>> | Out]; _ -> [<<",`hurt` = ", Hurt/binary>> | Out] end,
    generate_update_sql (mission_ranking, Record, Changes, Out1);
generate_update_sql(mission_ranking, Record, [8|Changes], Out)->
    Nickname = list_to_bin(Record#db_mission_ranking.nickname ),
    Out1 = case length(Out) of 1 -> [<<"`nickname` = ", Nickname/binary>> | Out]; _ -> [<<",`nickname` = ", Nickname/binary>> | Out] end,
    generate_update_sql (mission_ranking, Record, Changes, Out1);
generate_update_sql(mission_ranking, Record, [7|Changes], Out)->
    RankId = int_to_bin(Record#db_mission_ranking.rank_id ),
    Out1 = case length(Out) of 1 -> [<<"`rank_id` = ", RankId/binary>> | Out]; _ -> [<<",`rank_id` = ", RankId/binary>> | Out] end,
    generate_update_sql (mission_ranking, Record, Changes, Out1);
generate_update_sql(mission_ranking, Record, [6|Changes], Out)->
    PlayerId = int_to_bin(Record#db_mission_ranking.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (mission_ranking, Record, Changes, Out1);
generate_update_sql(mission_ranking, Record, [5|Changes], Out)->
    Id = int_to_bin(Record#db_mission_ranking.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (mission_ranking, Record, Changes, Out1);
generate_update_sql(mission_ranking, Record, [4|Changes], Out)->
    MissionId = int_to_bin(Record#db_mission_ranking.mission_id ),
    Out1 = case length(Out) of 1 -> [<<"`mission_id` = ", MissionId/binary>> | Out]; _ -> [<<",`mission_id` = ", MissionId/binary>> | Out] end,
    generate_update_sql (mission_ranking, Record, Changes, Out1);
generate_update_sql(mission_ranking, Record, [3|Changes], Out)->
    MissionType = int_to_bin(Record#db_mission_ranking.mission_type ),
    Out1 = case length(Out) of 1 -> [<<"`mission_type` = ", MissionType/binary>> | Out]; _ -> [<<",`mission_type` = ", MissionType/binary>> | Out] end,
    generate_update_sql (mission_ranking, Record, Changes, Out1);
generate_update_sql (mission_guess_boss, Record, [], Out) ->
     Id = int_to_bin(Record#db_mission_guess_boss.id),
    [<<" WHERE `id` = ", Id/binary, ";\n">> | Out];
generate_update_sql(mission_guess_boss, Record, [7|Changes], Out)->
    Time = int_to_bin(Record#db_mission_guess_boss.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (mission_guess_boss, Record, Changes, Out1);
generate_update_sql(mission_guess_boss, Record, [6|Changes], Out)->
    PlayerTotalAward = int_to_bin(Record#db_mission_guess_boss.player_total_award ),
    Out1 = case length(Out) of 1 -> [<<"`player_total_award` = ", PlayerTotalAward/binary>> | Out]; _ -> [<<",`player_total_award` = ", PlayerTotalAward/binary>> | Out] end,
    generate_update_sql (mission_guess_boss, Record, Changes, Out1);
generate_update_sql(mission_guess_boss, Record, [5|Changes], Out)->
    PlayerTotalCost = int_to_bin(Record#db_mission_guess_boss.player_total_cost ),
    Out1 = case length(Out) of 1 -> [<<"`player_total_cost` = ", PlayerTotalCost/binary>> | Out]; _ -> [<<",`player_total_cost` = ", PlayerTotalCost/binary>> | Out] end,
    generate_update_sql (mission_guess_boss, Record, Changes, Out1);
generate_update_sql(mission_guess_boss, Record, [4|Changes], Out)->
    BossId = int_to_bin(Record#db_mission_guess_boss.boss_id ),
    Out1 = case length(Out) of 1 -> [<<"`boss_id` = ", BossId/binary>> | Out]; _ -> [<<",`boss_id` = ", BossId/binary>> | Out] end,
    generate_update_sql (mission_guess_boss, Record, Changes, Out1);
generate_update_sql(mission_guess_boss, Record, [3|Changes], Out)->
    Id = int_to_bin(Record#db_mission_guess_boss.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (mission_guess_boss, Record, Changes, Out1);
generate_update_sql (match_scene_data, Record, [], Out) ->
     Id = int_to_bin(Record#db_match_scene_data.id),
    [<<" WHERE `id` = ", Id/binary, ";\n">> | Out];
generate_update_sql(match_scene_data, Record, [7|Changes], Out)->
    LastTime = int_to_bin(Record#db_match_scene_data.last_time ),
    Out1 = case length(Out) of 1 -> [<<"`last_time` = ", LastTime/binary>> | Out]; _ -> [<<",`last_time` = ", LastTime/binary>> | Out] end,
    generate_update_sql (match_scene_data, Record, Changes, Out1);
generate_update_sql(match_scene_data, Record, [6|Changes], Out)->
    Award = int_to_bin(Record#db_match_scene_data.award ),
    Out1 = case length(Out) of 1 -> [<<"`award` = ", Award/binary>> | Out]; _ -> [<<",`award` = ", Award/binary>> | Out] end,
    generate_update_sql (match_scene_data, Record, Changes, Out1);
generate_update_sql(match_scene_data, Record, [5|Changes], Out)->
    Score = int_to_bin(Record#db_match_scene_data.score ),
    Out1 = case length(Out) of 1 -> [<<"`score` = ", Score/binary>> | Out]; _ -> [<<",`score` = ", Score/binary>> | Out] end,
    generate_update_sql (match_scene_data, Record, Changes, Out1);
generate_update_sql(match_scene_data, Record, [4|Changes], Out)->
    PlayerId = int_to_bin(Record#db_match_scene_data.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (match_scene_data, Record, Changes, Out1);
generate_update_sql(match_scene_data, Record, [3|Changes], Out)->
    Id = int_to_bin(Record#db_match_scene_data.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (match_scene_data, Record, Changes, Out1);
generate_update_sql (login_notice, Record, [], Out) ->
     PlatformId = list_to_bin(Record#db_login_notice.platform_id),
    ChannelId = list_to_bin(Record#db_login_notice.channel_id),
    [<<" WHERE `channel_id` = ", ChannelId/binary,        " AND `platform_id` = ", PlatformId/binary, ";\n">> | Out];
generate_update_sql(login_notice, Record, [5|Changes], Out)->
    Content = list_to_bin(Record#db_login_notice.content ),
    Out1 = case length(Out) of 1 -> [<<"`content` = ", Content/binary>> | Out]; _ -> [<<",`content` = ", Content/binary>> | Out] end,
    generate_update_sql (login_notice, Record, Changes, Out1);
generate_update_sql(login_notice, Record, [4|Changes], Out)->
    ChannelId = list_to_bin(Record#db_login_notice.channel_id ),
    Out1 = case length(Out) of 1 -> [<<"`channel_id` = ", ChannelId/binary>> | Out]; _ -> [<<",`channel_id` = ", ChannelId/binary>> | Out] end,
    generate_update_sql (login_notice, Record, Changes, Out1);
generate_update_sql(login_notice, Record, [3|Changes], Out)->
    PlatformId = list_to_bin(Record#db_login_notice.platform_id ),
    Out1 = case length(Out) of 1 -> [<<"`platform_id` = ", PlatformId/binary>> | Out]; _ -> [<<",`platform_id` = ", PlatformId/binary>> | Out] end,
    generate_update_sql (login_notice, Record, Changes, Out1);
generate_update_sql (laba_adjust, Record, [], Out) ->
     LabaId = int_to_bin(Record#db_laba_adjust.laba_id),
    CostRate = int_to_bin(Record#db_laba_adjust.cost_rate),
    [<<" WHERE `cost_rate` = ", CostRate/binary,        " AND `laba_id` = ", LabaId/binary, ";\n">> | Out];
generate_update_sql(laba_adjust, Record, [5|Changes], Out)->
    Pool = int_to_bin(Record#db_laba_adjust.pool ),
    Out1 = case length(Out) of 1 -> [<<"`pool` = ", Pool/binary>> | Out]; _ -> [<<",`pool` = ", Pool/binary>> | Out] end,
    generate_update_sql (laba_adjust, Record, Changes, Out1);
generate_update_sql(laba_adjust, Record, [4|Changes], Out)->
    CostRate = int_to_bin(Record#db_laba_adjust.cost_rate ),
    Out1 = case length(Out) of 1 -> [<<"`cost_rate` = ", CostRate/binary>> | Out]; _ -> [<<",`cost_rate` = ", CostRate/binary>> | Out] end,
    generate_update_sql (laba_adjust, Record, Changes, Out1);
generate_update_sql(laba_adjust, Record, [3|Changes], Out)->
    LabaId = int_to_bin(Record#db_laba_adjust.laba_id ),
    Out1 = case length(Out) of 1 -> [<<"`laba_id` = ", LabaId/binary>> | Out]; _ -> [<<",`laba_id` = ", LabaId/binary>> | Out] end,
    generate_update_sql (laba_adjust, Record, Changes, Out1);
generate_update_sql (jiangjinchi, Record, [], Out) ->
     SceneId = int_to_bin(Record#db_jiangjinchi.scene_id),
    [<<" WHERE `scene_id` = ", SceneId/binary, ";\n">> | Out];
generate_update_sql(jiangjinchi, Record, [5|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_jiangjinchi.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (jiangjinchi, Record, Changes, Out1);
generate_update_sql(jiangjinchi, Record, [4|Changes], Out)->
    Pool = int_to_bin(Record#db_jiangjinchi.pool ),
    Out1 = case length(Out) of 1 -> [<<"`pool` = ", Pool/binary>> | Out]; _ -> [<<",`pool` = ", Pool/binary>> | Out] end,
    generate_update_sql (jiangjinchi, Record, Changes, Out1);
generate_update_sql(jiangjinchi, Record, [3|Changes], Out)->
    SceneId = int_to_bin(Record#db_jiangjinchi.scene_id ),
    Out1 = case length(Out) of 1 -> [<<"`scene_id` = ", SceneId/binary>> | Out]; _ -> [<<",`scene_id` = ", SceneId/binary>> | Out] end,
    generate_update_sql (jiangjinchi, Record, Changes, Out1);
generate_update_sql (gift_code_type, Record, [], Out) ->
     Type = int_to_bin(Record#db_gift_code_type.type),
    [<<" WHERE `type` = ", Type/binary, ";\n">> | Out];
generate_update_sql(gift_code_type, Record, [15|Changes], Out)->
    UpdateTime = int_to_bin(Record#db_gift_code_type.update_time ),
    Out1 = case length(Out) of 1 -> [<<"`update_time` = ", UpdateTime/binary>> | Out]; _ -> [<<",`update_time` = ", UpdateTime/binary>> | Out] end,
    generate_update_sql (gift_code_type, Record, Changes, Out1);
generate_update_sql(gift_code_type, Record, [14|Changes], Out)->
    ExpireTime = int_to_bin(Record#db_gift_code_type.expire_time ),
    Out1 = case length(Out) of 1 -> [<<"`expire_time` = ", ExpireTime/binary>> | Out]; _ -> [<<",`expire_time` = ", ExpireTime/binary>> | Out] end,
    generate_update_sql (gift_code_type, Record, Changes, Out1);
generate_update_sql(gift_code_type, Record, [13|Changes], Out)->
    LevelLimit = int_to_bin(Record#db_gift_code_type.level_limit ),
    Out1 = case length(Out) of 1 -> [<<"`level_limit` = ", LevelLimit/binary>> | Out]; _ -> [<<",`level_limit` = ", LevelLimit/binary>> | Out] end,
    generate_update_sql (gift_code_type, Record, Changes, Out1);
generate_update_sql(gift_code_type, Record, [12|Changes], Out)->
    VipLimit = int_to_bin(Record#db_gift_code_type.vip_limit ),
    Out1 = case length(Out) of 1 -> [<<"`vip_limit` = ", VipLimit/binary>> | Out]; _ -> [<<",`vip_limit` = ", VipLimit/binary>> | Out] end,
    generate_update_sql (gift_code_type, Record, Changes, Out1);
generate_update_sql(gift_code_type, Record, [11|Changes], Out)->
    AllowRoleRepeatedGet = int_to_bin(Record#db_gift_code_type.allow_role_repeated_get ),
    Out1 = case length(Out) of 1 -> [<<"`allow_role_repeated_get` = ", AllowRoleRepeatedGet/binary>> | Out]; _ -> [<<",`allow_role_repeated_get` = ", AllowRoleRepeatedGet/binary>> | Out] end,
    generate_update_sql (gift_code_type, Record, Changes, Out1);
generate_update_sql(gift_code_type, Record, [10|Changes], Out)->
    Num = int_to_bin(Record#db_gift_code_type.num ),
    Out1 = case length(Out) of 1 -> [<<"`num` = ", Num/binary>> | Out]; _ -> [<<",`num` = ", Num/binary>> | Out] end,
    generate_update_sql (gift_code_type, Record, Changes, Out1);
generate_update_sql(gift_code_type, Record, [9|Changes], Out)->
    Kind = int_to_bin(Record#db_gift_code_type.kind ),
    Out1 = case length(Out) of 1 -> [<<"`kind` = ", Kind/binary>> | Out]; _ -> [<<",`kind` = ", Kind/binary>> | Out] end,
    generate_update_sql (gift_code_type, Record, Changes, Out1);
generate_update_sql(gift_code_type, Record, [8|Changes], Out)->
    UserId = int_to_bin(Record#db_gift_code_type.user_id ),
    Out1 = case length(Out) of 1 -> [<<"`user_id` = ", UserId/binary>> | Out]; _ -> [<<",`user_id` = ", UserId/binary>> | Out] end,
    generate_update_sql (gift_code_type, Record, Changes, Out1);
generate_update_sql(gift_code_type, Record, [7|Changes], Out)->
    AwardList = list_to_bin(Record#db_gift_code_type.award_list ),
    Out1 = case length(Out) of 1 -> [<<"`award_list` = ", AwardList/binary>> | Out]; _ -> [<<",`award_list` = ", AwardList/binary>> | Out] end,
    generate_update_sql (gift_code_type, Record, Changes, Out1);
generate_update_sql(gift_code_type, Record, [6|Changes], Out)->
    ChannelList = list_to_bin(Record#db_gift_code_type.channel_list ),
    Out1 = case length(Out) of 1 -> [<<"`channel_list` = ", ChannelList/binary>> | Out]; _ -> [<<",`channel_list` = ", ChannelList/binary>> | Out] end,
    generate_update_sql (gift_code_type, Record, Changes, Out1);
generate_update_sql(gift_code_type, Record, [5|Changes], Out)->
    PlatformId = list_to_bin(Record#db_gift_code_type.platform_id ),
    Out1 = case length(Out) of 1 -> [<<"`platform_id` = ", PlatformId/binary>> | Out]; _ -> [<<",`platform_id` = ", PlatformId/binary>> | Out] end,
    generate_update_sql (gift_code_type, Record, Changes, Out1);
generate_update_sql(gift_code_type, Record, [4|Changes], Out)->
    Name = list_to_bin(Record#db_gift_code_type.name ),
    Out1 = case length(Out) of 1 -> [<<"`name` = ", Name/binary>> | Out]; _ -> [<<",`name` = ", Name/binary>> | Out] end,
    generate_update_sql (gift_code_type, Record, Changes, Out1);
generate_update_sql(gift_code_type, Record, [3|Changes], Out)->
    Type = int_to_bin(Record#db_gift_code_type.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (gift_code_type, Record, Changes, Out1);
generate_update_sql (gift_code, Record, [], Out) ->
     GiftCode = list_to_bin(Record#db_gift_code.gift_code),
    [<<" WHERE `gift_code` = ", GiftCode/binary, ";\n">> | Out];
generate_update_sql(gift_code, Record, [4|Changes], Out)->
    GiftCodeType = int_to_bin(Record#db_gift_code.gift_code_type ),
    Out1 = case length(Out) of 1 -> [<<"`gift_code_type` = ", GiftCodeType/binary>> | Out]; _ -> [<<",`gift_code_type` = ", GiftCodeType/binary>> | Out] end,
    generate_update_sql (gift_code, Record, Changes, Out1);
generate_update_sql(gift_code, Record, [3|Changes], Out)->
    GiftCode = list_to_bin(Record#db_gift_code.gift_code ),
    Out1 = case length(Out) of 1 -> [<<"`gift_code` = ", GiftCode/binary>> | Out]; _ -> [<<",`gift_code` = ", GiftCode/binary>> | Out] end,
    generate_update_sql (gift_code, Record, Changes, Out1);
generate_update_sql (consume_statistics, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_consume_statistics.player_id),
    PropId = int_to_bin(Record#db_consume_statistics.prop_id),
    Type = int_to_bin(Record#db_consume_statistics.type),
    LogType = int_to_bin(Record#db_consume_statistics.log_type),
    SceneId = int_to_bin(Record#db_consume_statistics.scene_id),
    [<<" WHERE `scene_id` = ", SceneId/binary,        " AND `log_type` = ", LogType/binary,        " AND `type` = ", Type/binary,        " AND `prop_id` = ", PropId/binary,        " AND `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(consume_statistics, Record, [8|Changes], Out)->
    SceneId = int_to_bin(Record#db_consume_statistics.scene_id ),
    Out1 = case length(Out) of 1 -> [<<"`scene_id` = ", SceneId/binary>> | Out]; _ -> [<<",`scene_id` = ", SceneId/binary>> | Out] end,
    generate_update_sql (consume_statistics, Record, Changes, Out1);
generate_update_sql(consume_statistics, Record, [7|Changes], Out)->
    Value = int_to_bin(Record#db_consume_statistics.value ),
    Out1 = case length(Out) of 1 -> [<<"`value` = ", Value/binary>> | Out]; _ -> [<<",`value` = ", Value/binary>> | Out] end,
    generate_update_sql (consume_statistics, Record, Changes, Out1);
generate_update_sql(consume_statistics, Record, [6|Changes], Out)->
    LogType = int_to_bin(Record#db_consume_statistics.log_type ),
    Out1 = case length(Out) of 1 -> [<<"`log_type` = ", LogType/binary>> | Out]; _ -> [<<",`log_type` = ", LogType/binary>> | Out] end,
    generate_update_sql (consume_statistics, Record, Changes, Out1);
generate_update_sql(consume_statistics, Record, [5|Changes], Out)->
    Type = int_to_bin(Record#db_consume_statistics.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (consume_statistics, Record, Changes, Out1);
generate_update_sql(consume_statistics, Record, [4|Changes], Out)->
    PropId = int_to_bin(Record#db_consume_statistics.prop_id ),
    Out1 = case length(Out) of 1 -> [<<"`prop_id` = ", PropId/binary>> | Out]; _ -> [<<",`prop_id` = ", PropId/binary>> | Out] end,
    generate_update_sql (consume_statistics, Record, Changes, Out1);
generate_update_sql(consume_statistics, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_consume_statistics.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (consume_statistics, Record, Changes, Out1);
generate_update_sql (client_versin, Record, [], Out) ->
     Version = list_to_bin(Record#db_client_versin.version),
    [<<" WHERE `version` = ", Version/binary, ";\n">> | Out];
generate_update_sql(client_versin, Record, [5|Changes], Out)->
    Time = int_to_bin(Record#db_client_versin.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (client_versin, Record, Changes, Out1);
generate_update_sql(client_versin, Record, [4|Changes], Out)->
    IsRelease = int_to_bin(Record#db_client_versin.is_release ),
    Out1 = case length(Out) of 1 -> [<<"`is_release` = ", IsRelease/binary>> | Out]; _ -> [<<",`is_release` = ", IsRelease/binary>> | Out] end,
    generate_update_sql (client_versin, Record, Changes, Out1);
generate_update_sql(client_versin, Record, [3|Changes], Out)->
    Version = list_to_bin(Record#db_client_versin.version ),
    Out1 = case length(Out) of 1 -> [<<"`version` = ", Version/binary>> | Out]; _ -> [<<",`version` = ", Version/binary>> | Out] end,
    generate_update_sql (client_versin, Record, Changes, Out1);
generate_update_sql (charge_order_request_record, Record, [], Out) ->
     OrderId = list_to_bin(Record#db_charge_order_request_record.order_id),
    [<<" WHERE `order_id` = ", OrderId/binary, ";\n">> | Out];
generate_update_sql(charge_order_request_record, Record, [5|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_charge_order_request_record.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (charge_order_request_record, Record, Changes, Out1);
generate_update_sql(charge_order_request_record, Record, [4|Changes], Out)->
    ParamStr = list_to_bin(Record#db_charge_order_request_record.param_str ),
    Out1 = case length(Out) of 1 -> [<<"`param_str` = ", ParamStr/binary>> | Out]; _ -> [<<",`param_str` = ", ParamStr/binary>> | Out] end,
    generate_update_sql (charge_order_request_record, Record, Changes, Out1);
generate_update_sql(charge_order_request_record, Record, [3|Changes], Out)->
    OrderId = list_to_bin(Record#db_charge_order_request_record.order_id ),
    Out1 = case length(Out) of 1 -> [<<"`order_id` = ", OrderId/binary>> | Out]; _ -> [<<",`order_id` = ", OrderId/binary>> | Out] end,
    generate_update_sql (charge_order_request_record, Record, Changes, Out1);
generate_update_sql (charge_ip_white_record, Record, [], Out) ->
     Ip = list_to_bin(Record#db_charge_ip_white_record.ip),
    [<<" WHERE `ip` = ", Ip/binary, ";\n">> | Out];
generate_update_sql(charge_ip_white_record, Record, [6|Changes], Out)->
    RecordTime = int_to_bin(Record#db_charge_ip_white_record.record_time ),
    Out1 = case length(Out) of 1 -> [<<"`record_time` = ", RecordTime/binary>> | Out]; _ -> [<<",`record_time` = ", RecordTime/binary>> | Out] end,
    generate_update_sql (charge_ip_white_record, Record, Changes, Out1);
generate_update_sql(charge_ip_white_record, Record, [5|Changes], Out)->
    State = int_to_bin(Record#db_charge_ip_white_record.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (charge_ip_white_record, Record, Changes, Out1);
generate_update_sql(charge_ip_white_record, Record, [4|Changes], Out)->
    Name = list_to_bin(Record#db_charge_ip_white_record.name ),
    Out1 = case length(Out) of 1 -> [<<"`name` = ", Name/binary>> | Out]; _ -> [<<",`name` = ", Name/binary>> | Out] end,
    generate_update_sql (charge_ip_white_record, Record, Changes, Out1);
generate_update_sql(charge_ip_white_record, Record, [3|Changes], Out)->
    Ip = list_to_bin(Record#db_charge_ip_white_record.ip ),
    Out1 = case length(Out) of 1 -> [<<"`ip` = ", Ip/binary>> | Out]; _ -> [<<",`ip` = ", Ip/binary>> | Out] end,
    generate_update_sql (charge_ip_white_record, Record, Changes, Out1);
generate_update_sql (charge_info_record, Record, [], Out) ->
     OrderId = list_to_bin(Record#db_charge_info_record.order_id),
    [<<" WHERE `order_id` = ", OrderId/binary, ";\n">> | Out];
generate_update_sql(charge_info_record, Record, [27|Changes], Out)->
    Coupon = int_to_bin(Record#db_charge_info_record.coupon ),
    Out1 = case length(Out) of 1 -> [<<"`coupon` = ", Coupon/binary>> | Out]; _ -> [<<",`coupon` = ", Coupon/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [26|Changes], Out)->
    Bounty = int_to_bin(Record#db_charge_info_record.bounty ),
    Out1 = case length(Out) of 1 -> [<<"`bounty` = ", Bounty/binary>> | Out]; _ -> [<<",`bounty` = ", Bounty/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [25|Changes], Out)->
    Gold = int_to_bin(Record#db_charge_info_record.gold ),
    Out1 = case length(Out) of 1 -> [<<"`gold` = ", Gold/binary>> | Out]; _ -> [<<",`gold` = ", Gold/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [24|Changes], Out)->
    Source = int_to_bin(Record#db_charge_info_record.source ),
    Out1 = case length(Out) of 1 -> [<<"`source` = ", Source/binary>> | Out]; _ -> [<<",`source` = ", Source/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [23|Changes], Out)->
    Status = int_to_bin(Record#db_charge_info_record.status ),
    Out1 = case length(Out) of 1 -> [<<"`status` = ", Status/binary>> | Out]; _ -> [<<",`status` = ", Status/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [22|Changes], Out)->
    Channel = list_to_bin(Record#db_charge_info_record.channel ),
    Out1 = case length(Out) of 1 -> [<<"`channel` = ", Channel/binary>> | Out]; _ -> [<<",`channel` = ", Channel/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [21|Changes], Out)->
    RecordTime = int_to_bin(Record#db_charge_info_record.record_time ),
    Out1 = case length(Out) of 1 -> [<<"`record_time` = ", RecordTime/binary>> | Out]; _ -> [<<",`record_time` = ", RecordTime/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [20|Changes], Out)->
    Ingot = int_to_bin(Record#db_charge_info_record.ingot ),
    Out1 = case length(Out) of 1 -> [<<"`ingot` = ", Ingot/binary>> | Out]; _ -> [<<",`ingot` = ", Ingot/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [19|Changes], Out)->
    Money = float_to_bin(Record#db_charge_info_record.money ),
    Out1 = case length(Out) of 1 -> [<<"`money` = ", Money/binary>> | Out]; _ -> [<<",`money` = ", Money/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [18|Changes], Out)->
    CurrPower = int_to_bin(Record#db_charge_info_record.curr_power ),
    Out1 = case length(Out) of 1 -> [<<"`curr_power` = ", CurrPower/binary>> | Out]; _ -> [<<",`curr_power` = ", CurrPower/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [17|Changes], Out)->
    FirstTime = int_to_bin(Record#db_charge_info_record.first_time ),
    Out1 = case length(Out) of 1 -> [<<"`first_time` = ", FirstTime/binary>> | Out]; _ -> [<<",`first_time` = ", FirstTime/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [16|Changes], Out)->
    RegTime = int_to_bin(Record#db_charge_info_record.reg_time ),
    Out1 = case length(Out) of 1 -> [<<"`reg_time` = ", RegTime/binary>> | Out]; _ -> [<<",`reg_time` = ", RegTime/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [15|Changes], Out)->
    CurrTaskId = int_to_bin(Record#db_charge_info_record.curr_task_id ),
    Out1 = case length(Out) of 1 -> [<<"`curr_task_id` = ", CurrTaskId/binary>> | Out]; _ -> [<<",`curr_task_id` = ", CurrTaskId/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [14|Changes], Out)->
    CurrLevel = int_to_bin(Record#db_charge_info_record.curr_level ),
    Out1 = case length(Out) of 1 -> [<<"`curr_level` = ", CurrLevel/binary>> | Out]; _ -> [<<",`curr_level` = ", CurrLevel/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [13|Changes], Out)->
    IsFirst = int_to_bin(Record#db_charge_info_record.is_first ),
    Out1 = case length(Out) of 1 -> [<<"`is_first` = ", IsFirst/binary>> | Out]; _ -> [<<",`is_first` = ", IsFirst/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [12|Changes], Out)->
    PlayerId = int_to_bin(Record#db_charge_info_record.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [11|Changes], Out)->
    AccId = list_to_bin(Record#db_charge_info_record.acc_id ),
    Out1 = case length(Out) of 1 -> [<<"`acc_id` = ", AccId/binary>> | Out]; _ -> [<<",`acc_id` = ", AccId/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [10|Changes], Out)->
    ChargeItemId = int_to_bin(Record#db_charge_info_record.charge_item_id ),
    Out1 = case length(Out) of 1 -> [<<"`charge_item_id` = ", ChargeItemId/binary>> | Out]; _ -> [<<",`charge_item_id` = ", ChargeItemId/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [9|Changes], Out)->
    GameChargeId = int_to_bin(Record#db_charge_info_record.game_charge_id ),
    Out1 = case length(Out) of 1 -> [<<"`game_charge_id` = ", GameChargeId/binary>> | Out]; _ -> [<<",`game_charge_id` = ", GameChargeId/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [8|Changes], Out)->
    Node = list_to_bin(Record#db_charge_info_record.node ),
    Out1 = case length(Out) of 1 -> [<<"`node` = ", Node/binary>> | Out]; _ -> [<<",`node` = ", Node/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [7|Changes], Out)->
    ServerId = list_to_bin(Record#db_charge_info_record.server_id ),
    Out1 = case length(Out) of 1 -> [<<"`server_id` = ", ServerId/binary>> | Out]; _ -> [<<",`server_id` = ", ServerId/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [6|Changes], Out)->
    PartId = list_to_bin(Record#db_charge_info_record.part_id ),
    Out1 = case length(Out) of 1 -> [<<"`part_id` = ", PartId/binary>> | Out]; _ -> [<<",`part_id` = ", PartId/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [5|Changes], Out)->
    Ip = list_to_bin(Record#db_charge_info_record.ip ),
    Out1 = case length(Out) of 1 -> [<<"`ip` = ", Ip/binary>> | Out]; _ -> [<<",`ip` = ", Ip/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [4|Changes], Out)->
    ChargeType = int_to_bin(Record#db_charge_info_record.charge_type ),
    Out1 = case length(Out) of 1 -> [<<"`charge_type` = ", ChargeType/binary>> | Out]; _ -> [<<",`charge_type` = ", ChargeType/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql(charge_info_record, Record, [3|Changes], Out)->
    OrderId = list_to_bin(Record#db_charge_info_record.order_id ),
    Out1 = case length(Out) of 1 -> [<<"`order_id` = ", OrderId/binary>> | Out]; _ -> [<<",`order_id` = ", OrderId/binary>> | Out] end,
    generate_update_sql (charge_info_record, Record, Changes, Out1);
generate_update_sql (c_server_node, Record, [], Out) ->
     Node = list_to_bin(Record#db_c_server_node.node),
    [<<" WHERE `node` = ", Node/binary, ";\n">> | Out];
generate_update_sql(c_server_node, Record, [15|Changes], Out)->
    PlatformId = list_to_bin(Record#db_c_server_node.platform_id ),
    Out1 = case length(Out) of 1 -> [<<"`platform_id` = ", PlatformId/binary>> | Out]; _ -> [<<",`platform_id` = ", PlatformId/binary>> | Out] end,
    generate_update_sql (c_server_node, Record, Changes, Out1);
generate_update_sql(c_server_node, Record, [14|Changes], Out)->
    RunState = int_to_bin(Record#db_c_server_node.run_state ),
    Out1 = case length(Out) of 1 -> [<<"`run_state` = ", RunState/binary>> | Out]; _ -> [<<",`run_state` = ", RunState/binary>> | Out] end,
    generate_update_sql (c_server_node, Record, Changes, Out1);
generate_update_sql(c_server_node, Record, [13|Changes], Out)->
    State = int_to_bin(Record#db_c_server_node.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (c_server_node, Record, Changes, Out1);
generate_update_sql(c_server_node, Record, [12|Changes], Out)->
    OpenTime = int_to_bin(Record#db_c_server_node.open_time ),
    Out1 = case length(Out) of 1 -> [<<"`open_time` = ", OpenTime/binary>> | Out]; _ -> [<<",`open_time` = ", OpenTime/binary>> | Out] end,
    generate_update_sql (c_server_node, Record, Changes, Out1);
generate_update_sql(c_server_node, Record, [11|Changes], Out)->
    ZoneNode = list_to_bin(Record#db_c_server_node.zone_node ),
    Out1 = case length(Out) of 1 -> [<<"`zone_node` = ", ZoneNode/binary>> | Out]; _ -> [<<",`zone_node` = ", ZoneNode/binary>> | Out] end,
    generate_update_sql (c_server_node, Record, Changes, Out1);
generate_update_sql(c_server_node, Record, [10|Changes], Out)->
    Type = int_to_bin(Record#db_c_server_node.type ),
    Out1 = case length(Out) of 1 -> [<<"`type` = ", Type/binary>> | Out]; _ -> [<<",`type` = ", Type/binary>> | Out] end,
    generate_update_sql (c_server_node, Record, Changes, Out1);
generate_update_sql(c_server_node, Record, [9|Changes], Out)->
    DbName = list_to_bin(Record#db_c_server_node.db_name ),
    Out1 = case length(Out) of 1 -> [<<"`db_name` = ", DbName/binary>> | Out]; _ -> [<<",`db_name` = ", DbName/binary>> | Out] end,
    generate_update_sql (c_server_node, Record, Changes, Out1);
generate_update_sql(c_server_node, Record, [8|Changes], Out)->
    DbPort = int_to_bin(Record#db_c_server_node.db_port ),
    Out1 = case length(Out) of 1 -> [<<"`db_port` = ", DbPort/binary>> | Out]; _ -> [<<",`db_port` = ", DbPort/binary>> | Out] end,
    generate_update_sql (c_server_node, Record, Changes, Out1);
generate_update_sql(c_server_node, Record, [7|Changes], Out)->
    DbHost = list_to_bin(Record#db_c_server_node.db_host ),
    Out1 = case length(Out) of 1 -> [<<"`db_host` = ", DbHost/binary>> | Out]; _ -> [<<",`db_host` = ", DbHost/binary>> | Out] end,
    generate_update_sql (c_server_node, Record, Changes, Out1);
generate_update_sql(c_server_node, Record, [6|Changes], Out)->
    WebPort = int_to_bin(Record#db_c_server_node.web_port ),
    Out1 = case length(Out) of 1 -> [<<"`web_port` = ", WebPort/binary>> | Out]; _ -> [<<",`web_port` = ", WebPort/binary>> | Out] end,
    generate_update_sql (c_server_node, Record, Changes, Out1);
generate_update_sql(c_server_node, Record, [5|Changes], Out)->
    Port = int_to_bin(Record#db_c_server_node.port ),
    Out1 = case length(Out) of 1 -> [<<"`port` = ", Port/binary>> | Out]; _ -> [<<",`port` = ", Port/binary>> | Out] end,
    generate_update_sql (c_server_node, Record, Changes, Out1);
generate_update_sql(c_server_node, Record, [4|Changes], Out)->
    Ip = list_to_bin(Record#db_c_server_node.ip ),
    Out1 = case length(Out) of 1 -> [<<"`ip` = ", Ip/binary>> | Out]; _ -> [<<",`ip` = ", Ip/binary>> | Out] end,
    generate_update_sql (c_server_node, Record, Changes, Out1);
generate_update_sql(c_server_node, Record, [3|Changes], Out)->
    Node = list_to_bin(Record#db_c_server_node.node ),
    Out1 = case length(Out) of 1 -> [<<"`node` = ", Node/binary>> | Out]; _ -> [<<",`node` = ", Node/binary>> | Out] end,
    generate_update_sql (c_server_node, Record, Changes, Out1);
generate_update_sql (c_game_server, Record, [], Out) ->
     PlatformId = list_to_bin(Record#db_c_game_server.platform_id),
    Sid = list_to_bin(Record#db_c_game_server.sid),
    [<<" WHERE `sid` = ", Sid/binary,        " AND `platform_id` = ", PlatformId/binary, ";\n">> | Out];
generate_update_sql(c_game_server, Record, [7|Changes], Out)->
    Node = list_to_bin(Record#db_c_game_server.node ),
    Out1 = case length(Out) of 1 -> [<<"`node` = ", Node/binary>> | Out]; _ -> [<<",`node` = ", Node/binary>> | Out] end,
    generate_update_sql (c_game_server, Record, Changes, Out1);
generate_update_sql(c_game_server, Record, [6|Changes], Out)->
    IsShow = int_to_bin(Record#db_c_game_server.is_show ),
    Out1 = case length(Out) of 1 -> [<<"`is_show` = ", IsShow/binary>> | Out]; _ -> [<<",`is_show` = ", IsShow/binary>> | Out] end,
    generate_update_sql (c_game_server, Record, Changes, Out1);
generate_update_sql(c_game_server, Record, [5|Changes], Out)->
    Desc = list_to_bin(Record#db_c_game_server.desc ),
    Out1 = case length(Out) of 1 -> [<<"`desc` = ", Desc/binary>> | Out]; _ -> [<<",`desc` = ", Desc/binary>> | Out] end,
    generate_update_sql (c_game_server, Record, Changes, Out1);
generate_update_sql(c_game_server, Record, [4|Changes], Out)->
    Sid = list_to_bin(Record#db_c_game_server.sid ),
    Out1 = case length(Out) of 1 -> [<<"`sid` = ", Sid/binary>> | Out]; _ -> [<<",`sid` = ", Sid/binary>> | Out] end,
    generate_update_sql (c_game_server, Record, Changes, Out1);
generate_update_sql(c_game_server, Record, [3|Changes], Out)->
    PlatformId = list_to_bin(Record#db_c_game_server.platform_id ),
    Out1 = case length(Out) of 1 -> [<<"`platform_id` = ", PlatformId/binary>> | Out]; _ -> [<<",`platform_id` = ", PlatformId/binary>> | Out] end,
    generate_update_sql (c_game_server, Record, Changes, Out1);
generate_update_sql (brave_one, Record, [], Out) ->
     PlayerId = int_to_bin(Record#db_brave_one.player_id),
    [<<" WHERE `player_id` = ", PlayerId/binary, ";\n">> | Out];
generate_update_sql(brave_one, Record, [9|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_brave_one.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (brave_one, Record, Changes, Out1);
generate_update_sql(brave_one, Record, [8|Changes], Out)->
    FightPlayerId = int_to_bin(Record#db_brave_one.fight_player_id ),
    Out1 = case length(Out) of 1 -> [<<"`fight_player_id` = ", FightPlayerId/binary>> | Out]; _ -> [<<",`fight_player_id` = ", FightPlayerId/binary>> | Out] end,
    generate_update_sql (brave_one, Record, Changes, Out1);
generate_update_sql(brave_one, Record, [7|Changes], Out)->
    StartTime = int_to_bin(Record#db_brave_one.start_time ),
    Out1 = case length(Out) of 1 -> [<<"`start_time` = ", StartTime/binary>> | Out]; _ -> [<<",`start_time` = ", StartTime/binary>> | Out] end,
    generate_update_sql (brave_one, Record, Changes, Out1);
generate_update_sql(brave_one, Record, [6|Changes], Out)->
    BraveType = int_to_bin(Record#db_brave_one.brave_type ),
    Out1 = case length(Out) of 1 -> [<<"`brave_type` = ", BraveType/binary>> | Out]; _ -> [<<",`brave_type` = ", BraveType/binary>> | Out] end,
    generate_update_sql (brave_one, Record, Changes, Out1);
generate_update_sql(brave_one, Record, [5|Changes], Out)->
    PosId = int_to_bin(Record#db_brave_one.pos_id ),
    Out1 = case length(Out) of 1 -> [<<"`pos_id` = ", PosId/binary>> | Out]; _ -> [<<",`pos_id` = ", PosId/binary>> | Out] end,
    generate_update_sql (brave_one, Record, Changes, Out1);
generate_update_sql(brave_one, Record, [4|Changes], Out)->
    Id = int_to_bin(Record#db_brave_one.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (brave_one, Record, Changes, Out1);
generate_update_sql(brave_one, Record, [3|Changes], Out)->
    PlayerId = int_to_bin(Record#db_brave_one.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (brave_one, Record, Changes, Out1);
generate_update_sql (boss_one_on_one, Record, [], Out) ->
     Id = int_to_bin(Record#db_boss_one_on_one.id),
    [<<" WHERE `id` = ", Id/binary, ";\n">> | Out];
generate_update_sql(boss_one_on_one, Record, [9|Changes], Out)->
    CreatedTime = int_to_bin(Record#db_boss_one_on_one.created_time ),
    Out1 = case length(Out) of 1 -> [<<"`created_time` = ", CreatedTime/binary>> | Out]; _ -> [<<",`created_time` = ", CreatedTime/binary>> | Out] end,
    generate_update_sql (boss_one_on_one, Record, Changes, Out1);
generate_update_sql(boss_one_on_one, Record, [8|Changes], Out)->
    Winner = int_to_bin(Record#db_boss_one_on_one.winner ),
    Out1 = case length(Out) of 1 -> [<<"`winner` = ", Winner/binary>> | Out]; _ -> [<<",`winner` = ", Winner/binary>> | Out] end,
    generate_update_sql (boss_one_on_one, Record, Changes, Out1);
generate_update_sql(boss_one_on_one, Record, [7|Changes], Out)->
    PlayerTotalAward = int_to_bin(Record#db_boss_one_on_one.player_total_award ),
    Out1 = case length(Out) of 1 -> [<<"`player_total_award` = ", PlayerTotalAward/binary>> | Out]; _ -> [<<",`player_total_award` = ", PlayerTotalAward/binary>> | Out] end,
    generate_update_sql (boss_one_on_one, Record, Changes, Out1);
generate_update_sql(boss_one_on_one, Record, [6|Changes], Out)->
    PlayerTotalCost = int_to_bin(Record#db_boss_one_on_one.player_total_cost ),
    Out1 = case length(Out) of 1 -> [<<"`player_total_cost` = ", PlayerTotalCost/binary>> | Out]; _ -> [<<",`player_total_cost` = ", PlayerTotalCost/binary>> | Out] end,
    generate_update_sql (boss_one_on_one, Record, Changes, Out1);
generate_update_sql(boss_one_on_one, Record, [5|Changes], Out)->
    AwayBoss = int_to_bin(Record#db_boss_one_on_one.away_boss ),
    Out1 = case length(Out) of 1 -> [<<"`away_boss` = ", AwayBoss/binary>> | Out]; _ -> [<<",`away_boss` = ", AwayBoss/binary>> | Out] end,
    generate_update_sql (boss_one_on_one, Record, Changes, Out1);
generate_update_sql(boss_one_on_one, Record, [4|Changes], Out)->
    HomeBoss = int_to_bin(Record#db_boss_one_on_one.home_boss ),
    Out1 = case length(Out) of 1 -> [<<"`home_boss` = ", HomeBoss/binary>> | Out]; _ -> [<<",`home_boss` = ", HomeBoss/binary>> | Out] end,
    generate_update_sql (boss_one_on_one, Record, Changes, Out1);
generate_update_sql(boss_one_on_one, Record, [3|Changes], Out)->
    Id = int_to_bin(Record#db_boss_one_on_one.id ),
    Out1 = case length(Out) of 1 -> [<<"`id` = ", Id/binary>> | Out]; _ -> [<<",`id` = ", Id/binary>> | Out] end,
    generate_update_sql (boss_one_on_one, Record, Changes, Out1);
generate_update_sql (activity_info, Record, [], Out) ->
     ActivityId = int_to_bin(Record#db_activity_info.activity_id),
    [<<" WHERE `activity_id` = ", ActivityId/binary, ";\n">> | Out];
generate_update_sql(activity_info, Record, [8|Changes], Out)->
    ConfigCloseTime = int_to_bin(Record#db_activity_info.config_close_time ),
    Out1 = case length(Out) of 1 -> [<<"`config_close_time` = ", ConfigCloseTime/binary>> | Out]; _ -> [<<",`config_close_time` = ", ConfigCloseTime/binary>> | Out] end,
    generate_update_sql (activity_info, Record, Changes, Out1);
generate_update_sql(activity_info, Record, [7|Changes], Out)->
    ConfigOpenTime = int_to_bin(Record#db_activity_info.config_open_time ),
    Out1 = case length(Out) of 1 -> [<<"`config_open_time` = ", ConfigOpenTime/binary>> | Out]; _ -> [<<",`config_open_time` = ", ConfigOpenTime/binary>> | Out] end,
    generate_update_sql (activity_info, Record, Changes, Out1);
generate_update_sql(activity_info, Record, [6|Changes], Out)->
    LastCloseTime = int_to_bin(Record#db_activity_info.last_close_time ),
    Out1 = case length(Out) of 1 -> [<<"`last_close_time` = ", LastCloseTime/binary>> | Out]; _ -> [<<",`last_close_time` = ", LastCloseTime/binary>> | Out] end,
    generate_update_sql (activity_info, Record, Changes, Out1);
generate_update_sql(activity_info, Record, [5|Changes], Out)->
    LastOpenTime = int_to_bin(Record#db_activity_info.last_open_time ),
    Out1 = case length(Out) of 1 -> [<<"`last_open_time` = ", LastOpenTime/binary>> | Out]; _ -> [<<",`last_open_time` = ", LastOpenTime/binary>> | Out] end,
    generate_update_sql (activity_info, Record, Changes, Out1);
generate_update_sql(activity_info, Record, [4|Changes], Out)->
    State = int_to_bin(Record#db_activity_info.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (activity_info, Record, Changes, Out1);
generate_update_sql(activity_info, Record, [3|Changes], Out)->
    ActivityId = int_to_bin(Record#db_activity_info.activity_id ),
    Out1 = case length(Out) of 1 -> [<<"`activity_id` = ", ActivityId/binary>> | Out]; _ -> [<<",`activity_id` = ", ActivityId/binary>> | Out] end,
    generate_update_sql (activity_info, Record, Changes, Out1);
generate_update_sql (activity_award, Record, [], Out) ->
     ActivityId = int_to_bin(Record#db_activity_award.activity_id),
    [<<" WHERE `activity_id` = ", ActivityId/binary, ";\n">> | Out];
generate_update_sql(activity_award, Record, [6|Changes], Out)->
    ChangeTime = int_to_bin(Record#db_activity_award.change_time ),
    Out1 = case length(Out) of 1 -> [<<"`change_time` = ", ChangeTime/binary>> | Out]; _ -> [<<",`change_time` = ", ChangeTime/binary>> | Out] end,
    generate_update_sql (activity_award, Record, Changes, Out1);
generate_update_sql(activity_award, Record, [5|Changes], Out)->
    State = int_to_bin(Record#db_activity_award.state ),
    Out1 = case length(Out) of 1 -> [<<"`state` = ", State/binary>> | Out]; _ -> [<<",`state` = ", State/binary>> | Out] end,
    generate_update_sql (activity_award, Record, Changes, Out1);
generate_update_sql(activity_award, Record, [4|Changes], Out)->
    StartTime = int_to_bin(Record#db_activity_award.start_time ),
    Out1 = case length(Out) of 1 -> [<<"`start_time` = ", StartTime/binary>> | Out]; _ -> [<<",`start_time` = ", StartTime/binary>> | Out] end,
    generate_update_sql (activity_award, Record, Changes, Out1);
generate_update_sql(activity_award, Record, [3|Changes], Out)->
    ActivityId = int_to_bin(Record#db_activity_award.activity_id ),
    Out1 = case length(Out) of 1 -> [<<"`activity_id` = ", ActivityId/binary>> | Out]; _ -> [<<",`activity_id` = ", ActivityId/binary>> | Out] end,
    generate_update_sql (activity_award, Record, Changes, Out1);
generate_update_sql (account_share_data, Record, [], Out) ->
     PlatformId = list_to_bin(Record#db_account_share_data.platform_id),
    Account = list_to_bin(Record#db_account_share_data.account),
    [<<" WHERE `account` = ", Account/binary,        " AND `platform_id` = ", PlatformId/binary, ";\n">> | Out];
generate_update_sql(account_share_data, Record, [6|Changes], Out)->
    FinishShareTimes = int_to_bin(Record#db_account_share_data.finish_share_times ),
    Out1 = case length(Out) of 1 -> [<<"`finish_share_times` = ", FinishShareTimes/binary>> | Out]; _ -> [<<",`finish_share_times` = ", FinishShareTimes/binary>> | Out] end,
    generate_update_sql (account_share_data, Record, Changes, Out1);
generate_update_sql(account_share_data, Record, [5|Changes], Out)->
    LastShareTime = int_to_bin(Record#db_account_share_data.last_share_time ),
    Out1 = case length(Out) of 1 -> [<<"`last_share_time` = ", LastShareTime/binary>> | Out]; _ -> [<<",`last_share_time` = ", LastShareTime/binary>> | Out] end,
    generate_update_sql (account_share_data, Record, Changes, Out1);
generate_update_sql(account_share_data, Record, [4|Changes], Out)->
    Account = list_to_bin(Record#db_account_share_data.account ),
    Out1 = case length(Out) of 1 -> [<<"`account` = ", Account/binary>> | Out]; _ -> [<<",`account` = ", Account/binary>> | Out] end,
    generate_update_sql (account_share_data, Record, Changes, Out1);
generate_update_sql(account_share_data, Record, [3|Changes], Out)->
    PlatformId = list_to_bin(Record#db_account_share_data.platform_id ),
    Out1 = case length(Out) of 1 -> [<<"`platform_id` = ", PlatformId/binary>> | Out]; _ -> [<<",`platform_id` = ", PlatformId/binary>> | Out] end,
    generate_update_sql (account_share_data, Record, Changes, Out1);
generate_update_sql (account_charge_white, Record, [], Out) ->
     PlatformId = list_to_bin(Record#db_account_charge_white.platform_id),
    Account = list_to_bin(Record#db_account_charge_white.account),
    [<<" WHERE `account` = ", Account/binary,        " AND `platform_id` = ", PlatformId/binary, ";\n">> | Out];
generate_update_sql(account_charge_white, Record, [5|Changes], Out)->
    IsWhite = int_to_bin(Record#db_account_charge_white.is_white ),
    Out1 = case length(Out) of 1 -> [<<"`is_white` = ", IsWhite/binary>> | Out]; _ -> [<<",`is_white` = ", IsWhite/binary>> | Out] end,
    generate_update_sql (account_charge_white, Record, Changes, Out1);
generate_update_sql(account_charge_white, Record, [4|Changes], Out)->
    Account = list_to_bin(Record#db_account_charge_white.account ),
    Out1 = case length(Out) of 1 -> [<<"`account` = ", Account/binary>> | Out]; _ -> [<<",`account` = ", Account/binary>> | Out] end,
    generate_update_sql (account_charge_white, Record, Changes, Out1);
generate_update_sql(account_charge_white, Record, [3|Changes], Out)->
    PlatformId = list_to_bin(Record#db_account_charge_white.platform_id ),
    Out1 = case length(Out) of 1 -> [<<"`platform_id` = ", PlatformId/binary>> | Out]; _ -> [<<",`platform_id` = ", PlatformId/binary>> | Out] end,
    generate_update_sql (account_charge_white, Record, Changes, Out1);
generate_update_sql (account, Record, [], Out) ->
     AccId = list_to_bin(Record#db_account.acc_id),
    ServerId = list_to_bin(Record#db_account.server_id),
    [<<" WHERE `server_id` = ", ServerId/binary,        " AND `acc_id` = ", AccId/binary, ";\n">> | Out];
generate_update_sql(account, Record, [10|Changes], Out)->
    Channel = list_to_bin(Record#db_account.channel ),
    Out1 = case length(Out) of 1 -> [<<"`channel` = ", Channel/binary>> | Out]; _ -> [<<",`channel` = ", Channel/binary>> | Out] end,
    generate_update_sql (account, Record, Changes, Out1);
generate_update_sql(account, Record, [9|Changes], Out)->
    Time = int_to_bin(Record#db_account.time ),
    Out1 = case length(Out) of 1 -> [<<"`time` = ", Time/binary>> | Out]; _ -> [<<",`time` = ", Time/binary>> | Out] end,
    generate_update_sql (account, Record, Changes, Out1);
generate_update_sql(account, Record, [8|Changes], Out)->
    IsFinishFirstTask = int_to_bin(Record#db_account.is_finish_first_task ),
    Out1 = case length(Out) of 1 -> [<<"`is_finish_first_task` = ", IsFinishFirstTask/binary>> | Out]; _ -> [<<",`is_finish_first_task` = ", IsFinishFirstTask/binary>> | Out] end,
    generate_update_sql (account, Record, Changes, Out1);
generate_update_sql(account, Record, [7|Changes], Out)->
    IsEnterGame = int_to_bin(Record#db_account.is_enter_game ),
    Out1 = case length(Out) of 1 -> [<<"`is_enter_game` = ", IsEnterGame/binary>> | Out]; _ -> [<<",`is_enter_game` = ", IsEnterGame/binary>> | Out] end,
    generate_update_sql (account, Record, Changes, Out1);
generate_update_sql(account, Record, [6|Changes], Out)->
    PlayerId = int_to_bin(Record#db_account.player_id ),
    Out1 = case length(Out) of 1 -> [<<"`player_id` = ", PlayerId/binary>> | Out]; _ -> [<<",`player_id` = ", PlayerId/binary>> | Out] end,
    generate_update_sql (account, Record, Changes, Out1);
generate_update_sql(account, Record, [5|Changes], Out)->
    IsCreateRole = int_to_bin(Record#db_account.is_create_role ),
    Out1 = case length(Out) of 1 -> [<<"`is_create_role` = ", IsCreateRole/binary>> | Out]; _ -> [<<",`is_create_role` = ", IsCreateRole/binary>> | Out] end,
    generate_update_sql (account, Record, Changes, Out1);
generate_update_sql(account, Record, [4|Changes], Out)->
    ServerId = list_to_bin(Record#db_account.server_id ),
    Out1 = case length(Out) of 1 -> [<<"`server_id` = ", ServerId/binary>> | Out]; _ -> [<<",`server_id` = ", ServerId/binary>> | Out] end,
    generate_update_sql (account, Record, Changes, Out1);
generate_update_sql(account, Record, [3|Changes], Out)->
    AccId = list_to_bin(Record#db_account.acc_id ),
    Out1 = case length(Out) of 1 -> [<<"`acc_id` = ", AccId/binary>> | Out]; _ -> [<<",`acc_id` = ", AccId/binary>> | Out] end,
    generate_update_sql (account, Record, Changes, Out1).

is_incremental_sync(Table) ->
    case Table of
        player_data ->
            true;
        player_prop ->
            true;
        player_conditions_data ->
            true;
        rank_info ->
            true;
        consume_statistics ->
            true;
        player_game_data ->
            true;
        player_sys_attr ->
            true;
        _ ->
            false
    end.

get_incremental_tables() ->
    [
        player_data,
        player_prop,
        player_conditions_data,
        rank_info,
        consume_statistics,
        player_game_data,
        player_sys_attr
    ].

get_bin_log_table(player_sys_attr) ->
   player_sys_attr_bin_log;
get_bin_log_table(player_game_data) ->
   player_game_data_bin_log;
get_bin_log_table(consume_statistics) ->
   consume_statistics_bin_log;
get_bin_log_table(rank_info) ->
   rank_info_bin_log;
get_bin_log_table(player_conditions_data) ->
   player_conditions_data_bin_log;
get_bin_log_table(player_prop) ->
   player_prop_bin_log;
get_bin_log_table(player_data) ->
   player_data_bin_log;

get_bin_log_table(Other) ->exit({none_bin_log_table, Other}).

is_dets_table(player_server_data) ->
   true;
is_dets_table(player_charge_record) ->
   true;
is_dets_table(player_conditions_data) ->
   true;
is_dets_table(account) ->
   true;
is_dets_table(player_charge_activity) ->
   true;
is_dets_table(player_game_data) ->
   true;
is_dets_table(player_offline_apply) ->
   true;
is_dets_table(player_sys_attr) ->
   true;
is_dets_table(player_charge_info_record) ->
   true;
is_dets_table(charge_info_record) ->
   true;
is_dets_table(consume_statistics) ->
   true;
is_dets_table(_) ->false.

get_log_table_list() ->
    ["scene_log", "player_prop_log", "player_online_log", "player_login_log", "player_invite_friend_log", "player_gift_mail_log", "player_game_log", "player_client_log", "oauth_order_log"].

tran_bin_log (_Table, {_, _Current, _Current}) ->
    noop;
tran_bin_log (Table, {_, null, Last}) ->
    tran_to_sql({Table, Table, insert, Last});
tran_bin_log (Table, {_, Current, null}) ->
    tran_to_sql({Table, Table, delete, Current});
tran_bin_log (Table, {_, Current, Last}) ->
    Size = tuple_size(Last),
    tran_to_sql({Table, Table, update, Last, Current, get_changes(Size, Last, Current)}).

get_changes (N, NewRecord, OldRecord) ->
    get_changes(N, NewRecord, OldRecord, []).
get_changes (2, _, _, Changes) ->
    Changes;
get_changes (N, NewRecord, OldRecord, Changes) ->
    case erlang:element(N, NewRecord) =:= erlang:element(N, OldRecord) of
        true -> get_changes(N - 1, NewRecord, OldRecord, Changes);
        false -> get_changes(N - 1, NewRecord, OldRecord, [N | Changes])
    end.

add_tran_action (Action) ->
    case get(tran_actions) of
        [] ->
            put(tran_actions, [Action]);
        ActionList ->
            put(tran_actions, [Action | ActionList])
    end.

add_dirty_action(Action) ->
    case get(dirty_actions) of
        undefined ->
            put(dirty_actions, [Action]);
        [] ->
            put(dirty_actions, [Action]);
        ActionList ->
            put(dirty_actions, [Action | ActionList])
    end.

tran_apply(F) when is_function(F) ->
    ensure_tran(),
    case get(tran_apply_actions) of
        undefined ->
            put(tran_apply_actions, [F]);
        [] ->
            put(tran_apply_actions, [F]);
        ActionList ->
            put(tran_apply_actions, [F | ActionList])
    end,
    ok.

do_tran_apply_action(TranApplyActions) ->
    case TranApplyActions of
        undefined ->
            noop;
        [] ->
            noop;
        ActionList ->
            case catch [F() || F <- lists:reverse(ActionList)] of
                 {'EXIT', Reason} ->
                     logger:error("tran_apply:~p~n", [Reason]);
                 _ ->
                     noop
            end,
            ok
    end.

tran_merge_apply({M, F, A}, E) ->
    tran_merge_apply({M, F, A}, E, true).
tran_merge_apply({M, F, A}, E, IsState) ->
    ensure_tran(),
    case get(tran_merge_apply_actions) of
        undefined ->
            put(tran_merge_apply_actions, [{{M, F, A}, [E]}]);
        [] ->
            put(tran_merge_apply_actions, [{{M, F, A}, [E]}]);
        ActionList ->
            case lists:keytake({M, F, A}, 1, ActionList) of
           {value, {{M, F, A}, L}, L1} ->
               NewList =
                   if
                       IsState ->
                           [{{M, F, A}, [E | L]} | L1];
                       true ->
                           {Key, _Value} = E,
                           NewL2 = lists:keydelete(Key, 1, L),
                           [{{M, F, A}, [E | NewL2]} | L1]
                   end,
               put(tran_merge_apply_actions, NewList);
           _ ->
               put(tran_merge_apply_actions, ActionList ++ [{{M, F, A}, [E]}])
       end
    end,
    ok.

do_tran_merge_apply_action(TranMergeApplyActions) ->
    case TranMergeApplyActions of
        undefined ->
            noop;
        [] ->
            noop;
        ActionList ->
            case catch [erlang:apply(M, F, [A, L]) || {{M, F, A}, L} <- lists:reverse(ActionList)] of
                 {'EXIT', Reason} ->
                     logger:error("tran_merge_apply:~p~n", [Reason]);
                 _ ->
                     noop
            end,
            ok
    end.

tran_merge_apply_2({M, F, A}, MergeFun) ->
    ensure_tran(),
    case get(tran_merge_apply_2_actions) of
        undefined ->  put(tran_merge_apply_2_actions, [{{M, F}, MergeFun(A, undefined)}]);
        ActionList ->
            case lists:keytake({M, F}, 1, ActionList) of
                {value, {{M, F}, ThisA}, LeftActionList} ->
                put(tran_merge_apply_2_actions, [{{M, F}, MergeFun(A, ThisA)} | LeftActionList]);
            _ ->
                put(tran_merge_apply_2_actions, [{{M, F}, MergeFun(A, undefined)} | ActionList])
            end
    end,
    ok.
do_tran_merge_apply_2_action(TranMergeApply2Actions) ->
    case TranMergeApply2Actions of
        undefined ->  noop;
        [] ->  noop;
        ActionList ->
            case catch [erlang:apply(M, F, A) || {{M, F}, A} <- lists:reverse(ActionList)] of
       {'EXIT', Reason} ->
           logger:error("tran_merge_apply_2:~p~n", [Reason]);
                _ ->
                    noop
            end,
            ok
    end.
do(Tran) when is_function(Tran) ->
    case get(tran_actions) of
        undefined ->
            put(tran_actions, []),
            put(dirty_actions, []),
            put(tran_apply_actions, []),
            try Tran() of
                Return ->
                    TranActions = lists:reverse(get(tran_actions)),
                    DirtyActions = lists:reverse(get(dirty_actions)),
                    TranApplyActions = get(tran_apply_actions),
                    TranMergeApplyActions = get(tran_merge_apply_actions),
                    TranMergeApply2Actions = get(tran_merge_apply_2_actions),
                    erase(tran_actions),
                    erase(dirty_actions),
                    erase(tran_apply_actions),
                    erase(tran_merge_apply_actions),
                    erase(tran_merge_apply_2_actions),
                    db_proxy:submit(TranActions),
                    db_proxy:submit(DirtyActions),
                    do_tran_merge_apply_action(TranMergeApplyActions),
                    do_tran_merge_apply_2_action(TranMergeApply2Actions),
                    do_tran_apply_action(TranApplyActions),
                    Return
            catch
                _:Reason ->
                    TranActions = get(tran_actions),
                    erase(tran_actions),
                    erase(dirty_actions),
                    erase(tran_apply_actions),
                    erase(tran_merge_apply_actions),
                    erase(tran_merge_apply_2_actions),
                    rollback(TranActions),
                    if
                        Reason == {error, not_action_time} ->
                            noop;
                        Reason == not_action_time ->
                            noop;
                        true ->
                            logger:error("Rollback =>~n"
                                "    reason: ~p~n"
                          "    stacktrace: ~p~n",
                           [Reason, erlang:get_stacktrace()]
                           )
                    end,
                    exit(Reason)
                end;
        _ ->
            Tran()
    end.
rollback([]) ->
    ok;
rollback([{EtsTable, _Table, delete, Record} | T]) ->
    case is_dets_table(_Table) of true -> dets:insert(EtsTable, Record); false -> ets:insert(EtsTable, Record) end,
    db_index:insert_index(Record),
    rollback(T);
rollback([{EtsTable, _Table, delete_all, RecordList} | T]) ->
    case is_dets_table(_Table) of true -> dets:insert(EtsTable, RecordList); false -> ets:insert(EtsTable, RecordList) end,
    db_index:insert_indexs(RecordList),
    rollback(T);
rollback([{EtsTable, _Table, insert, Record} | T]) ->
    case is_dets_table(_Table) of true -> dets:delete_object(EtsTable, Record); false -> ets:delete_object(EtsTable, Record) end,
    db_index:erase_index(Record),
    rollback(T);
rollback([{EtsTable, _Table, update, NewRecord, OldRecord} | T]) ->
    case is_dets_table(_Table) of true -> dets:insert(EtsTable, OldRecord); false -> ets:insert(EtsTable, OldRecord) end,
    db_index:update_index(NewRecord, OldRecord),
    rollback(T).

ensure_tran() ->
    case get(tran_actions) of
        undefined ->
        exit(no_transaction);
    _ ->
        ok
    end.
is_tran() ->
    case get(tran_actions) of
        undefined ->
        false;
    _ ->
        true
    end.
int_to_bin(undefined) ->
    <<"NULL">>;
int_to_bin(Value) ->
    list_to_binary(integer_to_list(Value)).
float_to_bin(undefined) ->
    <<"NULL">>;
float_to_bin(Value) ->
    list_to_binary(float_to_list(Value)).
list_to_bin(undefined) ->
    <<"NULL">>;
list_to_bin(List) ->
    List2 = escape_str(List, []),
    Bin = list_to_binary(List2),
    <<"'", Bin/binary, "'">>.
escape_str([], Result) ->
    lists:reverse(Result);
escape_str([$' | String], Result) ->
    escape_str(String, [$' | [$\\ | Result]]);
escape_str([$" | String], Result) ->
    escape_str(String, [$" | [$\\ | Result]]);
escape_str([$\\ | String], Result) ->
    escape_str(String, [$\\ | [$\\ | Result]]);
escape_str([Char | String], Result) ->
    escape_str(String, [Char | Result]).
